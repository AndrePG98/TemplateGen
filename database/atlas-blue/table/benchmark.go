//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Benchmark = newBenchmarkTable("atlas-blue", "benchmark", "")

type benchmarkTable struct {
	mysql.Table

	// Columns
	ID                    mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	PlanningMaterialityID mysql.ColumnString // (DC2Type:guid)
	RevisedMaterialityID  mysql.ColumnString // (DC2Type:guid)
	BenchmarkLovID        mysql.ColumnString
	OtherBenchmarkName    mysql.ColumnString
	OtherBenchmarkFloor   mysql.ColumnFloat
	OtherBenchmarkCeiling mysql.ColumnFloat
	Quantum               mysql.ColumnFloat
	State                 mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type BenchmarkTable struct {
	benchmarkTable

	NEW benchmarkTable
}

// AS creates new BenchmarkTable with assigned alias
func (a BenchmarkTable) AS(alias string) *BenchmarkTable {
	return newBenchmarkTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BenchmarkTable with assigned schema name
func (a BenchmarkTable) FromSchema(schemaName string) *BenchmarkTable {
	return newBenchmarkTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BenchmarkTable with assigned table prefix
func (a BenchmarkTable) WithPrefix(prefix string) *BenchmarkTable {
	return newBenchmarkTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BenchmarkTable with assigned table suffix
func (a BenchmarkTable) WithSuffix(suffix string) *BenchmarkTable {
	return newBenchmarkTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBenchmarkTable(schemaName, tableName, alias string) *BenchmarkTable {
	return &BenchmarkTable{
		benchmarkTable: newBenchmarkTableImpl(schemaName, tableName, alias),
		NEW:            newBenchmarkTableImpl("", "new", ""),
	}
}

func newBenchmarkTableImpl(schemaName, tableName, alias string) benchmarkTable {
	var (
		IDColumn                    = mysql.StringColumn("id")
		PlanningMaterialityIDColumn = mysql.StringColumn("planning_materiality_id")
		RevisedMaterialityIDColumn  = mysql.StringColumn("revised_materiality_id")
		BenchmarkLovIDColumn        = mysql.StringColumn("benchmark_lov_id")
		OtherBenchmarkNameColumn    = mysql.StringColumn("other_benchmark_name")
		OtherBenchmarkFloorColumn   = mysql.FloatColumn("other_benchmark_floor")
		OtherBenchmarkCeilingColumn = mysql.FloatColumn("other_benchmark_ceiling")
		QuantumColumn               = mysql.FloatColumn("quantum")
		StateColumn                 = mysql.StringColumn("state")
		allColumns                  = mysql.ColumnList{IDColumn, PlanningMaterialityIDColumn, RevisedMaterialityIDColumn, BenchmarkLovIDColumn, OtherBenchmarkNameColumn, OtherBenchmarkFloorColumn, OtherBenchmarkCeilingColumn, QuantumColumn, StateColumn}
		mutableColumns              = mysql.ColumnList{PlanningMaterialityIDColumn, RevisedMaterialityIDColumn, BenchmarkLovIDColumn, OtherBenchmarkNameColumn, OtherBenchmarkFloorColumn, OtherBenchmarkCeilingColumn, QuantumColumn, StateColumn}
	)

	return benchmarkTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                    IDColumn,
		PlanningMaterialityID: PlanningMaterialityIDColumn,
		RevisedMaterialityID:  RevisedMaterialityIDColumn,
		BenchmarkLovID:        BenchmarkLovIDColumn,
		OtherBenchmarkName:    OtherBenchmarkNameColumn,
		OtherBenchmarkFloor:   OtherBenchmarkFloorColumn,
		OtherBenchmarkCeiling: OtherBenchmarkCeilingColumn,
		Quantum:               QuantumColumn,
		State:                 StateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
