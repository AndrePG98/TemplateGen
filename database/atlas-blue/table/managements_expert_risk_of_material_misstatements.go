//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ManagementsExpertRiskOfMaterialMisstatements = newManagementsExpertRiskOfMaterialMisstatementsTable("atlas-blue", "managements_expert_risk_of_material_misstatements", "")

type managementsExpertRiskOfMaterialMisstatementsTable struct {
	mysql.Table

	// Columns
	ID                  mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	ManagementsExpertID mysql.ColumnString // (DC2Type:guid)
	RiskOfMaterialID    mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ManagementsExpertRiskOfMaterialMisstatementsTable struct {
	managementsExpertRiskOfMaterialMisstatementsTable

	NEW managementsExpertRiskOfMaterialMisstatementsTable
}

// AS creates new ManagementsExpertRiskOfMaterialMisstatementsTable with assigned alias
func (a ManagementsExpertRiskOfMaterialMisstatementsTable) AS(alias string) *ManagementsExpertRiskOfMaterialMisstatementsTable {
	return newManagementsExpertRiskOfMaterialMisstatementsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ManagementsExpertRiskOfMaterialMisstatementsTable with assigned schema name
func (a ManagementsExpertRiskOfMaterialMisstatementsTable) FromSchema(schemaName string) *ManagementsExpertRiskOfMaterialMisstatementsTable {
	return newManagementsExpertRiskOfMaterialMisstatementsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ManagementsExpertRiskOfMaterialMisstatementsTable with assigned table prefix
func (a ManagementsExpertRiskOfMaterialMisstatementsTable) WithPrefix(prefix string) *ManagementsExpertRiskOfMaterialMisstatementsTable {
	return newManagementsExpertRiskOfMaterialMisstatementsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ManagementsExpertRiskOfMaterialMisstatementsTable with assigned table suffix
func (a ManagementsExpertRiskOfMaterialMisstatementsTable) WithSuffix(suffix string) *ManagementsExpertRiskOfMaterialMisstatementsTable {
	return newManagementsExpertRiskOfMaterialMisstatementsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newManagementsExpertRiskOfMaterialMisstatementsTable(schemaName, tableName, alias string) *ManagementsExpertRiskOfMaterialMisstatementsTable {
	return &ManagementsExpertRiskOfMaterialMisstatementsTable{
		managementsExpertRiskOfMaterialMisstatementsTable: newManagementsExpertRiskOfMaterialMisstatementsTableImpl(schemaName, tableName, alias),
		NEW: newManagementsExpertRiskOfMaterialMisstatementsTableImpl("", "new", ""),
	}
}

func newManagementsExpertRiskOfMaterialMisstatementsTableImpl(schemaName, tableName, alias string) managementsExpertRiskOfMaterialMisstatementsTable {
	var (
		IDColumn                  = mysql.StringColumn("id")
		ManagementsExpertIDColumn = mysql.StringColumn("managements_expert_id")
		RiskOfMaterialIDColumn    = mysql.StringColumn("risk_of_material_id")
		allColumns                = mysql.ColumnList{IDColumn, ManagementsExpertIDColumn, RiskOfMaterialIDColumn}
		mutableColumns            = mysql.ColumnList{ManagementsExpertIDColumn, RiskOfMaterialIDColumn}
	)

	return managementsExpertRiskOfMaterialMisstatementsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		ManagementsExpertID: ManagementsExpertIDColumn,
		RiskOfMaterialID:    RiskOfMaterialIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
