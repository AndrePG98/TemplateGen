//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var AuditorsExpertCotabds = newAuditorsExpertCotabdsTable("atlas-blue", "auditors_expert_cotabds", "")

type auditorsExpertCotabdsTable struct {
	mysql.Table

	// Columns
	ID               mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	AuditorsExpertID mysql.ColumnString // (DC2Type:guid)
	CotabdID         mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type AuditorsExpertCotabdsTable struct {
	auditorsExpertCotabdsTable

	NEW auditorsExpertCotabdsTable
}

// AS creates new AuditorsExpertCotabdsTable with assigned alias
func (a AuditorsExpertCotabdsTable) AS(alias string) *AuditorsExpertCotabdsTable {
	return newAuditorsExpertCotabdsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AuditorsExpertCotabdsTable with assigned schema name
func (a AuditorsExpertCotabdsTable) FromSchema(schemaName string) *AuditorsExpertCotabdsTable {
	return newAuditorsExpertCotabdsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AuditorsExpertCotabdsTable with assigned table prefix
func (a AuditorsExpertCotabdsTable) WithPrefix(prefix string) *AuditorsExpertCotabdsTable {
	return newAuditorsExpertCotabdsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AuditorsExpertCotabdsTable with assigned table suffix
func (a AuditorsExpertCotabdsTable) WithSuffix(suffix string) *AuditorsExpertCotabdsTable {
	return newAuditorsExpertCotabdsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAuditorsExpertCotabdsTable(schemaName, tableName, alias string) *AuditorsExpertCotabdsTable {
	return &AuditorsExpertCotabdsTable{
		auditorsExpertCotabdsTable: newAuditorsExpertCotabdsTableImpl(schemaName, tableName, alias),
		NEW:                        newAuditorsExpertCotabdsTableImpl("", "new", ""),
	}
}

func newAuditorsExpertCotabdsTableImpl(schemaName, tableName, alias string) auditorsExpertCotabdsTable {
	var (
		IDColumn               = mysql.StringColumn("id")
		AuditorsExpertIDColumn = mysql.StringColumn("auditors_expert_id")
		CotabdIDColumn         = mysql.StringColumn("cotabd_id")
		allColumns             = mysql.ColumnList{IDColumn, AuditorsExpertIDColumn, CotabdIDColumn}
		mutableColumns         = mysql.ColumnList{AuditorsExpertIDColumn, CotabdIDColumn}
	)

	return auditorsExpertCotabdsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		AuditorsExpertID: AuditorsExpertIDColumn,
		CotabdID:         CotabdIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
