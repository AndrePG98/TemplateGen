//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var UserConnectionsLogs = newUserConnectionsLogsTable("atlas-blue", "user_connections_logs", "")

type userConnectionsLogsTable struct {
	mysql.Table

	// Columns
	ID             mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	User           mysql.ColumnString // (DC2Type:guid)
	ConnectionDate mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type UserConnectionsLogsTable struct {
	userConnectionsLogsTable

	NEW userConnectionsLogsTable
}

// AS creates new UserConnectionsLogsTable with assigned alias
func (a UserConnectionsLogsTable) AS(alias string) *UserConnectionsLogsTable {
	return newUserConnectionsLogsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserConnectionsLogsTable with assigned schema name
func (a UserConnectionsLogsTable) FromSchema(schemaName string) *UserConnectionsLogsTable {
	return newUserConnectionsLogsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserConnectionsLogsTable with assigned table prefix
func (a UserConnectionsLogsTable) WithPrefix(prefix string) *UserConnectionsLogsTable {
	return newUserConnectionsLogsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserConnectionsLogsTable with assigned table suffix
func (a UserConnectionsLogsTable) WithSuffix(suffix string) *UserConnectionsLogsTable {
	return newUserConnectionsLogsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserConnectionsLogsTable(schemaName, tableName, alias string) *UserConnectionsLogsTable {
	return &UserConnectionsLogsTable{
		userConnectionsLogsTable: newUserConnectionsLogsTableImpl(schemaName, tableName, alias),
		NEW:                      newUserConnectionsLogsTableImpl("", "new", ""),
	}
}

func newUserConnectionsLogsTableImpl(schemaName, tableName, alias string) userConnectionsLogsTable {
	var (
		IDColumn             = mysql.StringColumn("id")
		UserColumn           = mysql.StringColumn("user")
		ConnectionDateColumn = mysql.TimestampColumn("connection_date")
		allColumns           = mysql.ColumnList{IDColumn, UserColumn, ConnectionDateColumn}
		mutableColumns       = mysql.ColumnList{UserColumn, ConnectionDateColumn}
	)

	return userConnectionsLogsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		User:           UserColumn,
		ConnectionDate: ConnectionDateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
