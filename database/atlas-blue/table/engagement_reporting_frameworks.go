//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var EngagementReportingFrameworks = newEngagementReportingFrameworksTable("atlas-blue", "engagement_reporting_frameworks", "")

type engagementReportingFrameworksTable struct {
	mysql.Table

	// Columns
	ID                                     mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID                           mysql.ColumnString // (DC2Type:guid)
	RiskConclusion                         mysql.ColumnString
	RelevantInformation                    mysql.ColumnString
	ApplicableFinancial                    mysql.ColumnString
	ReasonChange                           mysql.ColumnString
	ApplicablePrevious                     mysql.ColumnString
	EntityFinancial                        mysql.ColumnString
	UnderstandingEntity                    mysql.ColumnString
	IsCompanyPresent                       mysql.ColumnBool
	IsValid                                mysql.ColumnBool
	EvaluateTheEntitysAccountingPolicies   mysql.ColumnString
	AuditorPerformRiskAssessmentProcedures mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type EngagementReportingFrameworksTable struct {
	engagementReportingFrameworksTable

	NEW engagementReportingFrameworksTable
}

// AS creates new EngagementReportingFrameworksTable with assigned alias
func (a EngagementReportingFrameworksTable) AS(alias string) *EngagementReportingFrameworksTable {
	return newEngagementReportingFrameworksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EngagementReportingFrameworksTable with assigned schema name
func (a EngagementReportingFrameworksTable) FromSchema(schemaName string) *EngagementReportingFrameworksTable {
	return newEngagementReportingFrameworksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EngagementReportingFrameworksTable with assigned table prefix
func (a EngagementReportingFrameworksTable) WithPrefix(prefix string) *EngagementReportingFrameworksTable {
	return newEngagementReportingFrameworksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EngagementReportingFrameworksTable with assigned table suffix
func (a EngagementReportingFrameworksTable) WithSuffix(suffix string) *EngagementReportingFrameworksTable {
	return newEngagementReportingFrameworksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEngagementReportingFrameworksTable(schemaName, tableName, alias string) *EngagementReportingFrameworksTable {
	return &EngagementReportingFrameworksTable{
		engagementReportingFrameworksTable: newEngagementReportingFrameworksTableImpl(schemaName, tableName, alias),
		NEW:                                newEngagementReportingFrameworksTableImpl("", "new", ""),
	}
}

func newEngagementReportingFrameworksTableImpl(schemaName, tableName, alias string) engagementReportingFrameworksTable {
	var (
		IDColumn                                     = mysql.StringColumn("id")
		EngagementIDColumn                           = mysql.StringColumn("engagement_id")
		RiskConclusionColumn                         = mysql.StringColumn("risk_conclusion")
		RelevantInformationColumn                    = mysql.StringColumn("relevant_information")
		ApplicableFinancialColumn                    = mysql.StringColumn("applicable_financial")
		ReasonChangeColumn                           = mysql.StringColumn("reason_change")
		ApplicablePreviousColumn                     = mysql.StringColumn("applicable_previous")
		EntityFinancialColumn                        = mysql.StringColumn("entity_financial")
		UnderstandingEntityColumn                    = mysql.StringColumn("understanding_entity")
		IsCompanyPresentColumn                       = mysql.BoolColumn("is_company_present")
		IsValidColumn                                = mysql.BoolColumn("is_valid")
		EvaluateTheEntitysAccountingPoliciesColumn   = mysql.StringColumn("evaluate_the_entitys_accounting_policies")
		AuditorPerformRiskAssessmentProceduresColumn = mysql.StringColumn("auditor_perform_risk_assessment_procedures")
		allColumns                                   = mysql.ColumnList{IDColumn, EngagementIDColumn, RiskConclusionColumn, RelevantInformationColumn, ApplicableFinancialColumn, ReasonChangeColumn, ApplicablePreviousColumn, EntityFinancialColumn, UnderstandingEntityColumn, IsCompanyPresentColumn, IsValidColumn, EvaluateTheEntitysAccountingPoliciesColumn, AuditorPerformRiskAssessmentProceduresColumn}
		mutableColumns                               = mysql.ColumnList{EngagementIDColumn, RiskConclusionColumn, RelevantInformationColumn, ApplicableFinancialColumn, ReasonChangeColumn, ApplicablePreviousColumn, EntityFinancialColumn, UnderstandingEntityColumn, IsCompanyPresentColumn, IsValidColumn, EvaluateTheEntitysAccountingPoliciesColumn, AuditorPerformRiskAssessmentProceduresColumn}
	)

	return engagementReportingFrameworksTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                                     IDColumn,
		EngagementID:                           EngagementIDColumn,
		RiskConclusion:                         RiskConclusionColumn,
		RelevantInformation:                    RelevantInformationColumn,
		ApplicableFinancial:                    ApplicableFinancialColumn,
		ReasonChange:                           ReasonChangeColumn,
		ApplicablePrevious:                     ApplicablePreviousColumn,
		EntityFinancial:                        EntityFinancialColumn,
		UnderstandingEntity:                    UnderstandingEntityColumn,
		IsCompanyPresent:                       IsCompanyPresentColumn,
		IsValid:                                IsValidColumn,
		EvaluateTheEntitysAccountingPolicies:   EvaluateTheEntitysAccountingPoliciesColumn,
		AuditorPerformRiskAssessmentProcedures: AuditorPerformRiskAssessmentProceduresColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
