//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var DetailOfMisstatementWorkPapers = newDetailOfMisstatementWorkPapersTable("atlas-blue", "detail_of_misstatement_work_papers", "")

type detailOfMisstatementWorkPapersTable struct {
	mysql.Table

	// Columns
	ID                     mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	DetailOfMisstatementID mysql.ColumnString // (DC2Type:guid)
	WorkPaperID            mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type DetailOfMisstatementWorkPapersTable struct {
	detailOfMisstatementWorkPapersTable

	NEW detailOfMisstatementWorkPapersTable
}

// AS creates new DetailOfMisstatementWorkPapersTable with assigned alias
func (a DetailOfMisstatementWorkPapersTable) AS(alias string) *DetailOfMisstatementWorkPapersTable {
	return newDetailOfMisstatementWorkPapersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DetailOfMisstatementWorkPapersTable with assigned schema name
func (a DetailOfMisstatementWorkPapersTable) FromSchema(schemaName string) *DetailOfMisstatementWorkPapersTable {
	return newDetailOfMisstatementWorkPapersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DetailOfMisstatementWorkPapersTable with assigned table prefix
func (a DetailOfMisstatementWorkPapersTable) WithPrefix(prefix string) *DetailOfMisstatementWorkPapersTable {
	return newDetailOfMisstatementWorkPapersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DetailOfMisstatementWorkPapersTable with assigned table suffix
func (a DetailOfMisstatementWorkPapersTable) WithSuffix(suffix string) *DetailOfMisstatementWorkPapersTable {
	return newDetailOfMisstatementWorkPapersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDetailOfMisstatementWorkPapersTable(schemaName, tableName, alias string) *DetailOfMisstatementWorkPapersTable {
	return &DetailOfMisstatementWorkPapersTable{
		detailOfMisstatementWorkPapersTable: newDetailOfMisstatementWorkPapersTableImpl(schemaName, tableName, alias),
		NEW:                                 newDetailOfMisstatementWorkPapersTableImpl("", "new", ""),
	}
}

func newDetailOfMisstatementWorkPapersTableImpl(schemaName, tableName, alias string) detailOfMisstatementWorkPapersTable {
	var (
		IDColumn                     = mysql.StringColumn("id")
		DetailOfMisstatementIDColumn = mysql.StringColumn("detail_of_misstatement_id")
		WorkPaperIDColumn            = mysql.StringColumn("work_paper_id")
		allColumns                   = mysql.ColumnList{IDColumn, DetailOfMisstatementIDColumn, WorkPaperIDColumn}
		mutableColumns               = mysql.ColumnList{DetailOfMisstatementIDColumn, WorkPaperIDColumn}
	)

	return detailOfMisstatementWorkPapersTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                     IDColumn,
		DetailOfMisstatementID: DetailOfMisstatementIDColumn,
		WorkPaperID:            WorkPaperIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
