//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Reviews = newReviewsTable("atlas-blue", "reviews", "")

type reviewsTable struct {
	mysql.Table

	// Columns
	Reviewer              mysql.ColumnString // (DC2Type:guid)
	Engagement            mysql.ColumnString // (DC2Type:guid)
	StartDate             mysql.ColumnDate   // (DC2Type:date_immutable)
	EndDate               mysql.ColumnDate   // (DC2Type:date_immutable)
	BaseCountryCode       mysql.ColumnString
	MaxPeriodAfterEndDate mysql.ColumnDate // (DC2Type:date_immutable)
	ReviewerRole          mysql.ColumnString
	AllowedNotes          mysql.ColumnString // (DC2Type:array)
	AllowedAuditTrail     mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ReviewsTable struct {
	reviewsTable

	NEW reviewsTable
}

// AS creates new ReviewsTable with assigned alias
func (a ReviewsTable) AS(alias string) *ReviewsTable {
	return newReviewsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ReviewsTable with assigned schema name
func (a ReviewsTable) FromSchema(schemaName string) *ReviewsTable {
	return newReviewsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ReviewsTable with assigned table prefix
func (a ReviewsTable) WithPrefix(prefix string) *ReviewsTable {
	return newReviewsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ReviewsTable with assigned table suffix
func (a ReviewsTable) WithSuffix(suffix string) *ReviewsTable {
	return newReviewsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newReviewsTable(schemaName, tableName, alias string) *ReviewsTable {
	return &ReviewsTable{
		reviewsTable: newReviewsTableImpl(schemaName, tableName, alias),
		NEW:          newReviewsTableImpl("", "new", ""),
	}
}

func newReviewsTableImpl(schemaName, tableName, alias string) reviewsTable {
	var (
		ReviewerColumn              = mysql.StringColumn("reviewer")
		EngagementColumn            = mysql.StringColumn("engagement")
		StartDateColumn             = mysql.DateColumn("start_date")
		EndDateColumn               = mysql.DateColumn("end_date")
		BaseCountryCodeColumn       = mysql.StringColumn("base_country_code")
		MaxPeriodAfterEndDateColumn = mysql.DateColumn("max_period_after_end_date")
		ReviewerRoleColumn          = mysql.StringColumn("reviewer_role")
		AllowedNotesColumn          = mysql.StringColumn("allowedNotes")
		AllowedAuditTrailColumn     = mysql.BoolColumn("allowedAuditTrail")
		allColumns                  = mysql.ColumnList{ReviewerColumn, EngagementColumn, StartDateColumn, EndDateColumn, BaseCountryCodeColumn, MaxPeriodAfterEndDateColumn, ReviewerRoleColumn, AllowedNotesColumn, AllowedAuditTrailColumn}
		mutableColumns              = mysql.ColumnList{StartDateColumn, EndDateColumn, BaseCountryCodeColumn, MaxPeriodAfterEndDateColumn, ReviewerRoleColumn, AllowedNotesColumn, AllowedAuditTrailColumn}
	)

	return reviewsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Reviewer:              ReviewerColumn,
		Engagement:            EngagementColumn,
		StartDate:             StartDateColumn,
		EndDate:               EndDateColumn,
		BaseCountryCode:       BaseCountryCodeColumn,
		MaxPeriodAfterEndDate: MaxPeriodAfterEndDateColumn,
		ReviewerRole:          ReviewerRoleColumn,
		AllowedNotes:          AllowedNotesColumn,
		AllowedAuditTrail:     AllowedAuditTrailColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
