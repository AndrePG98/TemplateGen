//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var EngagementGoingConcernConclusionBusinessRisks = newEngagementGoingConcernConclusionBusinessRisksTable("atlas-blue", "engagement_going_concern_conclusion_business_risks", "")

type engagementGoingConcernConclusionBusinessRisksTable struct {
	mysql.Table

	// Columns
	ID                                 mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementGoingConcernConclusionID mysql.ColumnString // (DC2Type:guid)
	BusinessRiskID                     mysql.ColumnString // (DC2Type:guid)

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type EngagementGoingConcernConclusionBusinessRisksTable struct {
	engagementGoingConcernConclusionBusinessRisksTable

	NEW engagementGoingConcernConclusionBusinessRisksTable
}

// AS creates new EngagementGoingConcernConclusionBusinessRisksTable with assigned alias
func (a EngagementGoingConcernConclusionBusinessRisksTable) AS(alias string) *EngagementGoingConcernConclusionBusinessRisksTable {
	return newEngagementGoingConcernConclusionBusinessRisksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EngagementGoingConcernConclusionBusinessRisksTable with assigned schema name
func (a EngagementGoingConcernConclusionBusinessRisksTable) FromSchema(schemaName string) *EngagementGoingConcernConclusionBusinessRisksTable {
	return newEngagementGoingConcernConclusionBusinessRisksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EngagementGoingConcernConclusionBusinessRisksTable with assigned table prefix
func (a EngagementGoingConcernConclusionBusinessRisksTable) WithPrefix(prefix string) *EngagementGoingConcernConclusionBusinessRisksTable {
	return newEngagementGoingConcernConclusionBusinessRisksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EngagementGoingConcernConclusionBusinessRisksTable with assigned table suffix
func (a EngagementGoingConcernConclusionBusinessRisksTable) WithSuffix(suffix string) *EngagementGoingConcernConclusionBusinessRisksTable {
	return newEngagementGoingConcernConclusionBusinessRisksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEngagementGoingConcernConclusionBusinessRisksTable(schemaName, tableName, alias string) *EngagementGoingConcernConclusionBusinessRisksTable {
	return &EngagementGoingConcernConclusionBusinessRisksTable{
		engagementGoingConcernConclusionBusinessRisksTable: newEngagementGoingConcernConclusionBusinessRisksTableImpl(schemaName, tableName, alias),
		NEW: newEngagementGoingConcernConclusionBusinessRisksTableImpl("", "new", ""),
	}
}

func newEngagementGoingConcernConclusionBusinessRisksTableImpl(schemaName, tableName, alias string) engagementGoingConcernConclusionBusinessRisksTable {
	var (
		IDColumn                                 = mysql.StringColumn("id")
		EngagementGoingConcernConclusionIDColumn = mysql.StringColumn("engagement_going_concern_conclusion_id")
		BusinessRiskIDColumn                     = mysql.StringColumn("business_risk_id")
		allColumns                               = mysql.ColumnList{IDColumn, EngagementGoingConcernConclusionIDColumn, BusinessRiskIDColumn}
		mutableColumns                           = mysql.ColumnList{EngagementGoingConcernConclusionIDColumn, BusinessRiskIDColumn}
	)

	return engagementGoingConcernConclusionBusinessRisksTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                                 IDColumn,
		EngagementGoingConcernConclusionID: EngagementGoingConcernConclusionIDColumn,
		BusinessRiskID:                     BusinessRiskIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
