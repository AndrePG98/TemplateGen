//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var SpecificMateriality = newSpecificMaterialityTable("atlas-blue", "specific_materiality", "")

type specificMaterialityTable struct {
	mysql.Table

	// Columns
	ID                              mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	PlanningMaterialityID           mysql.ColumnString // (DC2Type:guid)
	RevisedMaterialityID            mysql.ColumnString // (DC2Type:guid)
	HasParticularClassesTransaction mysql.ColumnBool
	Comment                         mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type SpecificMaterialityTable struct {
	specificMaterialityTable

	NEW specificMaterialityTable
}

// AS creates new SpecificMaterialityTable with assigned alias
func (a SpecificMaterialityTable) AS(alias string) *SpecificMaterialityTable {
	return newSpecificMaterialityTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SpecificMaterialityTable with assigned schema name
func (a SpecificMaterialityTable) FromSchema(schemaName string) *SpecificMaterialityTable {
	return newSpecificMaterialityTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SpecificMaterialityTable with assigned table prefix
func (a SpecificMaterialityTable) WithPrefix(prefix string) *SpecificMaterialityTable {
	return newSpecificMaterialityTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SpecificMaterialityTable with assigned table suffix
func (a SpecificMaterialityTable) WithSuffix(suffix string) *SpecificMaterialityTable {
	return newSpecificMaterialityTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSpecificMaterialityTable(schemaName, tableName, alias string) *SpecificMaterialityTable {
	return &SpecificMaterialityTable{
		specificMaterialityTable: newSpecificMaterialityTableImpl(schemaName, tableName, alias),
		NEW:                      newSpecificMaterialityTableImpl("", "new", ""),
	}
}

func newSpecificMaterialityTableImpl(schemaName, tableName, alias string) specificMaterialityTable {
	var (
		IDColumn                              = mysql.StringColumn("id")
		PlanningMaterialityIDColumn           = mysql.StringColumn("planning_materiality_id")
		RevisedMaterialityIDColumn            = mysql.StringColumn("revised_materiality_id")
		HasParticularClassesTransactionColumn = mysql.BoolColumn("has_particular_classes_transaction")
		CommentColumn                         = mysql.StringColumn("comment")
		allColumns                            = mysql.ColumnList{IDColumn, PlanningMaterialityIDColumn, RevisedMaterialityIDColumn, HasParticularClassesTransactionColumn, CommentColumn}
		mutableColumns                        = mysql.ColumnList{PlanningMaterialityIDColumn, RevisedMaterialityIDColumn, HasParticularClassesTransactionColumn, CommentColumn}
	)

	return specificMaterialityTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                              IDColumn,
		PlanningMaterialityID:           PlanningMaterialityIDColumn,
		RevisedMaterialityID:            RevisedMaterialityIDColumn,
		HasParticularClassesTransaction: HasParticularClassesTransactionColumn,
		Comment:                         CommentColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
