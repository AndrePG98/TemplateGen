//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var WcgwRelevantAssertions = newWcgwRelevantAssertionsTable("atlas-blue", "wcgw_relevant_assertions", "")

type wcgwRelevantAssertionsTable struct {
	mysql.Table

	// Columns
	ID                    mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	CotabdKbpsID          mysql.ColumnString // (DC2Type:guid)
	RelevantAssertionType mysql.ColumnString
	RiskID                mysql.ColumnString
	MarkedAsSignificant   mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type WcgwRelevantAssertionsTable struct {
	wcgwRelevantAssertionsTable

	NEW wcgwRelevantAssertionsTable
}

// AS creates new WcgwRelevantAssertionsTable with assigned alias
func (a WcgwRelevantAssertionsTable) AS(alias string) *WcgwRelevantAssertionsTable {
	return newWcgwRelevantAssertionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WcgwRelevantAssertionsTable with assigned schema name
func (a WcgwRelevantAssertionsTable) FromSchema(schemaName string) *WcgwRelevantAssertionsTable {
	return newWcgwRelevantAssertionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WcgwRelevantAssertionsTable with assigned table prefix
func (a WcgwRelevantAssertionsTable) WithPrefix(prefix string) *WcgwRelevantAssertionsTable {
	return newWcgwRelevantAssertionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WcgwRelevantAssertionsTable with assigned table suffix
func (a WcgwRelevantAssertionsTable) WithSuffix(suffix string) *WcgwRelevantAssertionsTable {
	return newWcgwRelevantAssertionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWcgwRelevantAssertionsTable(schemaName, tableName, alias string) *WcgwRelevantAssertionsTable {
	return &WcgwRelevantAssertionsTable{
		wcgwRelevantAssertionsTable: newWcgwRelevantAssertionsTableImpl(schemaName, tableName, alias),
		NEW:                         newWcgwRelevantAssertionsTableImpl("", "new", ""),
	}
}

func newWcgwRelevantAssertionsTableImpl(schemaName, tableName, alias string) wcgwRelevantAssertionsTable {
	var (
		IDColumn                    = mysql.StringColumn("id")
		CotabdKbpsIDColumn          = mysql.StringColumn("cotabd_kbps_id")
		RelevantAssertionTypeColumn = mysql.StringColumn("relevant_assertion_type")
		RiskIDColumn                = mysql.StringColumn("risk_id")
		MarkedAsSignificantColumn   = mysql.BoolColumn("marked_as_significant")
		allColumns                  = mysql.ColumnList{IDColumn, CotabdKbpsIDColumn, RelevantAssertionTypeColumn, RiskIDColumn, MarkedAsSignificantColumn}
		mutableColumns              = mysql.ColumnList{CotabdKbpsIDColumn, RelevantAssertionTypeColumn, RiskIDColumn, MarkedAsSignificantColumn}
	)

	return wcgwRelevantAssertionsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                    IDColumn,
		CotabdKbpsID:          CotabdKbpsIDColumn,
		RelevantAssertionType: RelevantAssertionTypeColumn,
		RiskID:                RiskIDColumn,
		MarkedAsSignificant:   MarkedAsSignificantColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
