//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var RiskAssessmentMeetingType = newRiskAssessmentMeetingTypeTable("atlas-blue", "risk_assessment_meeting_type", "")

type riskAssessmentMeetingTypeTable struct {
	mysql.Table

	// Columns
	ID               mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	RiskAssessmentID mysql.ColumnString // (DC2Type:guid)
	MinuteType       mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type RiskAssessmentMeetingTypeTable struct {
	riskAssessmentMeetingTypeTable

	NEW riskAssessmentMeetingTypeTable
}

// AS creates new RiskAssessmentMeetingTypeTable with assigned alias
func (a RiskAssessmentMeetingTypeTable) AS(alias string) *RiskAssessmentMeetingTypeTable {
	return newRiskAssessmentMeetingTypeTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RiskAssessmentMeetingTypeTable with assigned schema name
func (a RiskAssessmentMeetingTypeTable) FromSchema(schemaName string) *RiskAssessmentMeetingTypeTable {
	return newRiskAssessmentMeetingTypeTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RiskAssessmentMeetingTypeTable with assigned table prefix
func (a RiskAssessmentMeetingTypeTable) WithPrefix(prefix string) *RiskAssessmentMeetingTypeTable {
	return newRiskAssessmentMeetingTypeTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RiskAssessmentMeetingTypeTable with assigned table suffix
func (a RiskAssessmentMeetingTypeTable) WithSuffix(suffix string) *RiskAssessmentMeetingTypeTable {
	return newRiskAssessmentMeetingTypeTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRiskAssessmentMeetingTypeTable(schemaName, tableName, alias string) *RiskAssessmentMeetingTypeTable {
	return &RiskAssessmentMeetingTypeTable{
		riskAssessmentMeetingTypeTable: newRiskAssessmentMeetingTypeTableImpl(schemaName, tableName, alias),
		NEW:                            newRiskAssessmentMeetingTypeTableImpl("", "new", ""),
	}
}

func newRiskAssessmentMeetingTypeTableImpl(schemaName, tableName, alias string) riskAssessmentMeetingTypeTable {
	var (
		IDColumn               = mysql.StringColumn("id")
		RiskAssessmentIDColumn = mysql.StringColumn("risk_assessment_id")
		MinuteTypeColumn       = mysql.StringColumn("minute_type")
		allColumns             = mysql.ColumnList{IDColumn, RiskAssessmentIDColumn, MinuteTypeColumn}
		mutableColumns         = mysql.ColumnList{RiskAssessmentIDColumn, MinuteTypeColumn}
	)

	return riskAssessmentMeetingTypeTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		RiskAssessmentID: RiskAssessmentIDColumn,
		MinuteType:       MinuteTypeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
