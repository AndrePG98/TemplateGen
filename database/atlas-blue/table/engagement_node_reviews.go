//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var EngagementNodeReviews = newEngagementNodeReviewsTable("atlas-blue", "engagement_node_reviews", "")

type engagementNodeReviewsTable struct {
	mysql.Table

	// Columns
	ID                         mysql.ColumnString    // @UUID("v4")(DC2Type:guid)
	EngagementMasterfileNodeID mysql.ColumnString    // (DC2Type:guid)
	ReviewedBy                 mysql.ColumnString    // (DC2Type:guid)
	ReversedBy                 mysql.ColumnString    // (DC2Type:guid)
	ReviewDate                 mysql.ColumnTimestamp // (DC2Type:datetime_immutable)
	Reversed                   mysql.ColumnBool
	ReversedDate               mysql.ColumnTimestamp // (DC2Type:datetime_immutable)
	ReviewedByEqcr             mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type EngagementNodeReviewsTable struct {
	engagementNodeReviewsTable

	NEW engagementNodeReviewsTable
}

// AS creates new EngagementNodeReviewsTable with assigned alias
func (a EngagementNodeReviewsTable) AS(alias string) *EngagementNodeReviewsTable {
	return newEngagementNodeReviewsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EngagementNodeReviewsTable with assigned schema name
func (a EngagementNodeReviewsTable) FromSchema(schemaName string) *EngagementNodeReviewsTable {
	return newEngagementNodeReviewsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EngagementNodeReviewsTable with assigned table prefix
func (a EngagementNodeReviewsTable) WithPrefix(prefix string) *EngagementNodeReviewsTable {
	return newEngagementNodeReviewsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EngagementNodeReviewsTable with assigned table suffix
func (a EngagementNodeReviewsTable) WithSuffix(suffix string) *EngagementNodeReviewsTable {
	return newEngagementNodeReviewsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEngagementNodeReviewsTable(schemaName, tableName, alias string) *EngagementNodeReviewsTable {
	return &EngagementNodeReviewsTable{
		engagementNodeReviewsTable: newEngagementNodeReviewsTableImpl(schemaName, tableName, alias),
		NEW:                        newEngagementNodeReviewsTableImpl("", "new", ""),
	}
}

func newEngagementNodeReviewsTableImpl(schemaName, tableName, alias string) engagementNodeReviewsTable {
	var (
		IDColumn                         = mysql.StringColumn("id")
		EngagementMasterfileNodeIDColumn = mysql.StringColumn("engagement_masterfile_node_id")
		ReviewedByColumn                 = mysql.StringColumn("reviewed_by")
		ReversedByColumn                 = mysql.StringColumn("reversed_by")
		ReviewDateColumn                 = mysql.TimestampColumn("review_date")
		ReversedColumn                   = mysql.BoolColumn("reversed")
		ReversedDateColumn               = mysql.TimestampColumn("reversed_date")
		ReviewedByEqcrColumn             = mysql.BoolColumn("reviewed_by_eqcr")
		allColumns                       = mysql.ColumnList{IDColumn, EngagementMasterfileNodeIDColumn, ReviewedByColumn, ReversedByColumn, ReviewDateColumn, ReversedColumn, ReversedDateColumn, ReviewedByEqcrColumn}
		mutableColumns                   = mysql.ColumnList{EngagementMasterfileNodeIDColumn, ReviewedByColumn, ReversedByColumn, ReviewDateColumn, ReversedColumn, ReversedDateColumn, ReviewedByEqcrColumn}
	)

	return engagementNodeReviewsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                         IDColumn,
		EngagementMasterfileNodeID: EngagementMasterfileNodeIDColumn,
		ReviewedBy:                 ReviewedByColumn,
		ReversedBy:                 ReversedByColumn,
		ReviewDate:                 ReviewDateColumn,
		Reversed:                   ReversedColumn,
		ReversedDate:               ReversedDateColumn,
		ReviewedByEqcr:             ReviewedByEqcrColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
