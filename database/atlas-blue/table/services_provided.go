//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ServicesProvided = newServicesProvidedTable("atlas-blue", "services_provided", "")

type servicesProvidedTable struct {
	mysql.Table

	// Columns
	Service       mysql.ColumnString
	EntityService mysql.ColumnString // (DC2Type:guid)
	Entity        mysql.ColumnString // (DC2Type:guid)

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ServicesProvidedTable struct {
	servicesProvidedTable

	NEW servicesProvidedTable
}

// AS creates new ServicesProvidedTable with assigned alias
func (a ServicesProvidedTable) AS(alias string) *ServicesProvidedTable {
	return newServicesProvidedTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ServicesProvidedTable with assigned schema name
func (a ServicesProvidedTable) FromSchema(schemaName string) *ServicesProvidedTable {
	return newServicesProvidedTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ServicesProvidedTable with assigned table prefix
func (a ServicesProvidedTable) WithPrefix(prefix string) *ServicesProvidedTable {
	return newServicesProvidedTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ServicesProvidedTable with assigned table suffix
func (a ServicesProvidedTable) WithSuffix(suffix string) *ServicesProvidedTable {
	return newServicesProvidedTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newServicesProvidedTable(schemaName, tableName, alias string) *ServicesProvidedTable {
	return &ServicesProvidedTable{
		servicesProvidedTable: newServicesProvidedTableImpl(schemaName, tableName, alias),
		NEW:                   newServicesProvidedTableImpl("", "new", ""),
	}
}

func newServicesProvidedTableImpl(schemaName, tableName, alias string) servicesProvidedTable {
	var (
		ServiceColumn       = mysql.StringColumn("service")
		EntityServiceColumn = mysql.StringColumn("entity_service")
		EntityColumn        = mysql.StringColumn("entity")
		allColumns          = mysql.ColumnList{ServiceColumn, EntityServiceColumn, EntityColumn}
		mutableColumns      = mysql.ColumnList{}
	)

	return servicesProvidedTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Service:       ServiceColumn,
		EntityService: EntityServiceColumn,
		Entity:        EntityColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
