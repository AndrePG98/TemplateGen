//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Lockdowns = newLockdownsTable("atlas-blue", "lockdowns", "")

type lockdownsTable struct {
	mysql.Table

	// Columns
	ID                    mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID          mysql.ColumnString // (DC2Type:guid)
	Status                mysql.ColumnString
	DocumentationComplete mysql.ColumnBool
	InitiateLockdown      mysql.ColumnBool
	ConfirmLockdown       mysql.ColumnBool
	CreatedAt             mysql.ColumnTimestamp // (DC2Type:datetime_immutable)

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type LockdownsTable struct {
	lockdownsTable

	NEW lockdownsTable
}

// AS creates new LockdownsTable with assigned alias
func (a LockdownsTable) AS(alias string) *LockdownsTable {
	return newLockdownsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LockdownsTable with assigned schema name
func (a LockdownsTable) FromSchema(schemaName string) *LockdownsTable {
	return newLockdownsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LockdownsTable with assigned table prefix
func (a LockdownsTable) WithPrefix(prefix string) *LockdownsTable {
	return newLockdownsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LockdownsTable with assigned table suffix
func (a LockdownsTable) WithSuffix(suffix string) *LockdownsTable {
	return newLockdownsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLockdownsTable(schemaName, tableName, alias string) *LockdownsTable {
	return &LockdownsTable{
		lockdownsTable: newLockdownsTableImpl(schemaName, tableName, alias),
		NEW:            newLockdownsTableImpl("", "new", ""),
	}
}

func newLockdownsTableImpl(schemaName, tableName, alias string) lockdownsTable {
	var (
		IDColumn                    = mysql.StringColumn("id")
		EngagementIDColumn          = mysql.StringColumn("engagement_id")
		StatusColumn                = mysql.StringColumn("status")
		DocumentationCompleteColumn = mysql.BoolColumn("documentation_complete")
		InitiateLockdownColumn      = mysql.BoolColumn("initiate_lockdown")
		ConfirmLockdownColumn       = mysql.BoolColumn("confirm_lockdown")
		CreatedAtColumn             = mysql.TimestampColumn("created_at")
		allColumns                  = mysql.ColumnList{IDColumn, EngagementIDColumn, StatusColumn, DocumentationCompleteColumn, InitiateLockdownColumn, ConfirmLockdownColumn, CreatedAtColumn}
		mutableColumns              = mysql.ColumnList{EngagementIDColumn, StatusColumn, DocumentationCompleteColumn, InitiateLockdownColumn, ConfirmLockdownColumn, CreatedAtColumn}
	)

	return lockdownsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                    IDColumn,
		EngagementID:          EngagementIDColumn,
		Status:                StatusColumn,
		DocumentationComplete: DocumentationCompleteColumn,
		InitiateLockdown:      InitiateLockdownColumn,
		ConfirmLockdown:       ConfirmLockdownColumn,
		CreatedAt:             CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
