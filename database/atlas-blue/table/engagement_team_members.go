//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var EngagementTeamMembers = newEngagementTeamMembersTable("atlas-blue", "engagement_team_members", "")

type engagementTeamMembersTable struct {
	mysql.Table

	// Columns
	ID                                 mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	MemberID                           mysql.ColumnString // (DC2Type:guid)
	RoleWithinTeam                     mysql.ColumnString
	IndustryKnowledgeAndLicenseDetails mysql.ColumnString
	YearAppointedToTeam                mysql.ColumnTimestamp // (DC2Type:datetime_immutable)
	Signatory                          mysql.ColumnBool
	AccessToFile                       mysql.ColumnBool
	CreatedAt                          mysql.ColumnTimestamp // (DC2Type:datetime_immutable)

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type EngagementTeamMembersTable struct {
	engagementTeamMembersTable

	NEW engagementTeamMembersTable
}

// AS creates new EngagementTeamMembersTable with assigned alias
func (a EngagementTeamMembersTable) AS(alias string) *EngagementTeamMembersTable {
	return newEngagementTeamMembersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EngagementTeamMembersTable with assigned schema name
func (a EngagementTeamMembersTable) FromSchema(schemaName string) *EngagementTeamMembersTable {
	return newEngagementTeamMembersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EngagementTeamMembersTable with assigned table prefix
func (a EngagementTeamMembersTable) WithPrefix(prefix string) *EngagementTeamMembersTable {
	return newEngagementTeamMembersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EngagementTeamMembersTable with assigned table suffix
func (a EngagementTeamMembersTable) WithSuffix(suffix string) *EngagementTeamMembersTable {
	return newEngagementTeamMembersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEngagementTeamMembersTable(schemaName, tableName, alias string) *EngagementTeamMembersTable {
	return &EngagementTeamMembersTable{
		engagementTeamMembersTable: newEngagementTeamMembersTableImpl(schemaName, tableName, alias),
		NEW:                        newEngagementTeamMembersTableImpl("", "new", ""),
	}
}

func newEngagementTeamMembersTableImpl(schemaName, tableName, alias string) engagementTeamMembersTable {
	var (
		IDColumn                                 = mysql.StringColumn("id")
		MemberIDColumn                           = mysql.StringColumn("member_id")
		RoleWithinTeamColumn                     = mysql.StringColumn("role_within_team")
		IndustryKnowledgeAndLicenseDetailsColumn = mysql.StringColumn("industry_knowledge_and_license_details")
		YearAppointedToTeamColumn                = mysql.TimestampColumn("year_appointed_to_team")
		SignatoryColumn                          = mysql.BoolColumn("signatory")
		AccessToFileColumn                       = mysql.BoolColumn("access_to_file")
		CreatedAtColumn                          = mysql.TimestampColumn("created_at")
		allColumns                               = mysql.ColumnList{IDColumn, MemberIDColumn, RoleWithinTeamColumn, IndustryKnowledgeAndLicenseDetailsColumn, YearAppointedToTeamColumn, SignatoryColumn, AccessToFileColumn, CreatedAtColumn}
		mutableColumns                           = mysql.ColumnList{MemberIDColumn, RoleWithinTeamColumn, IndustryKnowledgeAndLicenseDetailsColumn, YearAppointedToTeamColumn, SignatoryColumn, AccessToFileColumn, CreatedAtColumn}
	)

	return engagementTeamMembersTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                                 IDColumn,
		MemberID:                           MemberIDColumn,
		RoleWithinTeam:                     RoleWithinTeamColumn,
		IndustryKnowledgeAndLicenseDetails: IndustryKnowledgeAndLicenseDetailsColumn,
		YearAppointedToTeam:                YearAppointedToTeamColumn,
		Signatory:                          SignatoryColumn,
		AccessToFile:                       AccessToFileColumn,
		CreatedAt:                          CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
