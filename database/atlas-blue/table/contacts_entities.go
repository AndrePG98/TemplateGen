//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ContactsEntities = newContactsEntitiesTable("atlas-blue", "contacts_entities", "")

type contactsEntitiesTable struct {
	mysql.Table

	// Columns
	ContactID mysql.ColumnString // (DC2Type:guid)
	EntityID  mysql.ColumnString // (DC2Type:guid)

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ContactsEntitiesTable struct {
	contactsEntitiesTable

	NEW contactsEntitiesTable
}

// AS creates new ContactsEntitiesTable with assigned alias
func (a ContactsEntitiesTable) AS(alias string) *ContactsEntitiesTable {
	return newContactsEntitiesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ContactsEntitiesTable with assigned schema name
func (a ContactsEntitiesTable) FromSchema(schemaName string) *ContactsEntitiesTable {
	return newContactsEntitiesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ContactsEntitiesTable with assigned table prefix
func (a ContactsEntitiesTable) WithPrefix(prefix string) *ContactsEntitiesTable {
	return newContactsEntitiesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ContactsEntitiesTable with assigned table suffix
func (a ContactsEntitiesTable) WithSuffix(suffix string) *ContactsEntitiesTable {
	return newContactsEntitiesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newContactsEntitiesTable(schemaName, tableName, alias string) *ContactsEntitiesTable {
	return &ContactsEntitiesTable{
		contactsEntitiesTable: newContactsEntitiesTableImpl(schemaName, tableName, alias),
		NEW:                   newContactsEntitiesTableImpl("", "new", ""),
	}
}

func newContactsEntitiesTableImpl(schemaName, tableName, alias string) contactsEntitiesTable {
	var (
		ContactIDColumn = mysql.StringColumn("contact_id")
		EntityIDColumn  = mysql.StringColumn("entity_id")
		allColumns      = mysql.ColumnList{ContactIDColumn, EntityIDColumn}
		mutableColumns  = mysql.ColumnList{}
	)

	return contactsEntitiesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ContactID: ContactIDColumn,
		EntityID:  EntityIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
