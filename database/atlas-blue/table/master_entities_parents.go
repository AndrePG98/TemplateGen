//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var MasterEntitiesParents = newMasterEntitiesParentsTable("atlas-blue", "master_entities_parents", "")

type masterEntitiesParentsTable struct {
	mysql.Table

	// Columns
	ID                      mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EntityID                mysql.ColumnString // (DC2Type:guid)
	ParentEntityID          mysql.ColumnString // (DC2Type:guid)
	ShareholdingPercentage  mysql.ColumnInteger
	IsRelevantConsolidating mysql.ColumnBool
	IsUltimateParent        mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type MasterEntitiesParentsTable struct {
	masterEntitiesParentsTable

	NEW masterEntitiesParentsTable
}

// AS creates new MasterEntitiesParentsTable with assigned alias
func (a MasterEntitiesParentsTable) AS(alias string) *MasterEntitiesParentsTable {
	return newMasterEntitiesParentsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MasterEntitiesParentsTable with assigned schema name
func (a MasterEntitiesParentsTable) FromSchema(schemaName string) *MasterEntitiesParentsTable {
	return newMasterEntitiesParentsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MasterEntitiesParentsTable with assigned table prefix
func (a MasterEntitiesParentsTable) WithPrefix(prefix string) *MasterEntitiesParentsTable {
	return newMasterEntitiesParentsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MasterEntitiesParentsTable with assigned table suffix
func (a MasterEntitiesParentsTable) WithSuffix(suffix string) *MasterEntitiesParentsTable {
	return newMasterEntitiesParentsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMasterEntitiesParentsTable(schemaName, tableName, alias string) *MasterEntitiesParentsTable {
	return &MasterEntitiesParentsTable{
		masterEntitiesParentsTable: newMasterEntitiesParentsTableImpl(schemaName, tableName, alias),
		NEW:                        newMasterEntitiesParentsTableImpl("", "new", ""),
	}
}

func newMasterEntitiesParentsTableImpl(schemaName, tableName, alias string) masterEntitiesParentsTable {
	var (
		IDColumn                      = mysql.StringColumn("id")
		EntityIDColumn                = mysql.StringColumn("entity_id")
		ParentEntityIDColumn          = mysql.StringColumn("parent_entity_id")
		ShareholdingPercentageColumn  = mysql.IntegerColumn("shareholding_percentage")
		IsRelevantConsolidatingColumn = mysql.BoolColumn("is_relevant_consolidating")
		IsUltimateParentColumn        = mysql.BoolColumn("is_ultimate_parent")
		allColumns                    = mysql.ColumnList{IDColumn, EntityIDColumn, ParentEntityIDColumn, ShareholdingPercentageColumn, IsRelevantConsolidatingColumn, IsUltimateParentColumn}
		mutableColumns                = mysql.ColumnList{EntityIDColumn, ParentEntityIDColumn, ShareholdingPercentageColumn, IsRelevantConsolidatingColumn, IsUltimateParentColumn}
	)

	return masterEntitiesParentsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                      IDColumn,
		EntityID:                EntityIDColumn,
		ParentEntityID:          ParentEntityIDColumn,
		ShareholdingPercentage:  ShareholdingPercentageColumn,
		IsRelevantConsolidating: IsRelevantConsolidatingColumn,
		IsUltimateParent:        IsUltimateParentColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
