//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var DmsFilesMock = newDmsFilesMockTable("atlas-blue", "dms_files_mock", "")

type dmsFilesMockTable struct {
	mysql.Table

	// Columns
	UUID         mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID mysql.ColumnString
	NodeID       mysql.ColumnString
	Name         mysql.ColumnString
	UploadedBy   mysql.ColumnString
	UploadedOn   mysql.ColumnString
	Status       mysql.ColumnString
	ReviewedBy   mysql.ColumnString
	ReviewedOn   mysql.ColumnString
	ModifyBy     mysql.ColumnString
	ModifyOn     mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type DmsFilesMockTable struct {
	dmsFilesMockTable

	NEW dmsFilesMockTable
}

// AS creates new DmsFilesMockTable with assigned alias
func (a DmsFilesMockTable) AS(alias string) *DmsFilesMockTable {
	return newDmsFilesMockTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DmsFilesMockTable with assigned schema name
func (a DmsFilesMockTable) FromSchema(schemaName string) *DmsFilesMockTable {
	return newDmsFilesMockTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DmsFilesMockTable with assigned table prefix
func (a DmsFilesMockTable) WithPrefix(prefix string) *DmsFilesMockTable {
	return newDmsFilesMockTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DmsFilesMockTable with assigned table suffix
func (a DmsFilesMockTable) WithSuffix(suffix string) *DmsFilesMockTable {
	return newDmsFilesMockTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDmsFilesMockTable(schemaName, tableName, alias string) *DmsFilesMockTable {
	return &DmsFilesMockTable{
		dmsFilesMockTable: newDmsFilesMockTableImpl(schemaName, tableName, alias),
		NEW:               newDmsFilesMockTableImpl("", "new", ""),
	}
}

func newDmsFilesMockTableImpl(schemaName, tableName, alias string) dmsFilesMockTable {
	var (
		UUIDColumn         = mysql.StringColumn("uuid")
		EngagementIDColumn = mysql.StringColumn("engagement_id")
		NodeIDColumn       = mysql.StringColumn("node_id")
		NameColumn         = mysql.StringColumn("name")
		UploadedByColumn   = mysql.StringColumn("uploaded_by")
		UploadedOnColumn   = mysql.StringColumn("uploaded_on")
		StatusColumn       = mysql.StringColumn("status")
		ReviewedByColumn   = mysql.StringColumn("reviewed_by")
		ReviewedOnColumn   = mysql.StringColumn("reviewed_on")
		ModifyByColumn     = mysql.StringColumn("modify_by")
		ModifyOnColumn     = mysql.StringColumn("modify_on")
		allColumns         = mysql.ColumnList{UUIDColumn, EngagementIDColumn, NodeIDColumn, NameColumn, UploadedByColumn, UploadedOnColumn, StatusColumn, ReviewedByColumn, ReviewedOnColumn, ModifyByColumn, ModifyOnColumn}
		mutableColumns     = mysql.ColumnList{EngagementIDColumn, NodeIDColumn, NameColumn, UploadedByColumn, UploadedOnColumn, StatusColumn, ReviewedByColumn, ReviewedOnColumn, ModifyByColumn, ModifyOnColumn}
	)

	return dmsFilesMockTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UUID:         UUIDColumn,
		EngagementID: EngagementIDColumn,
		NodeID:       NodeIDColumn,
		Name:         NameColumn,
		UploadedBy:   UploadedByColumn,
		UploadedOn:   UploadedOnColumn,
		Status:       StatusColumn,
		ReviewedBy:   ReviewedByColumn,
		ReviewedOn:   ReviewedOnColumn,
		ModifyBy:     ModifyByColumn,
		ModifyOn:     ModifyOnColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
