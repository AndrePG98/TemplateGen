//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FinancialStatementMaterialityFactors = newFinancialStatementMaterialityFactorsTable("atlas-blue", "financial_statement_materiality_factors", "")

type financialStatementMaterialityFactorsTable struct {
	mysql.Table

	// Columns
	ID                        mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	PlanningMaterialityID     mysql.ColumnString // (DC2Type:guid)
	RevisedMaterialityID      mysql.ColumnString // (DC2Type:guid)
	ConsiderationFactorsLovID mysql.ColumnString
	OtherConsiderationsFactor mysql.ColumnString
	Answer                    mysql.ColumnString
	ImpactPercentage          mysql.ColumnString
	State                     mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type FinancialStatementMaterialityFactorsTable struct {
	financialStatementMaterialityFactorsTable

	NEW financialStatementMaterialityFactorsTable
}

// AS creates new FinancialStatementMaterialityFactorsTable with assigned alias
func (a FinancialStatementMaterialityFactorsTable) AS(alias string) *FinancialStatementMaterialityFactorsTable {
	return newFinancialStatementMaterialityFactorsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FinancialStatementMaterialityFactorsTable with assigned schema name
func (a FinancialStatementMaterialityFactorsTable) FromSchema(schemaName string) *FinancialStatementMaterialityFactorsTable {
	return newFinancialStatementMaterialityFactorsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FinancialStatementMaterialityFactorsTable with assigned table prefix
func (a FinancialStatementMaterialityFactorsTable) WithPrefix(prefix string) *FinancialStatementMaterialityFactorsTable {
	return newFinancialStatementMaterialityFactorsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FinancialStatementMaterialityFactorsTable with assigned table suffix
func (a FinancialStatementMaterialityFactorsTable) WithSuffix(suffix string) *FinancialStatementMaterialityFactorsTable {
	return newFinancialStatementMaterialityFactorsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFinancialStatementMaterialityFactorsTable(schemaName, tableName, alias string) *FinancialStatementMaterialityFactorsTable {
	return &FinancialStatementMaterialityFactorsTable{
		financialStatementMaterialityFactorsTable: newFinancialStatementMaterialityFactorsTableImpl(schemaName, tableName, alias),
		NEW: newFinancialStatementMaterialityFactorsTableImpl("", "new", ""),
	}
}

func newFinancialStatementMaterialityFactorsTableImpl(schemaName, tableName, alias string) financialStatementMaterialityFactorsTable {
	var (
		IDColumn                        = mysql.StringColumn("id")
		PlanningMaterialityIDColumn     = mysql.StringColumn("planning_materiality_id")
		RevisedMaterialityIDColumn      = mysql.StringColumn("revised_materiality_id")
		ConsiderationFactorsLovIDColumn = mysql.StringColumn("consideration_factors_lov_id")
		OtherConsiderationsFactorColumn = mysql.StringColumn("other_considerations_factor")
		AnswerColumn                    = mysql.StringColumn("answer")
		ImpactPercentageColumn          = mysql.StringColumn("impact_percentage")
		StateColumn                     = mysql.StringColumn("state")
		allColumns                      = mysql.ColumnList{IDColumn, PlanningMaterialityIDColumn, RevisedMaterialityIDColumn, ConsiderationFactorsLovIDColumn, OtherConsiderationsFactorColumn, AnswerColumn, ImpactPercentageColumn, StateColumn}
		mutableColumns                  = mysql.ColumnList{PlanningMaterialityIDColumn, RevisedMaterialityIDColumn, ConsiderationFactorsLovIDColumn, OtherConsiderationsFactorColumn, AnswerColumn, ImpactPercentageColumn, StateColumn}
	)

	return financialStatementMaterialityFactorsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                        IDColumn,
		PlanningMaterialityID:     PlanningMaterialityIDColumn,
		RevisedMaterialityID:      RevisedMaterialityIDColumn,
		ConsiderationFactorsLovID: ConsiderationFactorsLovIDColumn,
		OtherConsiderationsFactor: OtherConsiderationsFactorColumn,
		Answer:                    AnswerColumn,
		ImpactPercentage:          ImpactPercentageColumn,
		State:                     StateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
