//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var WorkProgrammes = newWorkProgrammesTable("atlas-blue", "work_programmes", "")

type workProgrammesTable struct {
	mysql.Table

	// Columns
	ID                   mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID         mysql.ColumnString // (DC2Type:guid)
	AreaType             mysql.ColumnString
	AreaItemID           mysql.ColumnString
	OverallConclusion    mysql.ColumnString
	CommentsOnConclusion mysql.ColumnString
	ImpactOnAuditOpinion mysql.ColumnString
	IsDeleted            mysql.ColumnBool
	CreatedAt            mysql.ColumnDate // (DC2Type:date_immutable)

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type WorkProgrammesTable struct {
	workProgrammesTable

	NEW workProgrammesTable
}

// AS creates new WorkProgrammesTable with assigned alias
func (a WorkProgrammesTable) AS(alias string) *WorkProgrammesTable {
	return newWorkProgrammesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WorkProgrammesTable with assigned schema name
func (a WorkProgrammesTable) FromSchema(schemaName string) *WorkProgrammesTable {
	return newWorkProgrammesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WorkProgrammesTable with assigned table prefix
func (a WorkProgrammesTable) WithPrefix(prefix string) *WorkProgrammesTable {
	return newWorkProgrammesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WorkProgrammesTable with assigned table suffix
func (a WorkProgrammesTable) WithSuffix(suffix string) *WorkProgrammesTable {
	return newWorkProgrammesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWorkProgrammesTable(schemaName, tableName, alias string) *WorkProgrammesTable {
	return &WorkProgrammesTable{
		workProgrammesTable: newWorkProgrammesTableImpl(schemaName, tableName, alias),
		NEW:                 newWorkProgrammesTableImpl("", "new", ""),
	}
}

func newWorkProgrammesTableImpl(schemaName, tableName, alias string) workProgrammesTable {
	var (
		IDColumn                   = mysql.StringColumn("id")
		EngagementIDColumn         = mysql.StringColumn("engagement_id")
		AreaTypeColumn             = mysql.StringColumn("area_type")
		AreaItemIDColumn           = mysql.StringColumn("area_item_id")
		OverallConclusionColumn    = mysql.StringColumn("overall_conclusion")
		CommentsOnConclusionColumn = mysql.StringColumn("comments_on_conclusion")
		ImpactOnAuditOpinionColumn = mysql.StringColumn("impact_on_audit_opinion")
		IsDeletedColumn            = mysql.BoolColumn("is_deleted")
		CreatedAtColumn            = mysql.DateColumn("created_at")
		allColumns                 = mysql.ColumnList{IDColumn, EngagementIDColumn, AreaTypeColumn, AreaItemIDColumn, OverallConclusionColumn, CommentsOnConclusionColumn, ImpactOnAuditOpinionColumn, IsDeletedColumn, CreatedAtColumn}
		mutableColumns             = mysql.ColumnList{EngagementIDColumn, AreaTypeColumn, AreaItemIDColumn, OverallConclusionColumn, CommentsOnConclusionColumn, ImpactOnAuditOpinionColumn, IsDeletedColumn, CreatedAtColumn}
	)

	return workProgrammesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                   IDColumn,
		EngagementID:         EngagementIDColumn,
		AreaType:             AreaTypeColumn,
		AreaItemID:           AreaItemIDColumn,
		OverallConclusion:    OverallConclusionColumn,
		CommentsOnConclusion: CommentsOnConclusionColumn,
		ImpactOnAuditOpinion: ImpactOnAuditOpinionColumn,
		IsDeleted:            IsDeletedColumn,
		CreatedAt:            CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
