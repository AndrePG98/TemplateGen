//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ReviewNotes = newReviewNotesTable("atlas-blue", "review_notes", "")

type reviewNotesTable struct {
	mysql.Table

	// Columns
	ID                mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	OpenedBy          mysql.ColumnString // (DC2Type:guid)
	ClearedBy         mysql.ColumnString // (DC2Type:guid)
	ForAttentionOf    mysql.ColumnString
	Details           mysql.ColumnString
	ClearingComments  mysql.ColumnString
	ReopeningComments mysql.ColumnString
	OpenedOn          mysql.ColumnTimestamp // (DC2Type:datetime_immutable)
	ClearedOn         mysql.ColumnTimestamp // (DC2Type:datetime_immutable)
	DocumentID        mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ReviewNotesTable struct {
	reviewNotesTable

	NEW reviewNotesTable
}

// AS creates new ReviewNotesTable with assigned alias
func (a ReviewNotesTable) AS(alias string) *ReviewNotesTable {
	return newReviewNotesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ReviewNotesTable with assigned schema name
func (a ReviewNotesTable) FromSchema(schemaName string) *ReviewNotesTable {
	return newReviewNotesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ReviewNotesTable with assigned table prefix
func (a ReviewNotesTable) WithPrefix(prefix string) *ReviewNotesTable {
	return newReviewNotesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ReviewNotesTable with assigned table suffix
func (a ReviewNotesTable) WithSuffix(suffix string) *ReviewNotesTable {
	return newReviewNotesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newReviewNotesTable(schemaName, tableName, alias string) *ReviewNotesTable {
	return &ReviewNotesTable{
		reviewNotesTable: newReviewNotesTableImpl(schemaName, tableName, alias),
		NEW:              newReviewNotesTableImpl("", "new", ""),
	}
}

func newReviewNotesTableImpl(schemaName, tableName, alias string) reviewNotesTable {
	var (
		IDColumn                = mysql.StringColumn("id")
		OpenedByColumn          = mysql.StringColumn("opened_by")
		ClearedByColumn         = mysql.StringColumn("cleared_by")
		ForAttentionOfColumn    = mysql.StringColumn("for_attention_of")
		DetailsColumn           = mysql.StringColumn("details")
		ClearingCommentsColumn  = mysql.StringColumn("clearing_comments")
		ReopeningCommentsColumn = mysql.StringColumn("reopening_comments")
		OpenedOnColumn          = mysql.TimestampColumn("opened_on")
		ClearedOnColumn         = mysql.TimestampColumn("cleared_on")
		DocumentIDColumn        = mysql.StringColumn("document_id")
		allColumns              = mysql.ColumnList{IDColumn, OpenedByColumn, ClearedByColumn, ForAttentionOfColumn, DetailsColumn, ClearingCommentsColumn, ReopeningCommentsColumn, OpenedOnColumn, ClearedOnColumn, DocumentIDColumn}
		mutableColumns          = mysql.ColumnList{OpenedByColumn, ClearedByColumn, ForAttentionOfColumn, DetailsColumn, ClearingCommentsColumn, ReopeningCommentsColumn, OpenedOnColumn, ClearedOnColumn, DocumentIDColumn}
	)

	return reviewNotesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		OpenedBy:          OpenedByColumn,
		ClearedBy:         ClearedByColumn,
		ForAttentionOf:    ForAttentionOfColumn,
		Details:           DetailsColumn,
		ClearingComments:  ClearingCommentsColumn,
		ReopeningComments: ReopeningCommentsColumn,
		OpenedOn:          OpenedOnColumn,
		ClearedOn:         ClearedOnColumn,
		DocumentID:        DocumentIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
