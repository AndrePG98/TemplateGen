//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ControlActivitiesAndWorkPrograms = newControlActivitiesAndWorkProgramsTable("atlas-blue", "control_activities_and_work_programs", "")

type controlActivitiesAndWorkProgramsTable struct {
	mysql.Table

	// Columns
	ID                                         mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID                               mysql.ColumnString // (DC2Type:guid)
	CreatedBy                                  mysql.ColumnString // (DC2Type:guid)
	HasManagementImplementedControlActivities  mysql.ColumnBool
	DoYouIntendOnInternalControls              mysql.ColumnBool
	WillSubstantiveProceduresAloneBeSufficient mysql.ColumnBool
	Status                                     mysql.ColumnString
	IsAtLeastOneControlEvaluatedToDi           mysql.ColumnBool
	IsAtLeastOneControlEvaluatedToOe           mysql.ColumnBool
	AsoCr                                      mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ControlActivitiesAndWorkProgramsTable struct {
	controlActivitiesAndWorkProgramsTable

	NEW controlActivitiesAndWorkProgramsTable
}

// AS creates new ControlActivitiesAndWorkProgramsTable with assigned alias
func (a ControlActivitiesAndWorkProgramsTable) AS(alias string) *ControlActivitiesAndWorkProgramsTable {
	return newControlActivitiesAndWorkProgramsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ControlActivitiesAndWorkProgramsTable with assigned schema name
func (a ControlActivitiesAndWorkProgramsTable) FromSchema(schemaName string) *ControlActivitiesAndWorkProgramsTable {
	return newControlActivitiesAndWorkProgramsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ControlActivitiesAndWorkProgramsTable with assigned table prefix
func (a ControlActivitiesAndWorkProgramsTable) WithPrefix(prefix string) *ControlActivitiesAndWorkProgramsTable {
	return newControlActivitiesAndWorkProgramsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ControlActivitiesAndWorkProgramsTable with assigned table suffix
func (a ControlActivitiesAndWorkProgramsTable) WithSuffix(suffix string) *ControlActivitiesAndWorkProgramsTable {
	return newControlActivitiesAndWorkProgramsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newControlActivitiesAndWorkProgramsTable(schemaName, tableName, alias string) *ControlActivitiesAndWorkProgramsTable {
	return &ControlActivitiesAndWorkProgramsTable{
		controlActivitiesAndWorkProgramsTable: newControlActivitiesAndWorkProgramsTableImpl(schemaName, tableName, alias),
		NEW:                                   newControlActivitiesAndWorkProgramsTableImpl("", "new", ""),
	}
}

func newControlActivitiesAndWorkProgramsTableImpl(schemaName, tableName, alias string) controlActivitiesAndWorkProgramsTable {
	var (
		IDColumn                                         = mysql.StringColumn("id")
		EngagementIDColumn                               = mysql.StringColumn("engagement_id")
		CreatedByColumn                                  = mysql.StringColumn("created_by")
		HasManagementImplementedControlActivitiesColumn  = mysql.BoolColumn("has_management_implemented_control_activities")
		DoYouIntendOnInternalControlsColumn              = mysql.BoolColumn("do_you_intend_on_internal_controls")
		WillSubstantiveProceduresAloneBeSufficientColumn = mysql.BoolColumn("will_substantive_procedures_alone_be_sufficient")
		StatusColumn                                     = mysql.StringColumn("status")
		IsAtLeastOneControlEvaluatedToDiColumn           = mysql.BoolColumn("is_at_least_one_control_evaluated_to_di")
		IsAtLeastOneControlEvaluatedToOeColumn           = mysql.BoolColumn("is_at_least_one_control_evaluated_to_oe")
		AsoCrColumn                                      = mysql.StringColumn("aso_cr")
		allColumns                                       = mysql.ColumnList{IDColumn, EngagementIDColumn, CreatedByColumn, HasManagementImplementedControlActivitiesColumn, DoYouIntendOnInternalControlsColumn, WillSubstantiveProceduresAloneBeSufficientColumn, StatusColumn, IsAtLeastOneControlEvaluatedToDiColumn, IsAtLeastOneControlEvaluatedToOeColumn, AsoCrColumn}
		mutableColumns                                   = mysql.ColumnList{EngagementIDColumn, CreatedByColumn, HasManagementImplementedControlActivitiesColumn, DoYouIntendOnInternalControlsColumn, WillSubstantiveProceduresAloneBeSufficientColumn, StatusColumn, IsAtLeastOneControlEvaluatedToDiColumn, IsAtLeastOneControlEvaluatedToOeColumn, AsoCrColumn}
	)

	return controlActivitiesAndWorkProgramsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		EngagementID: EngagementIDColumn,
		CreatedBy:    CreatedByColumn,
		HasManagementImplementedControlActivities:  HasManagementImplementedControlActivitiesColumn,
		DoYouIntendOnInternalControls:              DoYouIntendOnInternalControlsColumn,
		WillSubstantiveProceduresAloneBeSufficient: WillSubstantiveProceduresAloneBeSufficientColumn,
		Status:                           StatusColumn,
		IsAtLeastOneControlEvaluatedToDi: IsAtLeastOneControlEvaluatedToDiColumn,
		IsAtLeastOneControlEvaluatedToOe: IsAtLeastOneControlEvaluatedToOeColumn,
		AsoCr:                            AsoCrColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
