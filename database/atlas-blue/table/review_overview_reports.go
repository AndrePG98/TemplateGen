//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ReviewOverviewReports = newReviewOverviewReportsTable("atlas-blue", "review_overview_reports", "")

type reviewOverviewReportsTable struct {
	mysql.Table

	// Columns
	ID                   mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	SubmittedBy          mysql.ColumnString // (DC2Type:guid)
	LastReviewedBy       mysql.ColumnString // (DC2Type:guid)
	Eqcr                 mysql.ColumnString // (DC2Type:guid)
	Engagement           mysql.ColumnString // (DC2Type:guid)
	AreaName             mysql.ColumnString
	SectionName          mysql.ColumnString
	CompletedOnDate      mysql.ColumnTimestamp // (DC2Type:datetime_immutable)
	TypeOfNotesRaised    mysql.ColumnString    // (DC2Type:array)
	IsMisstatementRaised mysql.ColumnBool
	Warnings             mysql.ColumnString
	LastReviewDate       mysql.ColumnTimestamp // (DC2Type:datetime_immutable)
	EqcrReviewDate       mysql.ColumnTimestamp // (DC2Type:datetime_immutable)
	NodeID               mysql.ColumnString
	NumberOfNotes        mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ReviewOverviewReportsTable struct {
	reviewOverviewReportsTable

	NEW reviewOverviewReportsTable
}

// AS creates new ReviewOverviewReportsTable with assigned alias
func (a ReviewOverviewReportsTable) AS(alias string) *ReviewOverviewReportsTable {
	return newReviewOverviewReportsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ReviewOverviewReportsTable with assigned schema name
func (a ReviewOverviewReportsTable) FromSchema(schemaName string) *ReviewOverviewReportsTable {
	return newReviewOverviewReportsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ReviewOverviewReportsTable with assigned table prefix
func (a ReviewOverviewReportsTable) WithPrefix(prefix string) *ReviewOverviewReportsTable {
	return newReviewOverviewReportsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ReviewOverviewReportsTable with assigned table suffix
func (a ReviewOverviewReportsTable) WithSuffix(suffix string) *ReviewOverviewReportsTable {
	return newReviewOverviewReportsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newReviewOverviewReportsTable(schemaName, tableName, alias string) *ReviewOverviewReportsTable {
	return &ReviewOverviewReportsTable{
		reviewOverviewReportsTable: newReviewOverviewReportsTableImpl(schemaName, tableName, alias),
		NEW:                        newReviewOverviewReportsTableImpl("", "new", ""),
	}
}

func newReviewOverviewReportsTableImpl(schemaName, tableName, alias string) reviewOverviewReportsTable {
	var (
		IDColumn                   = mysql.StringColumn("id")
		SubmittedByColumn          = mysql.StringColumn("submitted_by")
		LastReviewedByColumn       = mysql.StringColumn("last_reviewed_by")
		EqcrColumn                 = mysql.StringColumn("eqcr")
		EngagementColumn           = mysql.StringColumn("engagement")
		AreaNameColumn             = mysql.StringColumn("area_name")
		SectionNameColumn          = mysql.StringColumn("section_name")
		CompletedOnDateColumn      = mysql.TimestampColumn("completed_on_date")
		TypeOfNotesRaisedColumn    = mysql.StringColumn("type_of_notes_raised")
		IsMisstatementRaisedColumn = mysql.BoolColumn("is_misstatement_raised")
		WarningsColumn             = mysql.StringColumn("warnings")
		LastReviewDateColumn       = mysql.TimestampColumn("last_review_date")
		EqcrReviewDateColumn       = mysql.TimestampColumn("eqcr_review_date")
		NodeIDColumn               = mysql.StringColumn("node_id")
		NumberOfNotesColumn        = mysql.IntegerColumn("number_of_notes")
		allColumns                 = mysql.ColumnList{IDColumn, SubmittedByColumn, LastReviewedByColumn, EqcrColumn, EngagementColumn, AreaNameColumn, SectionNameColumn, CompletedOnDateColumn, TypeOfNotesRaisedColumn, IsMisstatementRaisedColumn, WarningsColumn, LastReviewDateColumn, EqcrReviewDateColumn, NodeIDColumn, NumberOfNotesColumn}
		mutableColumns             = mysql.ColumnList{SubmittedByColumn, LastReviewedByColumn, EqcrColumn, EngagementColumn, AreaNameColumn, SectionNameColumn, CompletedOnDateColumn, TypeOfNotesRaisedColumn, IsMisstatementRaisedColumn, WarningsColumn, LastReviewDateColumn, EqcrReviewDateColumn, NodeIDColumn, NumberOfNotesColumn}
	)

	return reviewOverviewReportsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                   IDColumn,
		SubmittedBy:          SubmittedByColumn,
		LastReviewedBy:       LastReviewedByColumn,
		Eqcr:                 EqcrColumn,
		Engagement:           EngagementColumn,
		AreaName:             AreaNameColumn,
		SectionName:          SectionNameColumn,
		CompletedOnDate:      CompletedOnDateColumn,
		TypeOfNotesRaised:    TypeOfNotesRaisedColumn,
		IsMisstatementRaised: IsMisstatementRaisedColumn,
		Warnings:             WarningsColumn,
		LastReviewDate:       LastReviewDateColumn,
		EqcrReviewDate:       EqcrReviewDateColumn,
		NodeID:               NodeIDColumn,
		NumberOfNotes:        NumberOfNotesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
