//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var EngagementRiskAssessment = newEngagementRiskAssessmentTable("atlas-blue", "engagement_risk_assessment", "")

type engagementRiskAssessmentTable struct {
	mysql.Table

	// Columns
	ID                                        mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID                              mysql.ColumnString // (DC2Type:guid)
	BusinessRisksRelevantToFinancialReporting mysql.ColumnString
	SignificanceOfThoseRisks                  mysql.ColumnString
	AddressingThoseRisks                      mysql.ColumnString
	HasClientIdentifiedBusinessRisks          mysql.ColumnBool
	IsValid                                   mysql.ColumnBool
	EvaluateWhetherIsAppropriate              mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type EngagementRiskAssessmentTable struct {
	engagementRiskAssessmentTable

	NEW engagementRiskAssessmentTable
}

// AS creates new EngagementRiskAssessmentTable with assigned alias
func (a EngagementRiskAssessmentTable) AS(alias string) *EngagementRiskAssessmentTable {
	return newEngagementRiskAssessmentTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EngagementRiskAssessmentTable with assigned schema name
func (a EngagementRiskAssessmentTable) FromSchema(schemaName string) *EngagementRiskAssessmentTable {
	return newEngagementRiskAssessmentTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EngagementRiskAssessmentTable with assigned table prefix
func (a EngagementRiskAssessmentTable) WithPrefix(prefix string) *EngagementRiskAssessmentTable {
	return newEngagementRiskAssessmentTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EngagementRiskAssessmentTable with assigned table suffix
func (a EngagementRiskAssessmentTable) WithSuffix(suffix string) *EngagementRiskAssessmentTable {
	return newEngagementRiskAssessmentTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEngagementRiskAssessmentTable(schemaName, tableName, alias string) *EngagementRiskAssessmentTable {
	return &EngagementRiskAssessmentTable{
		engagementRiskAssessmentTable: newEngagementRiskAssessmentTableImpl(schemaName, tableName, alias),
		NEW:                           newEngagementRiskAssessmentTableImpl("", "new", ""),
	}
}

func newEngagementRiskAssessmentTableImpl(schemaName, tableName, alias string) engagementRiskAssessmentTable {
	var (
		IDColumn                                        = mysql.StringColumn("id")
		EngagementIDColumn                              = mysql.StringColumn("engagement_id")
		BusinessRisksRelevantToFinancialReportingColumn = mysql.StringColumn("business_risks_relevant_to_financial_reporting")
		SignificanceOfThoseRisksColumn                  = mysql.StringColumn("significance_of_those_risks")
		AddressingThoseRisksColumn                      = mysql.StringColumn("addressing_those_risks")
		HasClientIdentifiedBusinessRisksColumn          = mysql.BoolColumn("has_client_identified_business_risks")
		IsValidColumn                                   = mysql.BoolColumn("is_valid")
		EvaluateWhetherIsAppropriateColumn              = mysql.StringColumn("evaluate_whether_is_appropriate")
		allColumns                                      = mysql.ColumnList{IDColumn, EngagementIDColumn, BusinessRisksRelevantToFinancialReportingColumn, SignificanceOfThoseRisksColumn, AddressingThoseRisksColumn, HasClientIdentifiedBusinessRisksColumn, IsValidColumn, EvaluateWhetherIsAppropriateColumn}
		mutableColumns                                  = mysql.ColumnList{EngagementIDColumn, BusinessRisksRelevantToFinancialReportingColumn, SignificanceOfThoseRisksColumn, AddressingThoseRisksColumn, HasClientIdentifiedBusinessRisksColumn, IsValidColumn, EvaluateWhetherIsAppropriateColumn}
	)

	return engagementRiskAssessmentTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		EngagementID: EngagementIDColumn,
		BusinessRisksRelevantToFinancialReporting: BusinessRisksRelevantToFinancialReportingColumn,
		SignificanceOfThoseRisks:                  SignificanceOfThoseRisksColumn,
		AddressingThoseRisks:                      AddressingThoseRisksColumn,
		HasClientIdentifiedBusinessRisks:          HasClientIdentifiedBusinessRisksColumn,
		IsValid:                                   IsValidColumn,
		EvaluateWhetherIsAppropriate:              EvaluateWhetherIsAppropriateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
