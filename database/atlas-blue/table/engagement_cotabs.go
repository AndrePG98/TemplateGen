//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var EngagementCotabs = newEngagementCotabsTable("atlas-blue", "engagement_cotabs", "")

type engagementCotabsTable struct {
	mysql.Table

	// Columns
	ID                                       mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID                             mysql.ColumnString // (DC2Type:guid)
	Name                                     mysql.ColumnString
	SourceID                                 mysql.ColumnString
	Group                                    mysql.ColumnString
	Material                                 mysql.ColumnString
	Comment                                  mysql.ColumnString
	IsMaterialByDefault                      mysql.ColumnBool
	IsMaterialByPm                           mysql.ColumnBool
	IsMaterialManually                       mysql.ColumnBool
	ProceduresProvideSufficientAuditEvidence mysql.ColumnBool
	RmmComment                               mysql.ColumnString
	Label                                    mysql.ColumnString // (DC2Type:json)
	DateLastLabelModified                    mysql.ColumnString // (DC2Type:json)

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type EngagementCotabsTable struct {
	engagementCotabsTable

	NEW engagementCotabsTable
}

// AS creates new EngagementCotabsTable with assigned alias
func (a EngagementCotabsTable) AS(alias string) *EngagementCotabsTable {
	return newEngagementCotabsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EngagementCotabsTable with assigned schema name
func (a EngagementCotabsTable) FromSchema(schemaName string) *EngagementCotabsTable {
	return newEngagementCotabsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EngagementCotabsTable with assigned table prefix
func (a EngagementCotabsTable) WithPrefix(prefix string) *EngagementCotabsTable {
	return newEngagementCotabsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EngagementCotabsTable with assigned table suffix
func (a EngagementCotabsTable) WithSuffix(suffix string) *EngagementCotabsTable {
	return newEngagementCotabsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEngagementCotabsTable(schemaName, tableName, alias string) *EngagementCotabsTable {
	return &EngagementCotabsTable{
		engagementCotabsTable: newEngagementCotabsTableImpl(schemaName, tableName, alias),
		NEW:                   newEngagementCotabsTableImpl("", "new", ""),
	}
}

func newEngagementCotabsTableImpl(schemaName, tableName, alias string) engagementCotabsTable {
	var (
		IDColumn                                       = mysql.StringColumn("id")
		EngagementIDColumn                             = mysql.StringColumn("engagement_id")
		NameColumn                                     = mysql.StringColumn("name")
		SourceIDColumn                                 = mysql.StringColumn("source_id")
		GroupColumn                                    = mysql.StringColumn("group")
		MaterialColumn                                 = mysql.StringColumn("material")
		CommentColumn                                  = mysql.StringColumn("comment")
		IsMaterialByDefaultColumn                      = mysql.BoolColumn("is_material_by_default")
		IsMaterialByPmColumn                           = mysql.BoolColumn("is_material_by_pm")
		IsMaterialManuallyColumn                       = mysql.BoolColumn("is_material_manually")
		ProceduresProvideSufficientAuditEvidenceColumn = mysql.BoolColumn("procedures_provide_sufficient_audit_evidence")
		RmmCommentColumn                               = mysql.StringColumn("rmm_comment")
		LabelColumn                                    = mysql.StringColumn("label")
		DateLastLabelModifiedColumn                    = mysql.StringColumn("date_last_label_modified")
		allColumns                                     = mysql.ColumnList{IDColumn, EngagementIDColumn, NameColumn, SourceIDColumn, GroupColumn, MaterialColumn, CommentColumn, IsMaterialByDefaultColumn, IsMaterialByPmColumn, IsMaterialManuallyColumn, ProceduresProvideSufficientAuditEvidenceColumn, RmmCommentColumn, LabelColumn, DateLastLabelModifiedColumn}
		mutableColumns                                 = mysql.ColumnList{EngagementIDColumn, NameColumn, SourceIDColumn, GroupColumn, MaterialColumn, CommentColumn, IsMaterialByDefaultColumn, IsMaterialByPmColumn, IsMaterialManuallyColumn, ProceduresProvideSufficientAuditEvidenceColumn, RmmCommentColumn, LabelColumn, DateLastLabelModifiedColumn}
	)

	return engagementCotabsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                                       IDColumn,
		EngagementID:                             EngagementIDColumn,
		Name:                                     NameColumn,
		SourceID:                                 SourceIDColumn,
		Group:                                    GroupColumn,
		Material:                                 MaterialColumn,
		Comment:                                  CommentColumn,
		IsMaterialByDefault:                      IsMaterialByDefaultColumn,
		IsMaterialByPm:                           IsMaterialByPmColumn,
		IsMaterialManually:                       IsMaterialManuallyColumn,
		ProceduresProvideSufficientAuditEvidence: ProceduresProvideSufficientAuditEvidenceColumn,
		RmmComment:                               RmmCommentColumn,
		Label:                                    LabelColumn,
		DateLastLabelModified:                    DateLastLabelModifiedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
