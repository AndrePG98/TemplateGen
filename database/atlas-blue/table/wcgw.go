//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Wcgw = newWcgwTable("atlas-blue", "wcgw", "")

type wcgwTable struct {
	mysql.Table

	// Columns
	ID                    mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID          mysql.ColumnString // (DC2Type:guid)
	Name                  mysql.ColumnString
	SourceID              mysql.ColumnString
	OriginType            mysql.ColumnString
	Type                  mysql.ColumnString
	Status                mysql.ColumnString
	Label                 mysql.ColumnString // (DC2Type:json)
	DateLastLabelModified mysql.ColumnString // (DC2Type:json)
	BusinessRisks         mysql.ColumnString // (DC2Type:array)

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type WcgwTable struct {
	wcgwTable

	NEW wcgwTable
}

// AS creates new WcgwTable with assigned alias
func (a WcgwTable) AS(alias string) *WcgwTable {
	return newWcgwTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WcgwTable with assigned schema name
func (a WcgwTable) FromSchema(schemaName string) *WcgwTable {
	return newWcgwTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WcgwTable with assigned table prefix
func (a WcgwTable) WithPrefix(prefix string) *WcgwTable {
	return newWcgwTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WcgwTable with assigned table suffix
func (a WcgwTable) WithSuffix(suffix string) *WcgwTable {
	return newWcgwTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWcgwTable(schemaName, tableName, alias string) *WcgwTable {
	return &WcgwTable{
		wcgwTable: newWcgwTableImpl(schemaName, tableName, alias),
		NEW:       newWcgwTableImpl("", "new", ""),
	}
}

func newWcgwTableImpl(schemaName, tableName, alias string) wcgwTable {
	var (
		IDColumn                    = mysql.StringColumn("id")
		EngagementIDColumn          = mysql.StringColumn("engagement_id")
		NameColumn                  = mysql.StringColumn("name")
		SourceIDColumn              = mysql.StringColumn("source_id")
		OriginTypeColumn            = mysql.StringColumn("origin_type")
		TypeColumn                  = mysql.StringColumn("type")
		StatusColumn                = mysql.StringColumn("status")
		LabelColumn                 = mysql.StringColumn("label")
		DateLastLabelModifiedColumn = mysql.StringColumn("date_last_label_modified")
		BusinessRisksColumn         = mysql.StringColumn("business_risks")
		allColumns                  = mysql.ColumnList{IDColumn, EngagementIDColumn, NameColumn, SourceIDColumn, OriginTypeColumn, TypeColumn, StatusColumn, LabelColumn, DateLastLabelModifiedColumn, BusinessRisksColumn}
		mutableColumns              = mysql.ColumnList{EngagementIDColumn, NameColumn, SourceIDColumn, OriginTypeColumn, TypeColumn, StatusColumn, LabelColumn, DateLastLabelModifiedColumn, BusinessRisksColumn}
	)

	return wcgwTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                    IDColumn,
		EngagementID:          EngagementIDColumn,
		Name:                  NameColumn,
		SourceID:              SourceIDColumn,
		OriginType:            OriginTypeColumn,
		Type:                  TypeColumn,
		Status:                StatusColumn,
		Label:                 LabelColumn,
		DateLastLabelModified: DateLastLabelModifiedColumn,
		BusinessRisks:         BusinessRisksColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
