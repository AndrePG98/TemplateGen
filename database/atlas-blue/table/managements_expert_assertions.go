//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ManagementsExpertAssertions = newManagementsExpertAssertionsTable("atlas-blue", "managements_expert_assertions", "")

type managementsExpertAssertionsTable struct {
	mysql.Table

	// Columns
	ID                  mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	ManagementsExpertID mysql.ColumnString // (DC2Type:guid)
	AssertionID         mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ManagementsExpertAssertionsTable struct {
	managementsExpertAssertionsTable

	NEW managementsExpertAssertionsTable
}

// AS creates new ManagementsExpertAssertionsTable with assigned alias
func (a ManagementsExpertAssertionsTable) AS(alias string) *ManagementsExpertAssertionsTable {
	return newManagementsExpertAssertionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ManagementsExpertAssertionsTable with assigned schema name
func (a ManagementsExpertAssertionsTable) FromSchema(schemaName string) *ManagementsExpertAssertionsTable {
	return newManagementsExpertAssertionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ManagementsExpertAssertionsTable with assigned table prefix
func (a ManagementsExpertAssertionsTable) WithPrefix(prefix string) *ManagementsExpertAssertionsTable {
	return newManagementsExpertAssertionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ManagementsExpertAssertionsTable with assigned table suffix
func (a ManagementsExpertAssertionsTable) WithSuffix(suffix string) *ManagementsExpertAssertionsTable {
	return newManagementsExpertAssertionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newManagementsExpertAssertionsTable(schemaName, tableName, alias string) *ManagementsExpertAssertionsTable {
	return &ManagementsExpertAssertionsTable{
		managementsExpertAssertionsTable: newManagementsExpertAssertionsTableImpl(schemaName, tableName, alias),
		NEW:                              newManagementsExpertAssertionsTableImpl("", "new", ""),
	}
}

func newManagementsExpertAssertionsTableImpl(schemaName, tableName, alias string) managementsExpertAssertionsTable {
	var (
		IDColumn                  = mysql.StringColumn("id")
		ManagementsExpertIDColumn = mysql.StringColumn("managements_expert_id")
		AssertionIDColumn         = mysql.StringColumn("assertion_id")
		allColumns                = mysql.ColumnList{IDColumn, ManagementsExpertIDColumn, AssertionIDColumn}
		mutableColumns            = mysql.ColumnList{ManagementsExpertIDColumn, AssertionIDColumn}
	)

	return managementsExpertAssertionsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		ManagementsExpertID: ManagementsExpertIDColumn,
		AssertionID:         AssertionIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
