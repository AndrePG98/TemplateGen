//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var RelatedParties = newRelatedPartiesTable("atlas-blue", "related_parties", "")

type relatedPartiesTable struct {
	mysql.Table

	// Columns
	ID                                               mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementMasterfileNodeID                       mysql.ColumnString // (DC2Type:guid)
	Name                                             mysql.ColumnString
	NatureOfRelationship                             mysql.ColumnString
	AnyTransactionsEntered                           mysql.ColumnBool
	AnyOfTheseTransactionsDeemedSignificant          mysql.ColumnBool
	TypeAndPurposeOfTransaction                      mysql.ColumnString
	DetailsOfSignificantTransactions                 mysql.ColumnString
	HasManagementMadeAnAssertion                     mysql.ColumnBool
	DetailsOfTransactionsConsideredToBeEquivalent    mysql.ColumnString
	DetailsOfTransactionsConsideredNotToBeEquivalent mysql.ColumnString
	IsValid                                          mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type RelatedPartiesTable struct {
	relatedPartiesTable

	NEW relatedPartiesTable
}

// AS creates new RelatedPartiesTable with assigned alias
func (a RelatedPartiesTable) AS(alias string) *RelatedPartiesTable {
	return newRelatedPartiesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RelatedPartiesTable with assigned schema name
func (a RelatedPartiesTable) FromSchema(schemaName string) *RelatedPartiesTable {
	return newRelatedPartiesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RelatedPartiesTable with assigned table prefix
func (a RelatedPartiesTable) WithPrefix(prefix string) *RelatedPartiesTable {
	return newRelatedPartiesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RelatedPartiesTable with assigned table suffix
func (a RelatedPartiesTable) WithSuffix(suffix string) *RelatedPartiesTable {
	return newRelatedPartiesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRelatedPartiesTable(schemaName, tableName, alias string) *RelatedPartiesTable {
	return &RelatedPartiesTable{
		relatedPartiesTable: newRelatedPartiesTableImpl(schemaName, tableName, alias),
		NEW:                 newRelatedPartiesTableImpl("", "new", ""),
	}
}

func newRelatedPartiesTableImpl(schemaName, tableName, alias string) relatedPartiesTable {
	var (
		IDColumn                                               = mysql.StringColumn("id")
		EngagementMasterfileNodeIDColumn                       = mysql.StringColumn("engagement_masterfile_node_id")
		NameColumn                                             = mysql.StringColumn("name")
		NatureOfRelationshipColumn                             = mysql.StringColumn("nature_of_relationship")
		AnyTransactionsEnteredColumn                           = mysql.BoolColumn("any_transactions_entered")
		AnyOfTheseTransactionsDeemedSignificantColumn          = mysql.BoolColumn("any_of_these_transactions_deemed_significant")
		TypeAndPurposeOfTransactionColumn                      = mysql.StringColumn("type_and_purpose_of_transaction")
		DetailsOfSignificantTransactionsColumn                 = mysql.StringColumn("details_of_significant_transactions")
		HasManagementMadeAnAssertionColumn                     = mysql.BoolColumn("has_management_made_an_assertion")
		DetailsOfTransactionsConsideredToBeEquivalentColumn    = mysql.StringColumn("details_of_transactions_considered_to_be_equivalent")
		DetailsOfTransactionsConsideredNotToBeEquivalentColumn = mysql.StringColumn("details_of_transactions_considered_not_to_be_equivalent")
		IsValidColumn                                          = mysql.BoolColumn("is_valid")
		allColumns                                             = mysql.ColumnList{IDColumn, EngagementMasterfileNodeIDColumn, NameColumn, NatureOfRelationshipColumn, AnyTransactionsEnteredColumn, AnyOfTheseTransactionsDeemedSignificantColumn, TypeAndPurposeOfTransactionColumn, DetailsOfSignificantTransactionsColumn, HasManagementMadeAnAssertionColumn, DetailsOfTransactionsConsideredToBeEquivalentColumn, DetailsOfTransactionsConsideredNotToBeEquivalentColumn, IsValidColumn}
		mutableColumns                                         = mysql.ColumnList{EngagementMasterfileNodeIDColumn, NameColumn, NatureOfRelationshipColumn, AnyTransactionsEnteredColumn, AnyOfTheseTransactionsDeemedSignificantColumn, TypeAndPurposeOfTransactionColumn, DetailsOfSignificantTransactionsColumn, HasManagementMadeAnAssertionColumn, DetailsOfTransactionsConsideredToBeEquivalentColumn, DetailsOfTransactionsConsideredNotToBeEquivalentColumn, IsValidColumn}
	)

	return relatedPartiesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                                      IDColumn,
		EngagementMasterfileNodeID:              EngagementMasterfileNodeIDColumn,
		Name:                                    NameColumn,
		NatureOfRelationship:                    NatureOfRelationshipColumn,
		AnyTransactionsEntered:                  AnyTransactionsEnteredColumn,
		AnyOfTheseTransactionsDeemedSignificant: AnyOfTheseTransactionsDeemedSignificantColumn,
		TypeAndPurposeOfTransaction:             TypeAndPurposeOfTransactionColumn,
		DetailsOfSignificantTransactions:        DetailsOfSignificantTransactionsColumn,
		HasManagementMadeAnAssertion:            HasManagementMadeAnAssertionColumn,
		DetailsOfTransactionsConsideredToBeEquivalent:    DetailsOfTransactionsConsideredToBeEquivalentColumn,
		DetailsOfTransactionsConsideredNotToBeEquivalent: DetailsOfTransactionsConsideredNotToBeEquivalentColumn,
		IsValid: IsValidColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
