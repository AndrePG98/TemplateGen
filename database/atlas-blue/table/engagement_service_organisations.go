//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var EngagementServiceOrganisations = newEngagementServiceOrganisationsTable("atlas-blue", "engagement_service_organisations", "")

type engagementServiceOrganisationsTable struct {
	mysql.Table

	// Columns
	ID                                    mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID                          mysql.ColumnString // (DC2Type:guid)
	Name                                  mysql.ColumnString
	NatureOfServices                      mysql.ColumnString
	NatureMaterialityOfTransactions       mysql.ColumnString
	DegreeOfInteraction                   mysql.ColumnString
	NatureOfRelationship                  mysql.ColumnString
	IdentifyControls                      mysql.ColumnString
	EnquireOfManagement                   mysql.ColumnString
	DidReportToUserEntity                 mysql.ColumnBool
	EvaluateHowMuchMatters                mysql.ColumnString
	IsValid                               mysql.ColumnBool
	CotabdsAssertions                     mysql.ColumnString
	Cotabds                               mysql.ColumnString // (DC2Type:array)
	Assertions                            mysql.ColumnString // (DC2Type:array)
	HasSufficientUnderstanding            mysql.ColumnBool
	HasSufficientUnderstandingComment     mysql.ColumnString
	DoesPlannedApproachIncludeExpectation mysql.ColumnBool
	IsSufficientAuditEvidence             mysql.ColumnBool
	IsSufficientAuditEvidenceComment      mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type EngagementServiceOrganisationsTable struct {
	engagementServiceOrganisationsTable

	NEW engagementServiceOrganisationsTable
}

// AS creates new EngagementServiceOrganisationsTable with assigned alias
func (a EngagementServiceOrganisationsTable) AS(alias string) *EngagementServiceOrganisationsTable {
	return newEngagementServiceOrganisationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EngagementServiceOrganisationsTable with assigned schema name
func (a EngagementServiceOrganisationsTable) FromSchema(schemaName string) *EngagementServiceOrganisationsTable {
	return newEngagementServiceOrganisationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EngagementServiceOrganisationsTable with assigned table prefix
func (a EngagementServiceOrganisationsTable) WithPrefix(prefix string) *EngagementServiceOrganisationsTable {
	return newEngagementServiceOrganisationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EngagementServiceOrganisationsTable with assigned table suffix
func (a EngagementServiceOrganisationsTable) WithSuffix(suffix string) *EngagementServiceOrganisationsTable {
	return newEngagementServiceOrganisationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEngagementServiceOrganisationsTable(schemaName, tableName, alias string) *EngagementServiceOrganisationsTable {
	return &EngagementServiceOrganisationsTable{
		engagementServiceOrganisationsTable: newEngagementServiceOrganisationsTableImpl(schemaName, tableName, alias),
		NEW:                                 newEngagementServiceOrganisationsTableImpl("", "new", ""),
	}
}

func newEngagementServiceOrganisationsTableImpl(schemaName, tableName, alias string) engagementServiceOrganisationsTable {
	var (
		IDColumn                                    = mysql.StringColumn("id")
		EngagementIDColumn                          = mysql.StringColumn("engagement_id")
		NameColumn                                  = mysql.StringColumn("name")
		NatureOfServicesColumn                      = mysql.StringColumn("nature_of_services")
		NatureMaterialityOfTransactionsColumn       = mysql.StringColumn("nature_materiality_of_transactions")
		DegreeOfInteractionColumn                   = mysql.StringColumn("degree_of_interaction")
		NatureOfRelationshipColumn                  = mysql.StringColumn("nature_of_relationship")
		IdentifyControlsColumn                      = mysql.StringColumn("identify_controls")
		EnquireOfManagementColumn                   = mysql.StringColumn("enquire_of_management")
		DidReportToUserEntityColumn                 = mysql.BoolColumn("did_report_to_user_entity")
		EvaluateHowMuchMattersColumn                = mysql.StringColumn("evaluate_how_much_matters")
		IsValidColumn                               = mysql.BoolColumn("is_valid")
		CotabdsAssertionsColumn                     = mysql.StringColumn("cotabds_assertions")
		CotabdsColumn                               = mysql.StringColumn("cotabds")
		AssertionsColumn                            = mysql.StringColumn("assertions")
		HasSufficientUnderstandingColumn            = mysql.BoolColumn("has_sufficient_understanding")
		HasSufficientUnderstandingCommentColumn     = mysql.StringColumn("has_sufficient_understanding_comment")
		DoesPlannedApproachIncludeExpectationColumn = mysql.BoolColumn("does_planned_approach_include_expectation")
		IsSufficientAuditEvidenceColumn             = mysql.BoolColumn("is_sufficient_audit_evidence")
		IsSufficientAuditEvidenceCommentColumn      = mysql.StringColumn("is_sufficient_audit_evidence_comment")
		allColumns                                  = mysql.ColumnList{IDColumn, EngagementIDColumn, NameColumn, NatureOfServicesColumn, NatureMaterialityOfTransactionsColumn, DegreeOfInteractionColumn, NatureOfRelationshipColumn, IdentifyControlsColumn, EnquireOfManagementColumn, DidReportToUserEntityColumn, EvaluateHowMuchMattersColumn, IsValidColumn, CotabdsAssertionsColumn, CotabdsColumn, AssertionsColumn, HasSufficientUnderstandingColumn, HasSufficientUnderstandingCommentColumn, DoesPlannedApproachIncludeExpectationColumn, IsSufficientAuditEvidenceColumn, IsSufficientAuditEvidenceCommentColumn}
		mutableColumns                              = mysql.ColumnList{EngagementIDColumn, NameColumn, NatureOfServicesColumn, NatureMaterialityOfTransactionsColumn, DegreeOfInteractionColumn, NatureOfRelationshipColumn, IdentifyControlsColumn, EnquireOfManagementColumn, DidReportToUserEntityColumn, EvaluateHowMuchMattersColumn, IsValidColumn, CotabdsAssertionsColumn, CotabdsColumn, AssertionsColumn, HasSufficientUnderstandingColumn, HasSufficientUnderstandingCommentColumn, DoesPlannedApproachIncludeExpectationColumn, IsSufficientAuditEvidenceColumn, IsSufficientAuditEvidenceCommentColumn}
	)

	return engagementServiceOrganisationsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                                    IDColumn,
		EngagementID:                          EngagementIDColumn,
		Name:                                  NameColumn,
		NatureOfServices:                      NatureOfServicesColumn,
		NatureMaterialityOfTransactions:       NatureMaterialityOfTransactionsColumn,
		DegreeOfInteraction:                   DegreeOfInteractionColumn,
		NatureOfRelationship:                  NatureOfRelationshipColumn,
		IdentifyControls:                      IdentifyControlsColumn,
		EnquireOfManagement:                   EnquireOfManagementColumn,
		DidReportToUserEntity:                 DidReportToUserEntityColumn,
		EvaluateHowMuchMatters:                EvaluateHowMuchMattersColumn,
		IsValid:                               IsValidColumn,
		CotabdsAssertions:                     CotabdsAssertionsColumn,
		Cotabds:                               CotabdsColumn,
		Assertions:                            AssertionsColumn,
		HasSufficientUnderstanding:            HasSufficientUnderstandingColumn,
		HasSufficientUnderstandingComment:     HasSufficientUnderstandingCommentColumn,
		DoesPlannedApproachIncludeExpectation: DoesPlannedApproachIncludeExpectationColumn,
		IsSufficientAuditEvidence:             IsSufficientAuditEvidenceColumn,
		IsSufficientAuditEvidenceComment:      IsSufficientAuditEvidenceCommentColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
