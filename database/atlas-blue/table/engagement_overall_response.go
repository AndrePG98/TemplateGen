//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var EngagementOverallResponse = newEngagementOverallResponseTable("atlas-blue", "engagement_overall_response", "")

type engagementOverallResponseTable struct {
	mysql.Table

	// Columns
	ID                                   mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID                         mysql.ColumnString // (DC2Type:guid)
	EmphasizeEngagementTeam              mysql.ColumnBool
	EmphasizeEngagementTeamComment       mysql.ColumnString
	AssignMoreStaff                      mysql.ColumnBool
	AssignMoreStaffComment               mysql.ColumnString
	ProvideMoreSupervision               mysql.ColumnBool
	ProvideMoreSupervisionComment        mysql.ColumnString
	IncorporateAdditionalElements        mysql.ColumnBool
	IncorporateAdditionalElementsComment mysql.ColumnString
	MakeGeneralChanges                   mysql.ColumnBool
	MakeGeneralChangesComment            mysql.ColumnString
	IsValid                              mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type EngagementOverallResponseTable struct {
	engagementOverallResponseTable

	NEW engagementOverallResponseTable
}

// AS creates new EngagementOverallResponseTable with assigned alias
func (a EngagementOverallResponseTable) AS(alias string) *EngagementOverallResponseTable {
	return newEngagementOverallResponseTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EngagementOverallResponseTable with assigned schema name
func (a EngagementOverallResponseTable) FromSchema(schemaName string) *EngagementOverallResponseTable {
	return newEngagementOverallResponseTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EngagementOverallResponseTable with assigned table prefix
func (a EngagementOverallResponseTable) WithPrefix(prefix string) *EngagementOverallResponseTable {
	return newEngagementOverallResponseTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EngagementOverallResponseTable with assigned table suffix
func (a EngagementOverallResponseTable) WithSuffix(suffix string) *EngagementOverallResponseTable {
	return newEngagementOverallResponseTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEngagementOverallResponseTable(schemaName, tableName, alias string) *EngagementOverallResponseTable {
	return &EngagementOverallResponseTable{
		engagementOverallResponseTable: newEngagementOverallResponseTableImpl(schemaName, tableName, alias),
		NEW:                            newEngagementOverallResponseTableImpl("", "new", ""),
	}
}

func newEngagementOverallResponseTableImpl(schemaName, tableName, alias string) engagementOverallResponseTable {
	var (
		IDColumn                                   = mysql.StringColumn("id")
		EngagementIDColumn                         = mysql.StringColumn("engagement_id")
		EmphasizeEngagementTeamColumn              = mysql.BoolColumn("emphasize_engagement_team")
		EmphasizeEngagementTeamCommentColumn       = mysql.StringColumn("emphasize_engagement_team_comment")
		AssignMoreStaffColumn                      = mysql.BoolColumn("assign_more_staff")
		AssignMoreStaffCommentColumn               = mysql.StringColumn("assign_more_staff_comment")
		ProvideMoreSupervisionColumn               = mysql.BoolColumn("provide_more_supervision")
		ProvideMoreSupervisionCommentColumn        = mysql.StringColumn("provide_more_supervision_comment")
		IncorporateAdditionalElementsColumn        = mysql.BoolColumn("incorporate_additional_elements")
		IncorporateAdditionalElementsCommentColumn = mysql.StringColumn("incorporate_additional_elements_comment")
		MakeGeneralChangesColumn                   = mysql.BoolColumn("make_general_changes")
		MakeGeneralChangesCommentColumn            = mysql.StringColumn("make_general_changes_comment")
		IsValidColumn                              = mysql.BoolColumn("is_valid")
		allColumns                                 = mysql.ColumnList{IDColumn, EngagementIDColumn, EmphasizeEngagementTeamColumn, EmphasizeEngagementTeamCommentColumn, AssignMoreStaffColumn, AssignMoreStaffCommentColumn, ProvideMoreSupervisionColumn, ProvideMoreSupervisionCommentColumn, IncorporateAdditionalElementsColumn, IncorporateAdditionalElementsCommentColumn, MakeGeneralChangesColumn, MakeGeneralChangesCommentColumn, IsValidColumn}
		mutableColumns                             = mysql.ColumnList{EngagementIDColumn, EmphasizeEngagementTeamColumn, EmphasizeEngagementTeamCommentColumn, AssignMoreStaffColumn, AssignMoreStaffCommentColumn, ProvideMoreSupervisionColumn, ProvideMoreSupervisionCommentColumn, IncorporateAdditionalElementsColumn, IncorporateAdditionalElementsCommentColumn, MakeGeneralChangesColumn, MakeGeneralChangesCommentColumn, IsValidColumn}
	)

	return engagementOverallResponseTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                                   IDColumn,
		EngagementID:                         EngagementIDColumn,
		EmphasizeEngagementTeam:              EmphasizeEngagementTeamColumn,
		EmphasizeEngagementTeamComment:       EmphasizeEngagementTeamCommentColumn,
		AssignMoreStaff:                      AssignMoreStaffColumn,
		AssignMoreStaffComment:               AssignMoreStaffCommentColumn,
		ProvideMoreSupervision:               ProvideMoreSupervisionColumn,
		ProvideMoreSupervisionComment:        ProvideMoreSupervisionCommentColumn,
		IncorporateAdditionalElements:        IncorporateAdditionalElementsColumn,
		IncorporateAdditionalElementsComment: IncorporateAdditionalElementsCommentColumn,
		MakeGeneralChanges:                   MakeGeneralChangesColumn,
		MakeGeneralChangesComment:            MakeGeneralChangesCommentColumn,
		IsValid:                              IsValidColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
