//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var AuditTreeFormLocks = newAuditTreeFormLocksTable("atlas-blue", "audit_tree_form_locks", "")

type auditTreeFormLocksTable struct {
	mysql.Table

	// Columns
	ID              mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID    mysql.ColumnString // (DC2Type:guid)
	UserID          mysql.ColumnString // (DC2Type:guid)
	FormNodeID      mysql.ColumnString
	LockDateCreated mysql.ColumnTimestamp // (DC2Type:datetime_immutable)
	LockDateUpdated mysql.ColumnTimestamp // (DC2Type:datetime_immutable)
	LockExpiredAt   mysql.ColumnTimestamp // (DC2Type:datetime_immutable)

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type AuditTreeFormLocksTable struct {
	auditTreeFormLocksTable

	NEW auditTreeFormLocksTable
}

// AS creates new AuditTreeFormLocksTable with assigned alias
func (a AuditTreeFormLocksTable) AS(alias string) *AuditTreeFormLocksTable {
	return newAuditTreeFormLocksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AuditTreeFormLocksTable with assigned schema name
func (a AuditTreeFormLocksTable) FromSchema(schemaName string) *AuditTreeFormLocksTable {
	return newAuditTreeFormLocksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AuditTreeFormLocksTable with assigned table prefix
func (a AuditTreeFormLocksTable) WithPrefix(prefix string) *AuditTreeFormLocksTable {
	return newAuditTreeFormLocksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AuditTreeFormLocksTable with assigned table suffix
func (a AuditTreeFormLocksTable) WithSuffix(suffix string) *AuditTreeFormLocksTable {
	return newAuditTreeFormLocksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAuditTreeFormLocksTable(schemaName, tableName, alias string) *AuditTreeFormLocksTable {
	return &AuditTreeFormLocksTable{
		auditTreeFormLocksTable: newAuditTreeFormLocksTableImpl(schemaName, tableName, alias),
		NEW:                     newAuditTreeFormLocksTableImpl("", "new", ""),
	}
}

func newAuditTreeFormLocksTableImpl(schemaName, tableName, alias string) auditTreeFormLocksTable {
	var (
		IDColumn              = mysql.StringColumn("id")
		EngagementIDColumn    = mysql.StringColumn("engagement_id")
		UserIDColumn          = mysql.StringColumn("user_id")
		FormNodeIDColumn      = mysql.StringColumn("form_node_id")
		LockDateCreatedColumn = mysql.TimestampColumn("lock_date_created")
		LockDateUpdatedColumn = mysql.TimestampColumn("lock_date_updated")
		LockExpiredAtColumn   = mysql.TimestampColumn("lock_expired_at")
		allColumns            = mysql.ColumnList{IDColumn, EngagementIDColumn, UserIDColumn, FormNodeIDColumn, LockDateCreatedColumn, LockDateUpdatedColumn, LockExpiredAtColumn}
		mutableColumns        = mysql.ColumnList{EngagementIDColumn, UserIDColumn, FormNodeIDColumn, LockDateCreatedColumn, LockDateUpdatedColumn, LockExpiredAtColumn}
	)

	return auditTreeFormLocksTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		EngagementID:    EngagementIDColumn,
		UserID:          UserIDColumn,
		FormNodeID:      FormNodeIDColumn,
		LockDateCreated: LockDateCreatedColumn,
		LockDateUpdated: LockDateUpdatedColumn,
		LockExpiredAt:   LockExpiredAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
