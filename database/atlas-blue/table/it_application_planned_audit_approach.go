//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ItApplicationPlannedAuditApproach = newItApplicationPlannedAuditApproachTable("atlas-blue", "it_application_planned_audit_approach", "")

type itApplicationPlannedAuditApproachTable struct {
	mysql.Table

	// Columns
	ID                                       mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID                             mysql.ColumnString // (DC2Type:guid)
	ItApplicationID                          mysql.ColumnString // (DC2Type:guid)
	NodeID                                   mysql.ColumnString
	PlannedEvaluationOfOe                    mysql.ColumnBool
	PlannedEvaluationOfDi                    mysql.ColumnBool
	ItApplicationsItRisksItGeneralControlsID mysql.ColumnString // (DC2Type:guid)

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ItApplicationPlannedAuditApproachTable struct {
	itApplicationPlannedAuditApproachTable

	NEW itApplicationPlannedAuditApproachTable
}

// AS creates new ItApplicationPlannedAuditApproachTable with assigned alias
func (a ItApplicationPlannedAuditApproachTable) AS(alias string) *ItApplicationPlannedAuditApproachTable {
	return newItApplicationPlannedAuditApproachTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ItApplicationPlannedAuditApproachTable with assigned schema name
func (a ItApplicationPlannedAuditApproachTable) FromSchema(schemaName string) *ItApplicationPlannedAuditApproachTable {
	return newItApplicationPlannedAuditApproachTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ItApplicationPlannedAuditApproachTable with assigned table prefix
func (a ItApplicationPlannedAuditApproachTable) WithPrefix(prefix string) *ItApplicationPlannedAuditApproachTable {
	return newItApplicationPlannedAuditApproachTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ItApplicationPlannedAuditApproachTable with assigned table suffix
func (a ItApplicationPlannedAuditApproachTable) WithSuffix(suffix string) *ItApplicationPlannedAuditApproachTable {
	return newItApplicationPlannedAuditApproachTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newItApplicationPlannedAuditApproachTable(schemaName, tableName, alias string) *ItApplicationPlannedAuditApproachTable {
	return &ItApplicationPlannedAuditApproachTable{
		itApplicationPlannedAuditApproachTable: newItApplicationPlannedAuditApproachTableImpl(schemaName, tableName, alias),
		NEW:                                    newItApplicationPlannedAuditApproachTableImpl("", "new", ""),
	}
}

func newItApplicationPlannedAuditApproachTableImpl(schemaName, tableName, alias string) itApplicationPlannedAuditApproachTable {
	var (
		IDColumn                                       = mysql.StringColumn("id")
		EngagementIDColumn                             = mysql.StringColumn("engagement_id")
		ItApplicationIDColumn                          = mysql.StringColumn("it_application_id")
		NodeIDColumn                                   = mysql.StringColumn("node_id")
		PlannedEvaluationOfOeColumn                    = mysql.BoolColumn("planned_evaluation_of_oe")
		PlannedEvaluationOfDiColumn                    = mysql.BoolColumn("planned_evaluation_of_di")
		ItApplicationsItRisksItGeneralControlsIDColumn = mysql.StringColumn("it_applications_it_risks_it_general_controls_id")
		allColumns                                     = mysql.ColumnList{IDColumn, EngagementIDColumn, ItApplicationIDColumn, NodeIDColumn, PlannedEvaluationOfOeColumn, PlannedEvaluationOfDiColumn, ItApplicationsItRisksItGeneralControlsIDColumn}
		mutableColumns                                 = mysql.ColumnList{EngagementIDColumn, ItApplicationIDColumn, NodeIDColumn, PlannedEvaluationOfOeColumn, PlannedEvaluationOfDiColumn, ItApplicationsItRisksItGeneralControlsIDColumn}
	)

	return itApplicationPlannedAuditApproachTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                                       IDColumn,
		EngagementID:                             EngagementIDColumn,
		ItApplicationID:                          ItApplicationIDColumn,
		NodeID:                                   NodeIDColumn,
		PlannedEvaluationOfOe:                    PlannedEvaluationOfOeColumn,
		PlannedEvaluationOfDi:                    PlannedEvaluationOfDiColumn,
		ItApplicationsItRisksItGeneralControlsID: ItApplicationsItRisksItGeneralControlsIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
