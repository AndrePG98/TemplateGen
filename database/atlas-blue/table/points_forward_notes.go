//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var PointsForwardNotes = newPointsForwardNotesTable("atlas-blue", "points_forward_notes", "")

type pointsForwardNotesTable struct {
	mysql.Table

	// Columns
	ID               mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	OpenedBy         mysql.ColumnString // (DC2Type:guid)
	ClearedBy        mysql.ColumnString // (DC2Type:guid)
	ForAttentionOf   mysql.ColumnString
	Period           mysql.ColumnTimestamp
	Details          mysql.ColumnString
	ClearingComments mysql.ColumnString
	OpenedOn         mysql.ColumnTimestamp // (DC2Type:datetime_immutable)
	ClearedOn        mysql.ColumnTimestamp // (DC2Type:datetime_immutable)

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type PointsForwardNotesTable struct {
	pointsForwardNotesTable

	NEW pointsForwardNotesTable
}

// AS creates new PointsForwardNotesTable with assigned alias
func (a PointsForwardNotesTable) AS(alias string) *PointsForwardNotesTable {
	return newPointsForwardNotesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PointsForwardNotesTable with assigned schema name
func (a PointsForwardNotesTable) FromSchema(schemaName string) *PointsForwardNotesTable {
	return newPointsForwardNotesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PointsForwardNotesTable with assigned table prefix
func (a PointsForwardNotesTable) WithPrefix(prefix string) *PointsForwardNotesTable {
	return newPointsForwardNotesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PointsForwardNotesTable with assigned table suffix
func (a PointsForwardNotesTable) WithSuffix(suffix string) *PointsForwardNotesTable {
	return newPointsForwardNotesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPointsForwardNotesTable(schemaName, tableName, alias string) *PointsForwardNotesTable {
	return &PointsForwardNotesTable{
		pointsForwardNotesTable: newPointsForwardNotesTableImpl(schemaName, tableName, alias),
		NEW:                     newPointsForwardNotesTableImpl("", "new", ""),
	}
}

func newPointsForwardNotesTableImpl(schemaName, tableName, alias string) pointsForwardNotesTable {
	var (
		IDColumn               = mysql.StringColumn("id")
		OpenedByColumn         = mysql.StringColumn("opened_by")
		ClearedByColumn        = mysql.StringColumn("cleared_by")
		ForAttentionOfColumn   = mysql.StringColumn("for_attention_of")
		PeriodColumn           = mysql.TimestampColumn("period")
		DetailsColumn          = mysql.StringColumn("details")
		ClearingCommentsColumn = mysql.StringColumn("clearing_comments")
		OpenedOnColumn         = mysql.TimestampColumn("opened_on")
		ClearedOnColumn        = mysql.TimestampColumn("cleared_on")
		allColumns             = mysql.ColumnList{IDColumn, OpenedByColumn, ClearedByColumn, ForAttentionOfColumn, PeriodColumn, DetailsColumn, ClearingCommentsColumn, OpenedOnColumn, ClearedOnColumn}
		mutableColumns         = mysql.ColumnList{OpenedByColumn, ClearedByColumn, ForAttentionOfColumn, PeriodColumn, DetailsColumn, ClearingCommentsColumn, OpenedOnColumn, ClearedOnColumn}
	)

	return pointsForwardNotesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		OpenedBy:         OpenedByColumn,
		ClearedBy:        ClearedByColumn,
		ForAttentionOf:   ForAttentionOfColumn,
		Period:           PeriodColumn,
		Details:          DetailsColumn,
		ClearingComments: ClearingCommentsColumn,
		OpenedOn:         OpenedOnColumn,
		ClearedOn:        ClearedOnColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
