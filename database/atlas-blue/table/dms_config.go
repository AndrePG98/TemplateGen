//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var DmsConfig = newDmsConfigTable("atlas-blue", "dms_config", "")

type dmsConfigTable struct {
	mysql.Table

	// Columns
	Key   mysql.ColumnString
	Value mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type DmsConfigTable struct {
	dmsConfigTable

	NEW dmsConfigTable
}

// AS creates new DmsConfigTable with assigned alias
func (a DmsConfigTable) AS(alias string) *DmsConfigTable {
	return newDmsConfigTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DmsConfigTable with assigned schema name
func (a DmsConfigTable) FromSchema(schemaName string) *DmsConfigTable {
	return newDmsConfigTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DmsConfigTable with assigned table prefix
func (a DmsConfigTable) WithPrefix(prefix string) *DmsConfigTable {
	return newDmsConfigTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DmsConfigTable with assigned table suffix
func (a DmsConfigTable) WithSuffix(suffix string) *DmsConfigTable {
	return newDmsConfigTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDmsConfigTable(schemaName, tableName, alias string) *DmsConfigTable {
	return &DmsConfigTable{
		dmsConfigTable: newDmsConfigTableImpl(schemaName, tableName, alias),
		NEW:            newDmsConfigTableImpl("", "new", ""),
	}
}

func newDmsConfigTableImpl(schemaName, tableName, alias string) dmsConfigTable {
	var (
		KeyColumn      = mysql.StringColumn("key")
		ValueColumn    = mysql.StringColumn("value")
		allColumns     = mysql.ColumnList{KeyColumn, ValueColumn}
		mutableColumns = mysql.ColumnList{ValueColumn}
	)

	return dmsConfigTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Key:   KeyColumn,
		Value: ValueColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
