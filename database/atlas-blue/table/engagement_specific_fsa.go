//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var EngagementSpecificFsa = newEngagementSpecificFsaTable("atlas-blue", "engagement_specific_fsa", "")

type engagementSpecificFsaTable struct {
	mysql.Table

	// Columns
	ID                    mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID          mysql.ColumnString // (DC2Type:guid)
	ParentID              mysql.ColumnString
	PredecessorID         mysql.ColumnString
	Name                  mysql.ColumnString
	NodeType              mysql.ColumnString
	Label                 mysql.ColumnString // (DC2Type:json)
	DateLastLabelModified mysql.ColumnString // (DC2Type:json)

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type EngagementSpecificFsaTable struct {
	engagementSpecificFsaTable

	NEW engagementSpecificFsaTable
}

// AS creates new EngagementSpecificFsaTable with assigned alias
func (a EngagementSpecificFsaTable) AS(alias string) *EngagementSpecificFsaTable {
	return newEngagementSpecificFsaTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EngagementSpecificFsaTable with assigned schema name
func (a EngagementSpecificFsaTable) FromSchema(schemaName string) *EngagementSpecificFsaTable {
	return newEngagementSpecificFsaTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EngagementSpecificFsaTable with assigned table prefix
func (a EngagementSpecificFsaTable) WithPrefix(prefix string) *EngagementSpecificFsaTable {
	return newEngagementSpecificFsaTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EngagementSpecificFsaTable with assigned table suffix
func (a EngagementSpecificFsaTable) WithSuffix(suffix string) *EngagementSpecificFsaTable {
	return newEngagementSpecificFsaTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEngagementSpecificFsaTable(schemaName, tableName, alias string) *EngagementSpecificFsaTable {
	return &EngagementSpecificFsaTable{
		engagementSpecificFsaTable: newEngagementSpecificFsaTableImpl(schemaName, tableName, alias),
		NEW:                        newEngagementSpecificFsaTableImpl("", "new", ""),
	}
}

func newEngagementSpecificFsaTableImpl(schemaName, tableName, alias string) engagementSpecificFsaTable {
	var (
		IDColumn                    = mysql.StringColumn("id")
		EngagementIDColumn          = mysql.StringColumn("engagement_id")
		ParentIDColumn              = mysql.StringColumn("parent_id")
		PredecessorIDColumn         = mysql.StringColumn("predecessor_id")
		NameColumn                  = mysql.StringColumn("name")
		NodeTypeColumn              = mysql.StringColumn("node_type")
		LabelColumn                 = mysql.StringColumn("label")
		DateLastLabelModifiedColumn = mysql.StringColumn("date_last_label_modified")
		allColumns                  = mysql.ColumnList{IDColumn, EngagementIDColumn, ParentIDColumn, PredecessorIDColumn, NameColumn, NodeTypeColumn, LabelColumn, DateLastLabelModifiedColumn}
		mutableColumns              = mysql.ColumnList{EngagementIDColumn, ParentIDColumn, PredecessorIDColumn, NameColumn, NodeTypeColumn, LabelColumn, DateLastLabelModifiedColumn}
	)

	return engagementSpecificFsaTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                    IDColumn,
		EngagementID:          EngagementIDColumn,
		ParentID:              ParentIDColumn,
		PredecessorID:         PredecessorIDColumn,
		Name:                  NameColumn,
		NodeType:              NodeTypeColumn,
		Label:                 LabelColumn,
		DateLastLabelModified: DateLastLabelModifiedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
