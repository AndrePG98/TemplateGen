//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var EngagementNodeActions = newEngagementNodeActionsTable("atlas-blue", "engagement_node_actions", "")

type engagementNodeActionsTable struct {
	mysql.Table

	// Columns
	ID               mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementNodeID mysql.ColumnString // (DC2Type:guid)
	PerformedBy      mysql.ColumnString // (DC2Type:guid)
	ActionType       mysql.ColumnString
	PerformedByRole  mysql.ColumnString
	PerformedAt      mysql.ColumnTimestamp // (DC2Type:datetime_immutable)

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type EngagementNodeActionsTable struct {
	engagementNodeActionsTable

	NEW engagementNodeActionsTable
}

// AS creates new EngagementNodeActionsTable with assigned alias
func (a EngagementNodeActionsTable) AS(alias string) *EngagementNodeActionsTable {
	return newEngagementNodeActionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EngagementNodeActionsTable with assigned schema name
func (a EngagementNodeActionsTable) FromSchema(schemaName string) *EngagementNodeActionsTable {
	return newEngagementNodeActionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EngagementNodeActionsTable with assigned table prefix
func (a EngagementNodeActionsTable) WithPrefix(prefix string) *EngagementNodeActionsTable {
	return newEngagementNodeActionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EngagementNodeActionsTable with assigned table suffix
func (a EngagementNodeActionsTable) WithSuffix(suffix string) *EngagementNodeActionsTable {
	return newEngagementNodeActionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEngagementNodeActionsTable(schemaName, tableName, alias string) *EngagementNodeActionsTable {
	return &EngagementNodeActionsTable{
		engagementNodeActionsTable: newEngagementNodeActionsTableImpl(schemaName, tableName, alias),
		NEW:                        newEngagementNodeActionsTableImpl("", "new", ""),
	}
}

func newEngagementNodeActionsTableImpl(schemaName, tableName, alias string) engagementNodeActionsTable {
	var (
		IDColumn               = mysql.StringColumn("id")
		EngagementNodeIDColumn = mysql.StringColumn("engagement_node_id")
		PerformedByColumn      = mysql.StringColumn("performed_by")
		ActionTypeColumn       = mysql.StringColumn("action_type")
		PerformedByRoleColumn  = mysql.StringColumn("performed_by_role")
		PerformedAtColumn      = mysql.TimestampColumn("performed_at")
		allColumns             = mysql.ColumnList{IDColumn, EngagementNodeIDColumn, PerformedByColumn, ActionTypeColumn, PerformedByRoleColumn, PerformedAtColumn}
		mutableColumns         = mysql.ColumnList{EngagementNodeIDColumn, PerformedByColumn, ActionTypeColumn, PerformedByRoleColumn, PerformedAtColumn}
	)

	return engagementNodeActionsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		EngagementNodeID: EngagementNodeIDColumn,
		PerformedBy:      PerformedByColumn,
		ActionType:       ActionTypeColumn,
		PerformedByRole:  PerformedByRoleColumn,
		PerformedAt:      PerformedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
