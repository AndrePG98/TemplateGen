//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CotabsAssertions = newCotabsAssertionsTable("atlas-blue", "cotabs_assertions", "")

type cotabsAssertionsTable struct {
	mysql.Table

	// Columns
	ID                mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	CotabID           mysql.ColumnString // (DC2Type:guid)
	AssertionType     mysql.ColumnString
	Likelihood        mysql.ColumnString
	Magnitude         mysql.ColumnString
	ControlRisk       mysql.ColumnString
	InherentRisk      mysql.ColumnString
	Rmm               mysql.ColumnString
	LikelihoodComment mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type CotabsAssertionsTable struct {
	cotabsAssertionsTable

	NEW cotabsAssertionsTable
}

// AS creates new CotabsAssertionsTable with assigned alias
func (a CotabsAssertionsTable) AS(alias string) *CotabsAssertionsTable {
	return newCotabsAssertionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CotabsAssertionsTable with assigned schema name
func (a CotabsAssertionsTable) FromSchema(schemaName string) *CotabsAssertionsTable {
	return newCotabsAssertionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CotabsAssertionsTable with assigned table prefix
func (a CotabsAssertionsTable) WithPrefix(prefix string) *CotabsAssertionsTable {
	return newCotabsAssertionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CotabsAssertionsTable with assigned table suffix
func (a CotabsAssertionsTable) WithSuffix(suffix string) *CotabsAssertionsTable {
	return newCotabsAssertionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCotabsAssertionsTable(schemaName, tableName, alias string) *CotabsAssertionsTable {
	return &CotabsAssertionsTable{
		cotabsAssertionsTable: newCotabsAssertionsTableImpl(schemaName, tableName, alias),
		NEW:                   newCotabsAssertionsTableImpl("", "new", ""),
	}
}

func newCotabsAssertionsTableImpl(schemaName, tableName, alias string) cotabsAssertionsTable {
	var (
		IDColumn                = mysql.StringColumn("id")
		CotabIDColumn           = mysql.StringColumn("cotab_id")
		AssertionTypeColumn     = mysql.StringColumn("assertion_type")
		LikelihoodColumn        = mysql.StringColumn("likelihood")
		MagnitudeColumn         = mysql.StringColumn("magnitude")
		ControlRiskColumn       = mysql.StringColumn("control_risk")
		InherentRiskColumn      = mysql.StringColumn("inherent_risk")
		RmmColumn               = mysql.StringColumn("rmm")
		LikelihoodCommentColumn = mysql.StringColumn("likelihood_comment")
		allColumns              = mysql.ColumnList{IDColumn, CotabIDColumn, AssertionTypeColumn, LikelihoodColumn, MagnitudeColumn, ControlRiskColumn, InherentRiskColumn, RmmColumn, LikelihoodCommentColumn}
		mutableColumns          = mysql.ColumnList{CotabIDColumn, AssertionTypeColumn, LikelihoodColumn, MagnitudeColumn, ControlRiskColumn, InherentRiskColumn, RmmColumn, LikelihoodCommentColumn}
	)

	return cotabsAssertionsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		CotabID:           CotabIDColumn,
		AssertionType:     AssertionTypeColumn,
		Likelihood:        LikelihoodColumn,
		Magnitude:         MagnitudeColumn,
		ControlRisk:       ControlRiskColumn,
		InherentRisk:      InherentRiskColumn,
		Rmm:               RmmColumn,
		LikelihoodComment: LikelihoodCommentColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
