//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var OtherComments = newOtherCommentsTable("atlas-blue", "other_comments", "")

type otherCommentsTable struct {
	mysql.Table

	// Columns
	ID                         mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementMasterfileNodeID mysql.ColumnString // (DC2Type:guid)
	UserID                     mysql.ColumnString // (DC2Type:guid)
	Details                    mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type OtherCommentsTable struct {
	otherCommentsTable

	NEW otherCommentsTable
}

// AS creates new OtherCommentsTable with assigned alias
func (a OtherCommentsTable) AS(alias string) *OtherCommentsTable {
	return newOtherCommentsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OtherCommentsTable with assigned schema name
func (a OtherCommentsTable) FromSchema(schemaName string) *OtherCommentsTable {
	return newOtherCommentsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OtherCommentsTable with assigned table prefix
func (a OtherCommentsTable) WithPrefix(prefix string) *OtherCommentsTable {
	return newOtherCommentsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OtherCommentsTable with assigned table suffix
func (a OtherCommentsTable) WithSuffix(suffix string) *OtherCommentsTable {
	return newOtherCommentsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOtherCommentsTable(schemaName, tableName, alias string) *OtherCommentsTable {
	return &OtherCommentsTable{
		otherCommentsTable: newOtherCommentsTableImpl(schemaName, tableName, alias),
		NEW:                newOtherCommentsTableImpl("", "new", ""),
	}
}

func newOtherCommentsTableImpl(schemaName, tableName, alias string) otherCommentsTable {
	var (
		IDColumn                         = mysql.StringColumn("id")
		EngagementMasterfileNodeIDColumn = mysql.StringColumn("engagement_masterfile_node_id")
		UserIDColumn                     = mysql.StringColumn("user_id")
		DetailsColumn                    = mysql.StringColumn("details")
		allColumns                       = mysql.ColumnList{IDColumn, EngagementMasterfileNodeIDColumn, UserIDColumn, DetailsColumn}
		mutableColumns                   = mysql.ColumnList{EngagementMasterfileNodeIDColumn, UserIDColumn, DetailsColumn}
	)

	return otherCommentsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                         IDColumn,
		EngagementMasterfileNodeID: EngagementMasterfileNodeIDColumn,
		UserID:                     UserIDColumn,
		Details:                    DetailsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
