//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var AnalyticalReviewFinal = newAnalyticalReviewFinalTable("atlas-blue", "analytical_review_final", "")

type analyticalReviewFinalTable struct {
	mysql.Table

	// Columns
	ID                                             mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID                                   mysql.ColumnString // (DC2Type:guid)
	ConfirmUsingAnalyticalReview                   mysql.ColumnBool
	ConfirmUsingAnalyticalReviewComment            mysql.ColumnString
	AnalyticalIdentifyFluctuations                 mysql.ColumnBool
	AnalyticalIdentifyFluctuationsDifferencesFound mysql.ColumnString
	DocumentInvestigationDifferences               mysql.ColumnString
	DidFindMisstatement                            mysql.ColumnBool
	DidFindMisstatementComment                     mysql.ColumnString
	IsValid                                        mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type AnalyticalReviewFinalTable struct {
	analyticalReviewFinalTable

	NEW analyticalReviewFinalTable
}

// AS creates new AnalyticalReviewFinalTable with assigned alias
func (a AnalyticalReviewFinalTable) AS(alias string) *AnalyticalReviewFinalTable {
	return newAnalyticalReviewFinalTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AnalyticalReviewFinalTable with assigned schema name
func (a AnalyticalReviewFinalTable) FromSchema(schemaName string) *AnalyticalReviewFinalTable {
	return newAnalyticalReviewFinalTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AnalyticalReviewFinalTable with assigned table prefix
func (a AnalyticalReviewFinalTable) WithPrefix(prefix string) *AnalyticalReviewFinalTable {
	return newAnalyticalReviewFinalTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AnalyticalReviewFinalTable with assigned table suffix
func (a AnalyticalReviewFinalTable) WithSuffix(suffix string) *AnalyticalReviewFinalTable {
	return newAnalyticalReviewFinalTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAnalyticalReviewFinalTable(schemaName, tableName, alias string) *AnalyticalReviewFinalTable {
	return &AnalyticalReviewFinalTable{
		analyticalReviewFinalTable: newAnalyticalReviewFinalTableImpl(schemaName, tableName, alias),
		NEW:                        newAnalyticalReviewFinalTableImpl("", "new", ""),
	}
}

func newAnalyticalReviewFinalTableImpl(schemaName, tableName, alias string) analyticalReviewFinalTable {
	var (
		IDColumn                                             = mysql.StringColumn("id")
		EngagementIDColumn                                   = mysql.StringColumn("engagement_id")
		ConfirmUsingAnalyticalReviewColumn                   = mysql.BoolColumn("confirm_using_analytical_review")
		ConfirmUsingAnalyticalReviewCommentColumn            = mysql.StringColumn("confirm_using_analytical_review_comment")
		AnalyticalIdentifyFluctuationsColumn                 = mysql.BoolColumn("analytical_identify_fluctuations")
		AnalyticalIdentifyFluctuationsDifferencesFoundColumn = mysql.StringColumn("analytical_identify_fluctuations_differences_found")
		DocumentInvestigationDifferencesColumn               = mysql.StringColumn("document_investigation_differences")
		DidFindMisstatementColumn                            = mysql.BoolColumn("did_find_misstatement")
		DidFindMisstatementCommentColumn                     = mysql.StringColumn("did_find_misstatement_comment")
		IsValidColumn                                        = mysql.BoolColumn("is_valid")
		allColumns                                           = mysql.ColumnList{IDColumn, EngagementIDColumn, ConfirmUsingAnalyticalReviewColumn, ConfirmUsingAnalyticalReviewCommentColumn, AnalyticalIdentifyFluctuationsColumn, AnalyticalIdentifyFluctuationsDifferencesFoundColumn, DocumentInvestigationDifferencesColumn, DidFindMisstatementColumn, DidFindMisstatementCommentColumn, IsValidColumn}
		mutableColumns                                       = mysql.ColumnList{EngagementIDColumn, ConfirmUsingAnalyticalReviewColumn, ConfirmUsingAnalyticalReviewCommentColumn, AnalyticalIdentifyFluctuationsColumn, AnalyticalIdentifyFluctuationsDifferencesFoundColumn, DocumentInvestigationDifferencesColumn, DidFindMisstatementColumn, DidFindMisstatementCommentColumn, IsValidColumn}
	)

	return analyticalReviewFinalTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                                  IDColumn,
		EngagementID:                        EngagementIDColumn,
		ConfirmUsingAnalyticalReview:        ConfirmUsingAnalyticalReviewColumn,
		ConfirmUsingAnalyticalReviewComment: ConfirmUsingAnalyticalReviewCommentColumn,
		AnalyticalIdentifyFluctuations:      AnalyticalIdentifyFluctuationsColumn,
		AnalyticalIdentifyFluctuationsDifferencesFound: AnalyticalIdentifyFluctuationsDifferencesFoundColumn,
		DocumentInvestigationDifferences:               DocumentInvestigationDifferencesColumn,
		DidFindMisstatement:                            DidFindMisstatementColumn,
		DidFindMisstatementComment:                     DidFindMisstatementCommentColumn,
		IsValid:                                        IsValidColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
