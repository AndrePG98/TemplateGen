//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var TaskDualTestingTasks = newTaskDualTestingTasksTable("atlas-blue", "task_dual_testing_tasks", "")

type taskDualTestingTasksTable struct {
	mysql.Table

	// Columns
	ID                             mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	TaskID                         mysql.ColumnString // (DC2Type:guid)
	Comment                        mysql.ColumnString
	CreatedAt                      mysql.ColumnDate   // (DC2Type:date_immutable)
	TaskDualTestingTaskProcedureID mysql.ColumnString // (DC2Type:guid)

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type TaskDualTestingTasksTable struct {
	taskDualTestingTasksTable

	NEW taskDualTestingTasksTable
}

// AS creates new TaskDualTestingTasksTable with assigned alias
func (a TaskDualTestingTasksTable) AS(alias string) *TaskDualTestingTasksTable {
	return newTaskDualTestingTasksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TaskDualTestingTasksTable with assigned schema name
func (a TaskDualTestingTasksTable) FromSchema(schemaName string) *TaskDualTestingTasksTable {
	return newTaskDualTestingTasksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TaskDualTestingTasksTable with assigned table prefix
func (a TaskDualTestingTasksTable) WithPrefix(prefix string) *TaskDualTestingTasksTable {
	return newTaskDualTestingTasksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TaskDualTestingTasksTable with assigned table suffix
func (a TaskDualTestingTasksTable) WithSuffix(suffix string) *TaskDualTestingTasksTable {
	return newTaskDualTestingTasksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTaskDualTestingTasksTable(schemaName, tableName, alias string) *TaskDualTestingTasksTable {
	return &TaskDualTestingTasksTable{
		taskDualTestingTasksTable: newTaskDualTestingTasksTableImpl(schemaName, tableName, alias),
		NEW:                       newTaskDualTestingTasksTableImpl("", "new", ""),
	}
}

func newTaskDualTestingTasksTableImpl(schemaName, tableName, alias string) taskDualTestingTasksTable {
	var (
		IDColumn                             = mysql.StringColumn("id")
		TaskIDColumn                         = mysql.StringColumn("task_id")
		CommentColumn                        = mysql.StringColumn("comment")
		CreatedAtColumn                      = mysql.DateColumn("created_at")
		TaskDualTestingTaskProcedureIDColumn = mysql.StringColumn("task_dual_testing_task_procedure_id")
		allColumns                           = mysql.ColumnList{IDColumn, TaskIDColumn, CommentColumn, CreatedAtColumn, TaskDualTestingTaskProcedureIDColumn}
		mutableColumns                       = mysql.ColumnList{TaskIDColumn, CommentColumn, CreatedAtColumn, TaskDualTestingTaskProcedureIDColumn}
	)

	return taskDualTestingTasksTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                             IDColumn,
		TaskID:                         TaskIDColumn,
		Comment:                        CommentColumn,
		CreatedAt:                      CreatedAtColumn,
		TaskDualTestingTaskProcedureID: TaskDualTestingTaskProcedureIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
