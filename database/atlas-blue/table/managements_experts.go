//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ManagementsExperts = newManagementsExpertsTable("atlas-blue", "managements_experts", "")

type managementsExpertsTable struct {
	mysql.Table

	// Columns
	ID                                   mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID                         mysql.ColumnString // (DC2Type:guid)
	ExpertName                           mysql.ColumnString
	FieldOfExpertise                     mysql.ColumnString
	NatureOfTheExpertsWork               mysql.ColumnString
	EvaluateCompetenceAndCapabilities    mysql.ColumnString
	KnowledgeOfAndExperience             mysql.ColumnString
	DoWeNeedToAppointOurOwnExpert        mysql.ColumnBool
	DoWeNeedToAppointOurOwnExpertComment mysql.ColumnString
	Status                               mysql.ColumnString
	Deleted                              mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ManagementsExpertsTable struct {
	managementsExpertsTable

	NEW managementsExpertsTable
}

// AS creates new ManagementsExpertsTable with assigned alias
func (a ManagementsExpertsTable) AS(alias string) *ManagementsExpertsTable {
	return newManagementsExpertsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ManagementsExpertsTable with assigned schema name
func (a ManagementsExpertsTable) FromSchema(schemaName string) *ManagementsExpertsTable {
	return newManagementsExpertsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ManagementsExpertsTable with assigned table prefix
func (a ManagementsExpertsTable) WithPrefix(prefix string) *ManagementsExpertsTable {
	return newManagementsExpertsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ManagementsExpertsTable with assigned table suffix
func (a ManagementsExpertsTable) WithSuffix(suffix string) *ManagementsExpertsTable {
	return newManagementsExpertsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newManagementsExpertsTable(schemaName, tableName, alias string) *ManagementsExpertsTable {
	return &ManagementsExpertsTable{
		managementsExpertsTable: newManagementsExpertsTableImpl(schemaName, tableName, alias),
		NEW:                     newManagementsExpertsTableImpl("", "new", ""),
	}
}

func newManagementsExpertsTableImpl(schemaName, tableName, alias string) managementsExpertsTable {
	var (
		IDColumn                                   = mysql.StringColumn("id")
		EngagementIDColumn                         = mysql.StringColumn("engagement_id")
		ExpertNameColumn                           = mysql.StringColumn("expert_name")
		FieldOfExpertiseColumn                     = mysql.StringColumn("field_of_expertise")
		NatureOfTheExpertsWorkColumn               = mysql.StringColumn("nature_of_the_experts_work")
		EvaluateCompetenceAndCapabilitiesColumn    = mysql.StringColumn("evaluate_competence_and_capabilities")
		KnowledgeOfAndExperienceColumn             = mysql.StringColumn("knowledge_of_and_experience")
		DoWeNeedToAppointOurOwnExpertColumn        = mysql.BoolColumn("do_we_need_to_appoint_our_own_expert")
		DoWeNeedToAppointOurOwnExpertCommentColumn = mysql.StringColumn("do_we_need_to_appoint_our_own_expert_comment")
		StatusColumn                               = mysql.StringColumn("status")
		DeletedColumn                              = mysql.IntegerColumn("deleted")
		allColumns                                 = mysql.ColumnList{IDColumn, EngagementIDColumn, ExpertNameColumn, FieldOfExpertiseColumn, NatureOfTheExpertsWorkColumn, EvaluateCompetenceAndCapabilitiesColumn, KnowledgeOfAndExperienceColumn, DoWeNeedToAppointOurOwnExpertColumn, DoWeNeedToAppointOurOwnExpertCommentColumn, StatusColumn, DeletedColumn}
		mutableColumns                             = mysql.ColumnList{EngagementIDColumn, ExpertNameColumn, FieldOfExpertiseColumn, NatureOfTheExpertsWorkColumn, EvaluateCompetenceAndCapabilitiesColumn, KnowledgeOfAndExperienceColumn, DoWeNeedToAppointOurOwnExpertColumn, DoWeNeedToAppointOurOwnExpertCommentColumn, StatusColumn, DeletedColumn}
	)

	return managementsExpertsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                                   IDColumn,
		EngagementID:                         EngagementIDColumn,
		ExpertName:                           ExpertNameColumn,
		FieldOfExpertise:                     FieldOfExpertiseColumn,
		NatureOfTheExpertsWork:               NatureOfTheExpertsWorkColumn,
		EvaluateCompetenceAndCapabilities:    EvaluateCompetenceAndCapabilitiesColumn,
		KnowledgeOfAndExperience:             KnowledgeOfAndExperienceColumn,
		DoWeNeedToAppointOurOwnExpert:        DoWeNeedToAppointOurOwnExpertColumn,
		DoWeNeedToAppointOurOwnExpertComment: DoWeNeedToAppointOurOwnExpertCommentColumn,
		Status:                               StatusColumn,
		Deleted:                              DeletedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
