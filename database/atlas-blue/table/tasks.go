//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Tasks = newTasksTable("atlas-blue", "tasks", "")

type tasksTable struct {
	mysql.Table

	// Columns
	ID                           mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	InitWorkProgrammeProcedureID mysql.ColumnString // (DC2Type:guid)
	PreparedBy                   mysql.ColumnString // (DC2Type:guid)
	ReviewedBy                   mysql.ColumnString // (DC2Type:guid)
	Name                         mysql.ColumnString
	WorkPerformed                mysql.ColumnString
	IsDeleted                    mysql.ColumnBool
	CreatedAt                    mysql.ColumnDate // (DC2Type:date_immutable)
	PreparedOn                   mysql.ColumnDate // (DC2Type:date_immutable)
	ReviewedOn                   mysql.ColumnDate // (DC2Type:date_immutable)
	Reference                    mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type TasksTable struct {
	tasksTable

	NEW tasksTable
}

// AS creates new TasksTable with assigned alias
func (a TasksTable) AS(alias string) *TasksTable {
	return newTasksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TasksTable with assigned schema name
func (a TasksTable) FromSchema(schemaName string) *TasksTable {
	return newTasksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TasksTable with assigned table prefix
func (a TasksTable) WithPrefix(prefix string) *TasksTable {
	return newTasksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TasksTable with assigned table suffix
func (a TasksTable) WithSuffix(suffix string) *TasksTable {
	return newTasksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTasksTable(schemaName, tableName, alias string) *TasksTable {
	return &TasksTable{
		tasksTable: newTasksTableImpl(schemaName, tableName, alias),
		NEW:        newTasksTableImpl("", "new", ""),
	}
}

func newTasksTableImpl(schemaName, tableName, alias string) tasksTable {
	var (
		IDColumn                           = mysql.StringColumn("id")
		InitWorkProgrammeProcedureIDColumn = mysql.StringColumn("init_work_programme_procedure_id")
		PreparedByColumn                   = mysql.StringColumn("prepared_by")
		ReviewedByColumn                   = mysql.StringColumn("reviewed_by")
		NameColumn                         = mysql.StringColumn("name")
		WorkPerformedColumn                = mysql.StringColumn("work_performed")
		IsDeletedColumn                    = mysql.BoolColumn("is_deleted")
		CreatedAtColumn                    = mysql.DateColumn("created_at")
		PreparedOnColumn                   = mysql.DateColumn("prepared_on")
		ReviewedOnColumn                   = mysql.DateColumn("reviewed_on")
		ReferenceColumn                    = mysql.StringColumn("reference")
		allColumns                         = mysql.ColumnList{IDColumn, InitWorkProgrammeProcedureIDColumn, PreparedByColumn, ReviewedByColumn, NameColumn, WorkPerformedColumn, IsDeletedColumn, CreatedAtColumn, PreparedOnColumn, ReviewedOnColumn, ReferenceColumn}
		mutableColumns                     = mysql.ColumnList{InitWorkProgrammeProcedureIDColumn, PreparedByColumn, ReviewedByColumn, NameColumn, WorkPerformedColumn, IsDeletedColumn, CreatedAtColumn, PreparedOnColumn, ReviewedOnColumn, ReferenceColumn}
	)

	return tasksTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                           IDColumn,
		InitWorkProgrammeProcedureID: InitWorkProgrammeProcedureIDColumn,
		PreparedBy:                   PreparedByColumn,
		ReviewedBy:                   ReviewedByColumn,
		Name:                         NameColumn,
		WorkPerformed:                WorkPerformedColumn,
		IsDeleted:                    IsDeletedColumn,
		CreatedAt:                    CreatedAtColumn,
		PreparedOn:                   PreparedOnColumn,
		ReviewedOn:                   ReviewedOnColumn,
		Reference:                    ReferenceColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
