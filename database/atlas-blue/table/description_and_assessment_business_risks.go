//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var DescriptionAndAssessmentBusinessRisks = newDescriptionAndAssessmentBusinessRisksTable("atlas-blue", "description_and_assessment_business_risks", "")

type descriptionAndAssessmentBusinessRisksTable struct {
	mysql.Table

	// Columns
	ID                         mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	DescriptionAndAssessmentID mysql.ColumnString // (DC2Type:guid)
	BusinessRiskID             mysql.ColumnString // (DC2Type:guid)

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type DescriptionAndAssessmentBusinessRisksTable struct {
	descriptionAndAssessmentBusinessRisksTable

	NEW descriptionAndAssessmentBusinessRisksTable
}

// AS creates new DescriptionAndAssessmentBusinessRisksTable with assigned alias
func (a DescriptionAndAssessmentBusinessRisksTable) AS(alias string) *DescriptionAndAssessmentBusinessRisksTable {
	return newDescriptionAndAssessmentBusinessRisksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DescriptionAndAssessmentBusinessRisksTable with assigned schema name
func (a DescriptionAndAssessmentBusinessRisksTable) FromSchema(schemaName string) *DescriptionAndAssessmentBusinessRisksTable {
	return newDescriptionAndAssessmentBusinessRisksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DescriptionAndAssessmentBusinessRisksTable with assigned table prefix
func (a DescriptionAndAssessmentBusinessRisksTable) WithPrefix(prefix string) *DescriptionAndAssessmentBusinessRisksTable {
	return newDescriptionAndAssessmentBusinessRisksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DescriptionAndAssessmentBusinessRisksTable with assigned table suffix
func (a DescriptionAndAssessmentBusinessRisksTable) WithSuffix(suffix string) *DescriptionAndAssessmentBusinessRisksTable {
	return newDescriptionAndAssessmentBusinessRisksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDescriptionAndAssessmentBusinessRisksTable(schemaName, tableName, alias string) *DescriptionAndAssessmentBusinessRisksTable {
	return &DescriptionAndAssessmentBusinessRisksTable{
		descriptionAndAssessmentBusinessRisksTable: newDescriptionAndAssessmentBusinessRisksTableImpl(schemaName, tableName, alias),
		NEW: newDescriptionAndAssessmentBusinessRisksTableImpl("", "new", ""),
	}
}

func newDescriptionAndAssessmentBusinessRisksTableImpl(schemaName, tableName, alias string) descriptionAndAssessmentBusinessRisksTable {
	var (
		IDColumn                         = mysql.StringColumn("id")
		DescriptionAndAssessmentIDColumn = mysql.StringColumn("description_and_assessment_id")
		BusinessRiskIDColumn             = mysql.StringColumn("business_risk_id")
		allColumns                       = mysql.ColumnList{IDColumn, DescriptionAndAssessmentIDColumn, BusinessRiskIDColumn}
		mutableColumns                   = mysql.ColumnList{DescriptionAndAssessmentIDColumn, BusinessRiskIDColumn}
	)

	return descriptionAndAssessmentBusinessRisksTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                         IDColumn,
		DescriptionAndAssessmentID: DescriptionAndAssessmentIDColumn,
		BusinessRiskID:             BusinessRiskIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
