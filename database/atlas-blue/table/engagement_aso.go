//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var EngagementAso = newEngagementAsoTable("atlas-blue", "engagement_aso", "")

type engagementAsoTable struct {
	mysql.Table

	// Columns
	ID                            mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID                  mysql.ColumnString // (DC2Type:guid)
	CotabComment                  mysql.ColumnString
	KbpComment                    mysql.ColumnString
	FslrComment                   mysql.ColumnString
	ItApplicationComment          mysql.ColumnString
	GeneralAuditProceduresComment mysql.ColumnString
	IsValid                       mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type EngagementAsoTable struct {
	engagementAsoTable

	NEW engagementAsoTable
}

// AS creates new EngagementAsoTable with assigned alias
func (a EngagementAsoTable) AS(alias string) *EngagementAsoTable {
	return newEngagementAsoTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EngagementAsoTable with assigned schema name
func (a EngagementAsoTable) FromSchema(schemaName string) *EngagementAsoTable {
	return newEngagementAsoTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EngagementAsoTable with assigned table prefix
func (a EngagementAsoTable) WithPrefix(prefix string) *EngagementAsoTable {
	return newEngagementAsoTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EngagementAsoTable with assigned table suffix
func (a EngagementAsoTable) WithSuffix(suffix string) *EngagementAsoTable {
	return newEngagementAsoTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEngagementAsoTable(schemaName, tableName, alias string) *EngagementAsoTable {
	return &EngagementAsoTable{
		engagementAsoTable: newEngagementAsoTableImpl(schemaName, tableName, alias),
		NEW:                newEngagementAsoTableImpl("", "new", ""),
	}
}

func newEngagementAsoTableImpl(schemaName, tableName, alias string) engagementAsoTable {
	var (
		IDColumn                            = mysql.StringColumn("id")
		EngagementIDColumn                  = mysql.StringColumn("engagement_id")
		CotabCommentColumn                  = mysql.StringColumn("cotab_comment")
		KbpCommentColumn                    = mysql.StringColumn("kbp_comment")
		FslrCommentColumn                   = mysql.StringColumn("fslr_comment")
		ItApplicationCommentColumn          = mysql.StringColumn("it_application_comment")
		GeneralAuditProceduresCommentColumn = mysql.StringColumn("general_audit_procedures_comment")
		IsValidColumn                       = mysql.BoolColumn("is_valid")
		allColumns                          = mysql.ColumnList{IDColumn, EngagementIDColumn, CotabCommentColumn, KbpCommentColumn, FslrCommentColumn, ItApplicationCommentColumn, GeneralAuditProceduresCommentColumn, IsValidColumn}
		mutableColumns                      = mysql.ColumnList{EngagementIDColumn, CotabCommentColumn, KbpCommentColumn, FslrCommentColumn, ItApplicationCommentColumn, GeneralAuditProceduresCommentColumn, IsValidColumn}
	)

	return engagementAsoTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                            IDColumn,
		EngagementID:                  EngagementIDColumn,
		CotabComment:                  CotabCommentColumn,
		KbpComment:                    KbpCommentColumn,
		FslrComment:                   FslrCommentColumn,
		ItApplicationComment:          ItApplicationCommentColumn,
		GeneralAuditProceduresComment: GeneralAuditProceduresCommentColumn,
		IsValid:                       IsValidColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
