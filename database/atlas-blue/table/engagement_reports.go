//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var EngagementReports = newEngagementReportsTable("atlas-blue", "engagement_reports", "")

type engagementReportsTable struct {
	mysql.Table

	// Columns
	ID            mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	Name          mysql.ColumnString
	Type          mysql.ColumnString
	Description   mysql.ColumnString
	LastGenerated mysql.ColumnDate

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type EngagementReportsTable struct {
	engagementReportsTable

	NEW engagementReportsTable
}

// AS creates new EngagementReportsTable with assigned alias
func (a EngagementReportsTable) AS(alias string) *EngagementReportsTable {
	return newEngagementReportsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EngagementReportsTable with assigned schema name
func (a EngagementReportsTable) FromSchema(schemaName string) *EngagementReportsTable {
	return newEngagementReportsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EngagementReportsTable with assigned table prefix
func (a EngagementReportsTable) WithPrefix(prefix string) *EngagementReportsTable {
	return newEngagementReportsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EngagementReportsTable with assigned table suffix
func (a EngagementReportsTable) WithSuffix(suffix string) *EngagementReportsTable {
	return newEngagementReportsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEngagementReportsTable(schemaName, tableName, alias string) *EngagementReportsTable {
	return &EngagementReportsTable{
		engagementReportsTable: newEngagementReportsTableImpl(schemaName, tableName, alias),
		NEW:                    newEngagementReportsTableImpl("", "new", ""),
	}
}

func newEngagementReportsTableImpl(schemaName, tableName, alias string) engagementReportsTable {
	var (
		IDColumn            = mysql.StringColumn("id")
		NameColumn          = mysql.StringColumn("name")
		TypeColumn          = mysql.StringColumn("type")
		DescriptionColumn   = mysql.StringColumn("description")
		LastGeneratedColumn = mysql.DateColumn("last_generated")
		allColumns          = mysql.ColumnList{IDColumn, NameColumn, TypeColumn, DescriptionColumn, LastGeneratedColumn}
		mutableColumns      = mysql.ColumnList{NameColumn, TypeColumn, DescriptionColumn, LastGeneratedColumn}
	)

	return engagementReportsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		Name:          NameColumn,
		Type:          TypeColumn,
		Description:   DescriptionColumn,
		LastGenerated: LastGeneratedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
