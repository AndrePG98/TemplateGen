//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var IndependenceConfirmations = newIndependenceConfirmationsTable("atlas-blue", "independence_confirmations", "")

type independenceConfirmationsTable struct {
	mysql.Table

	// Columns
	ID                         mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID               mysql.ColumnString // (DC2Type:guid)
	HasGiftsOrHospitality      mysql.ColumnBool
	GiftsOrHospitalityDetails  mysql.ColumnString
	HasFinancialInterests      mysql.ColumnBool
	FinancialInterestsDetails  mysql.ColumnString
	HasSafeguards              mysql.ColumnBool
	SafeguardsDetails          mysql.ColumnString
	IsIndependent              mysql.ColumnBool
	IndependenceConsiderations mysql.ColumnString
	CompletionDate             mysql.ColumnDate // (DC2Type:date_immutable)
	AmendmentDate              mysql.ColumnDate // (DC2Type:date_immutable)
	Status                     mysql.ColumnBool
	EngagementTeamMemberID     mysql.ColumnString // (DC2Type:guid)
	Hidden                     mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type IndependenceConfirmationsTable struct {
	independenceConfirmationsTable

	NEW independenceConfirmationsTable
}

// AS creates new IndependenceConfirmationsTable with assigned alias
func (a IndependenceConfirmationsTable) AS(alias string) *IndependenceConfirmationsTable {
	return newIndependenceConfirmationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new IndependenceConfirmationsTable with assigned schema name
func (a IndependenceConfirmationsTable) FromSchema(schemaName string) *IndependenceConfirmationsTable {
	return newIndependenceConfirmationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new IndependenceConfirmationsTable with assigned table prefix
func (a IndependenceConfirmationsTable) WithPrefix(prefix string) *IndependenceConfirmationsTable {
	return newIndependenceConfirmationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new IndependenceConfirmationsTable with assigned table suffix
func (a IndependenceConfirmationsTable) WithSuffix(suffix string) *IndependenceConfirmationsTable {
	return newIndependenceConfirmationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newIndependenceConfirmationsTable(schemaName, tableName, alias string) *IndependenceConfirmationsTable {
	return &IndependenceConfirmationsTable{
		independenceConfirmationsTable: newIndependenceConfirmationsTableImpl(schemaName, tableName, alias),
		NEW:                            newIndependenceConfirmationsTableImpl("", "new", ""),
	}
}

func newIndependenceConfirmationsTableImpl(schemaName, tableName, alias string) independenceConfirmationsTable {
	var (
		IDColumn                         = mysql.StringColumn("id")
		EngagementIDColumn               = mysql.StringColumn("engagement_id")
		HasGiftsOrHospitalityColumn      = mysql.BoolColumn("has_gifts_or_hospitality")
		GiftsOrHospitalityDetailsColumn  = mysql.StringColumn("gifts_or_hospitality_details")
		HasFinancialInterestsColumn      = mysql.BoolColumn("has_financial_interests")
		FinancialInterestsDetailsColumn  = mysql.StringColumn("financial_interests_details")
		HasSafeguardsColumn              = mysql.BoolColumn("has_safeguards")
		SafeguardsDetailsColumn          = mysql.StringColumn("safeguards_details")
		IsIndependentColumn              = mysql.BoolColumn("is_independent")
		IndependenceConsiderationsColumn = mysql.StringColumn("independence_considerations")
		CompletionDateColumn             = mysql.DateColumn("completion_date")
		AmendmentDateColumn              = mysql.DateColumn("amendment_date")
		StatusColumn                     = mysql.BoolColumn("status")
		EngagementTeamMemberIDColumn     = mysql.StringColumn("engagement_team_member_id")
		HiddenColumn                     = mysql.BoolColumn("hidden")
		allColumns                       = mysql.ColumnList{IDColumn, EngagementIDColumn, HasGiftsOrHospitalityColumn, GiftsOrHospitalityDetailsColumn, HasFinancialInterestsColumn, FinancialInterestsDetailsColumn, HasSafeguardsColumn, SafeguardsDetailsColumn, IsIndependentColumn, IndependenceConsiderationsColumn, CompletionDateColumn, AmendmentDateColumn, StatusColumn, EngagementTeamMemberIDColumn, HiddenColumn}
		mutableColumns                   = mysql.ColumnList{EngagementIDColumn, HasGiftsOrHospitalityColumn, GiftsOrHospitalityDetailsColumn, HasFinancialInterestsColumn, FinancialInterestsDetailsColumn, HasSafeguardsColumn, SafeguardsDetailsColumn, IsIndependentColumn, IndependenceConsiderationsColumn, CompletionDateColumn, AmendmentDateColumn, StatusColumn, EngagementTeamMemberIDColumn, HiddenColumn}
	)

	return independenceConfirmationsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                         IDColumn,
		EngagementID:               EngagementIDColumn,
		HasGiftsOrHospitality:      HasGiftsOrHospitalityColumn,
		GiftsOrHospitalityDetails:  GiftsOrHospitalityDetailsColumn,
		HasFinancialInterests:      HasFinancialInterestsColumn,
		FinancialInterestsDetails:  FinancialInterestsDetailsColumn,
		HasSafeguards:              HasSafeguardsColumn,
		SafeguardsDetails:          SafeguardsDetailsColumn,
		IsIndependent:              IsIndependentColumn,
		IndependenceConsiderations: IndependenceConsiderationsColumn,
		CompletionDate:             CompletionDateColumn,
		AmendmentDate:              AmendmentDateColumn,
		Status:                     StatusColumn,
		EngagementTeamMemberID:     EngagementTeamMemberIDColumn,
		Hidden:                     HiddenColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
