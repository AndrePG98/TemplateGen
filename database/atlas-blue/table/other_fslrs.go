//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var OtherFslrs = newOtherFslrsTable("atlas-blue", "other_fslrs", "")

type otherFslrsTable struct {
	mysql.Table

	// Columns
	ID                                              mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID                                    mysql.ColumnString // (DC2Type:guid)
	Name                                            mysql.ColumnString
	EvaluateNatureAndExtentOfPervasiveEffectOnFs    mysql.ColumnString
	DoesFsRiskAffectAssessmentRisksAtAssertionLevel mysql.ColumnBool
	DocumentationOfHowFslrAffectsAssessmentOfRisks  mysql.ColumnString
	IsThisRiskOfMaterialMisstatementDueToFraud      mysql.ColumnBool
	OtherFslrAssessment                             mysql.ColumnString
	CommunicationToCountryRiskManager               mysql.ColumnBool
	IsCreated                                       mysql.ColumnTimestamp
	IsDeleted                                       mysql.ColumnBool
	AsoCr                                           mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type OtherFslrsTable struct {
	otherFslrsTable

	NEW otherFslrsTable
}

// AS creates new OtherFslrsTable with assigned alias
func (a OtherFslrsTable) AS(alias string) *OtherFslrsTable {
	return newOtherFslrsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OtherFslrsTable with assigned schema name
func (a OtherFslrsTable) FromSchema(schemaName string) *OtherFslrsTable {
	return newOtherFslrsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OtherFslrsTable with assigned table prefix
func (a OtherFslrsTable) WithPrefix(prefix string) *OtherFslrsTable {
	return newOtherFslrsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OtherFslrsTable with assigned table suffix
func (a OtherFslrsTable) WithSuffix(suffix string) *OtherFslrsTable {
	return newOtherFslrsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOtherFslrsTable(schemaName, tableName, alias string) *OtherFslrsTable {
	return &OtherFslrsTable{
		otherFslrsTable: newOtherFslrsTableImpl(schemaName, tableName, alias),
		NEW:             newOtherFslrsTableImpl("", "new", ""),
	}
}

func newOtherFslrsTableImpl(schemaName, tableName, alias string) otherFslrsTable {
	var (
		IDColumn                                              = mysql.StringColumn("id")
		EngagementIDColumn                                    = mysql.StringColumn("engagement_id")
		NameColumn                                            = mysql.StringColumn("name")
		EvaluateNatureAndExtentOfPervasiveEffectOnFsColumn    = mysql.StringColumn("evaluate_nature_and_extent_of_pervasive_effect_on_fs")
		DoesFsRiskAffectAssessmentRisksAtAssertionLevelColumn = mysql.BoolColumn("does_fs_risk_affect_assessment_risks_at_assertion_level")
		DocumentationOfHowFslrAffectsAssessmentOfRisksColumn  = mysql.StringColumn("documentation_of_how_fslr_affects_assessment_of_risks")
		IsThisRiskOfMaterialMisstatementDueToFraudColumn      = mysql.BoolColumn("is_this_risk_of_material_misstatement_due_to_fraud")
		OtherFslrAssessmentColumn                             = mysql.StringColumn("other_fslr_assessment")
		CommunicationToCountryRiskManagerColumn               = mysql.BoolColumn("communication_to_country_risk_manager")
		IsCreatedColumn                                       = mysql.TimestampColumn("is_created")
		IsDeletedColumn                                       = mysql.BoolColumn("is_deleted")
		AsoCrColumn                                           = mysql.StringColumn("aso_cr")
		allColumns                                            = mysql.ColumnList{IDColumn, EngagementIDColumn, NameColumn, EvaluateNatureAndExtentOfPervasiveEffectOnFsColumn, DoesFsRiskAffectAssessmentRisksAtAssertionLevelColumn, DocumentationOfHowFslrAffectsAssessmentOfRisksColumn, IsThisRiskOfMaterialMisstatementDueToFraudColumn, OtherFslrAssessmentColumn, CommunicationToCountryRiskManagerColumn, IsCreatedColumn, IsDeletedColumn, AsoCrColumn}
		mutableColumns                                        = mysql.ColumnList{EngagementIDColumn, NameColumn, EvaluateNatureAndExtentOfPervasiveEffectOnFsColumn, DoesFsRiskAffectAssessmentRisksAtAssertionLevelColumn, DocumentationOfHowFslrAffectsAssessmentOfRisksColumn, IsThisRiskOfMaterialMisstatementDueToFraudColumn, OtherFslrAssessmentColumn, CommunicationToCountryRiskManagerColumn, IsCreatedColumn, IsDeletedColumn, AsoCrColumn}
	)

	return otherFslrsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		EngagementID: EngagementIDColumn,
		Name:         NameColumn,
		EvaluateNatureAndExtentOfPervasiveEffectOnFs:    EvaluateNatureAndExtentOfPervasiveEffectOnFsColumn,
		DoesFsRiskAffectAssessmentRisksAtAssertionLevel: DoesFsRiskAffectAssessmentRisksAtAssertionLevelColumn,
		DocumentationOfHowFslrAffectsAssessmentOfRisks:  DocumentationOfHowFslrAffectsAssessmentOfRisksColumn,
		IsThisRiskOfMaterialMisstatementDueToFraud:      IsThisRiskOfMaterialMisstatementDueToFraudColumn,
		OtherFslrAssessment:                             OtherFslrAssessmentColumn,
		CommunicationToCountryRiskManager:               CommunicationToCountryRiskManagerColumn,
		IsCreated:                                       IsCreatedColumn,
		IsDeleted:                                       IsDeletedColumn,
		AsoCr:                                           AsoCrColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
