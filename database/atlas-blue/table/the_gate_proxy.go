//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var TheGateProxy = newTheGateProxyTable("atlas-blue", "the_gate_proxy", "")

type theGateProxyTable struct {
	mysql.Table

	// Columns
	ID          mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	Value       mysql.ColumnString // (DC2Type:json)
	ReceiptDate mysql.ColumnTimestamp
	Headers     mysql.ColumnString // (DC2Type:array)
	Content     mysql.ColumnString // (DC2Type:array)

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type TheGateProxyTable struct {
	theGateProxyTable

	NEW theGateProxyTable
}

// AS creates new TheGateProxyTable with assigned alias
func (a TheGateProxyTable) AS(alias string) *TheGateProxyTable {
	return newTheGateProxyTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TheGateProxyTable with assigned schema name
func (a TheGateProxyTable) FromSchema(schemaName string) *TheGateProxyTable {
	return newTheGateProxyTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TheGateProxyTable with assigned table prefix
func (a TheGateProxyTable) WithPrefix(prefix string) *TheGateProxyTable {
	return newTheGateProxyTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TheGateProxyTable with assigned table suffix
func (a TheGateProxyTable) WithSuffix(suffix string) *TheGateProxyTable {
	return newTheGateProxyTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTheGateProxyTable(schemaName, tableName, alias string) *TheGateProxyTable {
	return &TheGateProxyTable{
		theGateProxyTable: newTheGateProxyTableImpl(schemaName, tableName, alias),
		NEW:               newTheGateProxyTableImpl("", "new", ""),
	}
}

func newTheGateProxyTableImpl(schemaName, tableName, alias string) theGateProxyTable {
	var (
		IDColumn          = mysql.StringColumn("id")
		ValueColumn       = mysql.StringColumn("value")
		ReceiptDateColumn = mysql.TimestampColumn("receipt_date")
		HeadersColumn     = mysql.StringColumn("headers")
		ContentColumn     = mysql.StringColumn("content")
		allColumns        = mysql.ColumnList{IDColumn, ValueColumn, ReceiptDateColumn, HeadersColumn, ContentColumn}
		mutableColumns    = mysql.ColumnList{ValueColumn, ReceiptDateColumn, HeadersColumn, ContentColumn}
	)

	return theGateProxyTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Value:       ValueColumn,
		ReceiptDate: ReceiptDateColumn,
		Headers:     HeadersColumn,
		Content:     ContentColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
