//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var TasksTbAccounts = newTasksTbAccountsTable("atlas-blue", "tasks_tb_accounts", "")

type tasksTbAccountsTable struct {
	mysql.Table

	// Columns
	ID          mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	TbAccountID mysql.ColumnString // (DC2Type:guid)
	TaskID      mysql.ColumnString // (DC2Type:guid)

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type TasksTbAccountsTable struct {
	tasksTbAccountsTable

	NEW tasksTbAccountsTable
}

// AS creates new TasksTbAccountsTable with assigned alias
func (a TasksTbAccountsTable) AS(alias string) *TasksTbAccountsTable {
	return newTasksTbAccountsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TasksTbAccountsTable with assigned schema name
func (a TasksTbAccountsTable) FromSchema(schemaName string) *TasksTbAccountsTable {
	return newTasksTbAccountsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TasksTbAccountsTable with assigned table prefix
func (a TasksTbAccountsTable) WithPrefix(prefix string) *TasksTbAccountsTable {
	return newTasksTbAccountsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TasksTbAccountsTable with assigned table suffix
func (a TasksTbAccountsTable) WithSuffix(suffix string) *TasksTbAccountsTable {
	return newTasksTbAccountsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTasksTbAccountsTable(schemaName, tableName, alias string) *TasksTbAccountsTable {
	return &TasksTbAccountsTable{
		tasksTbAccountsTable: newTasksTbAccountsTableImpl(schemaName, tableName, alias),
		NEW:                  newTasksTbAccountsTableImpl("", "new", ""),
	}
}

func newTasksTbAccountsTableImpl(schemaName, tableName, alias string) tasksTbAccountsTable {
	var (
		IDColumn          = mysql.StringColumn("id")
		TbAccountIDColumn = mysql.StringColumn("tb_account_id")
		TaskIDColumn      = mysql.StringColumn("task_id")
		allColumns        = mysql.ColumnList{IDColumn, TbAccountIDColumn, TaskIDColumn}
		mutableColumns    = mysql.ColumnList{TbAccountIDColumn, TaskIDColumn}
	)

	return tasksTbAccountsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		TbAccountID: TbAccountIDColumn,
		TaskID:      TaskIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
