//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var EntitiesAuditTrails = newEntitiesAuditTrailsTable("atlas-blue", "entities_audit_trails", "")

type entitiesAuditTrailsTable struct {
	mysql.Table

	// Columns
	ID             mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EntityID       mysql.ColumnString // (DC2Type:guid)
	UserID         mysql.ColumnString // (DC2Type:guid)
	OccurredAt     mysql.ColumnTimestamp
	Tab            mysql.ColumnString
	Section        mysql.ColumnString
	Field          mysql.ColumnString
	Action         mysql.ColumnString
	OtherReference mysql.ColumnString
	PreviousValue  mysql.ColumnString
	NewValue       mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type EntitiesAuditTrailsTable struct {
	entitiesAuditTrailsTable

	NEW entitiesAuditTrailsTable
}

// AS creates new EntitiesAuditTrailsTable with assigned alias
func (a EntitiesAuditTrailsTable) AS(alias string) *EntitiesAuditTrailsTable {
	return newEntitiesAuditTrailsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EntitiesAuditTrailsTable with assigned schema name
func (a EntitiesAuditTrailsTable) FromSchema(schemaName string) *EntitiesAuditTrailsTable {
	return newEntitiesAuditTrailsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EntitiesAuditTrailsTable with assigned table prefix
func (a EntitiesAuditTrailsTable) WithPrefix(prefix string) *EntitiesAuditTrailsTable {
	return newEntitiesAuditTrailsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EntitiesAuditTrailsTable with assigned table suffix
func (a EntitiesAuditTrailsTable) WithSuffix(suffix string) *EntitiesAuditTrailsTable {
	return newEntitiesAuditTrailsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEntitiesAuditTrailsTable(schemaName, tableName, alias string) *EntitiesAuditTrailsTable {
	return &EntitiesAuditTrailsTable{
		entitiesAuditTrailsTable: newEntitiesAuditTrailsTableImpl(schemaName, tableName, alias),
		NEW:                      newEntitiesAuditTrailsTableImpl("", "new", ""),
	}
}

func newEntitiesAuditTrailsTableImpl(schemaName, tableName, alias string) entitiesAuditTrailsTable {
	var (
		IDColumn             = mysql.StringColumn("id")
		EntityIDColumn       = mysql.StringColumn("entity_id")
		UserIDColumn         = mysql.StringColumn("user_id")
		OccurredAtColumn     = mysql.TimestampColumn("occurred_at")
		TabColumn            = mysql.StringColumn("tab")
		SectionColumn        = mysql.StringColumn("section")
		FieldColumn          = mysql.StringColumn("field")
		ActionColumn         = mysql.StringColumn("action")
		OtherReferenceColumn = mysql.StringColumn("other_reference")
		PreviousValueColumn  = mysql.StringColumn("previous_value")
		NewValueColumn       = mysql.StringColumn("new_value")
		allColumns           = mysql.ColumnList{IDColumn, EntityIDColumn, UserIDColumn, OccurredAtColumn, TabColumn, SectionColumn, FieldColumn, ActionColumn, OtherReferenceColumn, PreviousValueColumn, NewValueColumn}
		mutableColumns       = mysql.ColumnList{EntityIDColumn, UserIDColumn, OccurredAtColumn, TabColumn, SectionColumn, FieldColumn, ActionColumn, OtherReferenceColumn, PreviousValueColumn, NewValueColumn}
	)

	return entitiesAuditTrailsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		EntityID:       EntityIDColumn,
		UserID:         UserIDColumn,
		OccurredAt:     OccurredAtColumn,
		Tab:            TabColumn,
		Section:        SectionColumn,
		Field:          FieldColumn,
		Action:         ActionColumn,
		OtherReference: OtherReferenceColumn,
		PreviousValue:  PreviousValueColumn,
		NewValue:       NewValueColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
