//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var TaskProcedures = newTaskProceduresTable("atlas-blue", "task_procedures", "")

type taskProceduresTable struct {
	mysql.Table

	// Columns
	ID                                     mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	TaskID                                 mysql.ColumnString // (DC2Type:guid)
	WorkProgrammeProcedureID               mysql.ColumnString // (DC2Type:guid)
	Conclusion                             mysql.ColumnString
	MisstatementIdentified                 mysql.ColumnBool
	Comment                                mysql.ColumnString
	DesignConclusion                       mysql.ColumnString
	CommentOnDesign                        mysql.ColumnString
	ImplementationConclusion               mysql.ColumnString
	CommentOnImplementation                mysql.ColumnString
	OverallDAndIConclusion                 mysql.ColumnString
	OperatingEffectiveness                 mysql.ColumnString
	CommentOnEffectiveness                 mysql.ColumnString
	MitigatingControl                      mysql.ColumnString
	FinalConclusionsAfterMitigatingControl mysql.ColumnString
	IsForDualPurposeTesting                mysql.ColumnBool
	CreatedAt                              mysql.ColumnDate // (DC2Type:date_immutable)

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type TaskProceduresTable struct {
	taskProceduresTable

	NEW taskProceduresTable
}

// AS creates new TaskProceduresTable with assigned alias
func (a TaskProceduresTable) AS(alias string) *TaskProceduresTable {
	return newTaskProceduresTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TaskProceduresTable with assigned schema name
func (a TaskProceduresTable) FromSchema(schemaName string) *TaskProceduresTable {
	return newTaskProceduresTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TaskProceduresTable with assigned table prefix
func (a TaskProceduresTable) WithPrefix(prefix string) *TaskProceduresTable {
	return newTaskProceduresTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TaskProceduresTable with assigned table suffix
func (a TaskProceduresTable) WithSuffix(suffix string) *TaskProceduresTable {
	return newTaskProceduresTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTaskProceduresTable(schemaName, tableName, alias string) *TaskProceduresTable {
	return &TaskProceduresTable{
		taskProceduresTable: newTaskProceduresTableImpl(schemaName, tableName, alias),
		NEW:                 newTaskProceduresTableImpl("", "new", ""),
	}
}

func newTaskProceduresTableImpl(schemaName, tableName, alias string) taskProceduresTable {
	var (
		IDColumn                                     = mysql.StringColumn("id")
		TaskIDColumn                                 = mysql.StringColumn("task_id")
		WorkProgrammeProcedureIDColumn               = mysql.StringColumn("work_programme_procedure_id")
		ConclusionColumn                             = mysql.StringColumn("conclusion")
		MisstatementIdentifiedColumn                 = mysql.BoolColumn("misstatement_identified")
		CommentColumn                                = mysql.StringColumn("comment")
		DesignConclusionColumn                       = mysql.StringColumn("design_conclusion")
		CommentOnDesignColumn                        = mysql.StringColumn("comment_on_design")
		ImplementationConclusionColumn               = mysql.StringColumn("implementation_conclusion")
		CommentOnImplementationColumn                = mysql.StringColumn("comment_on_implementation")
		OverallDAndIConclusionColumn                 = mysql.StringColumn("overall_d_and_i_conclusion")
		OperatingEffectivenessColumn                 = mysql.StringColumn("operating_effectiveness")
		CommentOnEffectivenessColumn                 = mysql.StringColumn("comment_on_effectiveness")
		MitigatingControlColumn                      = mysql.StringColumn("mitigating_control")
		FinalConclusionsAfterMitigatingControlColumn = mysql.StringColumn("final_conclusions_after_mitigating_control")
		IsForDualPurposeTestingColumn                = mysql.BoolColumn("is_for_dual_purpose_testing")
		CreatedAtColumn                              = mysql.DateColumn("created_at")
		allColumns                                   = mysql.ColumnList{IDColumn, TaskIDColumn, WorkProgrammeProcedureIDColumn, ConclusionColumn, MisstatementIdentifiedColumn, CommentColumn, DesignConclusionColumn, CommentOnDesignColumn, ImplementationConclusionColumn, CommentOnImplementationColumn, OverallDAndIConclusionColumn, OperatingEffectivenessColumn, CommentOnEffectivenessColumn, MitigatingControlColumn, FinalConclusionsAfterMitigatingControlColumn, IsForDualPurposeTestingColumn, CreatedAtColumn}
		mutableColumns                               = mysql.ColumnList{TaskIDColumn, WorkProgrammeProcedureIDColumn, ConclusionColumn, MisstatementIdentifiedColumn, CommentColumn, DesignConclusionColumn, CommentOnDesignColumn, ImplementationConclusionColumn, CommentOnImplementationColumn, OverallDAndIConclusionColumn, OperatingEffectivenessColumn, CommentOnEffectivenessColumn, MitigatingControlColumn, FinalConclusionsAfterMitigatingControlColumn, IsForDualPurposeTestingColumn, CreatedAtColumn}
	)

	return taskProceduresTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                                     IDColumn,
		TaskID:                                 TaskIDColumn,
		WorkProgrammeProcedureID:               WorkProgrammeProcedureIDColumn,
		Conclusion:                             ConclusionColumn,
		MisstatementIdentified:                 MisstatementIdentifiedColumn,
		Comment:                                CommentColumn,
		DesignConclusion:                       DesignConclusionColumn,
		CommentOnDesign:                        CommentOnDesignColumn,
		ImplementationConclusion:               ImplementationConclusionColumn,
		CommentOnImplementation:                CommentOnImplementationColumn,
		OverallDAndIConclusion:                 OverallDAndIConclusionColumn,
		OperatingEffectiveness:                 OperatingEffectivenessColumn,
		CommentOnEffectiveness:                 CommentOnEffectivenessColumn,
		MitigatingControl:                      MitigatingControlColumn,
		FinalConclusionsAfterMitigatingControl: FinalConclusionsAfterMitigatingControlColumn,
		IsForDualPurposeTesting:                IsForDualPurposeTestingColumn,
		CreatedAt:                              CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
