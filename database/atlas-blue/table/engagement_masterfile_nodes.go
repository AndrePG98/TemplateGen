//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var EngagementMasterfileNodes = newEngagementMasterfileNodesTable("atlas-blue", "engagement_masterfile_nodes", "")

type engagementMasterfileNodesTable struct {
	mysql.Table

	// Columns
	ID                   mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID         mysql.ColumnString // (DC2Type:guid)
	SubmittedBy          mysql.ColumnString // (DC2Type:guid)
	NodeID               mysql.ColumnString
	Status               mysql.ColumnString
	Note                 mysql.ColumnString
	FirstSubmittedBy     mysql.ColumnString    // (DC2Type:guid)
	LastSubmittedDate    mysql.ColumnTimestamp // (DC2Type:datetime_immutable)
	TypeOfNotesRaised    mysql.ColumnString    // (DC2Type:array)
	IsMisstatementRaised mysql.ColumnBool
	Warnings             mysql.ColumnString
	IsFirstReview        mysql.ColumnBool
	AreaName             mysql.ColumnString
	SectionName          mysql.ColumnString
	LastSubmitterRole    mysql.ColumnString
	LastReviewerRole     mysql.ColumnString
	ReviewedByEqr        mysql.ColumnBool
	SubmitConflict       mysql.ColumnBool
	ReviewConflict       mysql.ColumnBool
	EqrConflict          mysql.ColumnBool
	FirstSubmitterRole   mysql.ColumnString
	FirstSubmittedDate   mysql.ColumnTimestamp // (DC2Type:datetime_immutable)
	ConflictFromDocument mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type EngagementMasterfileNodesTable struct {
	engagementMasterfileNodesTable

	NEW engagementMasterfileNodesTable
}

// AS creates new EngagementMasterfileNodesTable with assigned alias
func (a EngagementMasterfileNodesTable) AS(alias string) *EngagementMasterfileNodesTable {
	return newEngagementMasterfileNodesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EngagementMasterfileNodesTable with assigned schema name
func (a EngagementMasterfileNodesTable) FromSchema(schemaName string) *EngagementMasterfileNodesTable {
	return newEngagementMasterfileNodesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EngagementMasterfileNodesTable with assigned table prefix
func (a EngagementMasterfileNodesTable) WithPrefix(prefix string) *EngagementMasterfileNodesTable {
	return newEngagementMasterfileNodesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EngagementMasterfileNodesTable with assigned table suffix
func (a EngagementMasterfileNodesTable) WithSuffix(suffix string) *EngagementMasterfileNodesTable {
	return newEngagementMasterfileNodesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEngagementMasterfileNodesTable(schemaName, tableName, alias string) *EngagementMasterfileNodesTable {
	return &EngagementMasterfileNodesTable{
		engagementMasterfileNodesTable: newEngagementMasterfileNodesTableImpl(schemaName, tableName, alias),
		NEW:                            newEngagementMasterfileNodesTableImpl("", "new", ""),
	}
}

func newEngagementMasterfileNodesTableImpl(schemaName, tableName, alias string) engagementMasterfileNodesTable {
	var (
		IDColumn                   = mysql.StringColumn("id")
		EngagementIDColumn         = mysql.StringColumn("engagement_id")
		SubmittedByColumn          = mysql.StringColumn("submitted_by")
		NodeIDColumn               = mysql.StringColumn("node_id")
		StatusColumn               = mysql.StringColumn("status")
		NoteColumn                 = mysql.StringColumn("note")
		FirstSubmittedByColumn     = mysql.StringColumn("first_submitted_by")
		LastSubmittedDateColumn    = mysql.TimestampColumn("last_submitted_date")
		TypeOfNotesRaisedColumn    = mysql.StringColumn("type_of_notes_raised")
		IsMisstatementRaisedColumn = mysql.BoolColumn("is_misstatement_raised")
		WarningsColumn             = mysql.StringColumn("warnings")
		IsFirstReviewColumn        = mysql.BoolColumn("is_first_review")
		AreaNameColumn             = mysql.StringColumn("area_name")
		SectionNameColumn          = mysql.StringColumn("section_name")
		LastSubmitterRoleColumn    = mysql.StringColumn("last_submitter_role")
		LastReviewerRoleColumn     = mysql.StringColumn("last_reviewer_role")
		ReviewedByEqrColumn        = mysql.BoolColumn("reviewed_by_eqr")
		SubmitConflictColumn       = mysql.BoolColumn("submit_conflict")
		ReviewConflictColumn       = mysql.BoolColumn("review_conflict")
		EqrConflictColumn          = mysql.BoolColumn("eqr_conflict")
		FirstSubmitterRoleColumn   = mysql.StringColumn("first_submitter_role")
		FirstSubmittedDateColumn   = mysql.TimestampColumn("first_submitted_date")
		ConflictFromDocumentColumn = mysql.BoolColumn("conflict_from_document")
		allColumns                 = mysql.ColumnList{IDColumn, EngagementIDColumn, SubmittedByColumn, NodeIDColumn, StatusColumn, NoteColumn, FirstSubmittedByColumn, LastSubmittedDateColumn, TypeOfNotesRaisedColumn, IsMisstatementRaisedColumn, WarningsColumn, IsFirstReviewColumn, AreaNameColumn, SectionNameColumn, LastSubmitterRoleColumn, LastReviewerRoleColumn, ReviewedByEqrColumn, SubmitConflictColumn, ReviewConflictColumn, EqrConflictColumn, FirstSubmitterRoleColumn, FirstSubmittedDateColumn, ConflictFromDocumentColumn}
		mutableColumns             = mysql.ColumnList{EngagementIDColumn, SubmittedByColumn, NodeIDColumn, StatusColumn, NoteColumn, FirstSubmittedByColumn, LastSubmittedDateColumn, TypeOfNotesRaisedColumn, IsMisstatementRaisedColumn, WarningsColumn, IsFirstReviewColumn, AreaNameColumn, SectionNameColumn, LastSubmitterRoleColumn, LastReviewerRoleColumn, ReviewedByEqrColumn, SubmitConflictColumn, ReviewConflictColumn, EqrConflictColumn, FirstSubmitterRoleColumn, FirstSubmittedDateColumn, ConflictFromDocumentColumn}
	)

	return engagementMasterfileNodesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                   IDColumn,
		EngagementID:         EngagementIDColumn,
		SubmittedBy:          SubmittedByColumn,
		NodeID:               NodeIDColumn,
		Status:               StatusColumn,
		Note:                 NoteColumn,
		FirstSubmittedBy:     FirstSubmittedByColumn,
		LastSubmittedDate:    LastSubmittedDateColumn,
		TypeOfNotesRaised:    TypeOfNotesRaisedColumn,
		IsMisstatementRaised: IsMisstatementRaisedColumn,
		Warnings:             WarningsColumn,
		IsFirstReview:        IsFirstReviewColumn,
		AreaName:             AreaNameColumn,
		SectionName:          SectionNameColumn,
		LastSubmitterRole:    LastSubmitterRoleColumn,
		LastReviewerRole:     LastReviewerRoleColumn,
		ReviewedByEqr:        ReviewedByEqrColumn,
		SubmitConflict:       SubmitConflictColumn,
		ReviewConflict:       ReviewConflictColumn,
		EqrConflict:          EqrConflictColumn,
		FirstSubmitterRole:   FirstSubmitterRoleColumn,
		FirstSubmittedDate:   FirstSubmittedDateColumn,
		ConflictFromDocument: ConflictFromDocumentColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
