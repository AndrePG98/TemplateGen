//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var DetailOfMisstatementTask = newDetailOfMisstatementTaskTable("atlas-blue", "detail_of_misstatement_task", "")

type detailOfMisstatementTaskTable struct {
	mysql.Table

	// Columns
	ID                     mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	DetailOfMisstatementID mysql.ColumnString // (DC2Type:guid)
	TaskID                 mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type DetailOfMisstatementTaskTable struct {
	detailOfMisstatementTaskTable

	NEW detailOfMisstatementTaskTable
}

// AS creates new DetailOfMisstatementTaskTable with assigned alias
func (a DetailOfMisstatementTaskTable) AS(alias string) *DetailOfMisstatementTaskTable {
	return newDetailOfMisstatementTaskTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DetailOfMisstatementTaskTable with assigned schema name
func (a DetailOfMisstatementTaskTable) FromSchema(schemaName string) *DetailOfMisstatementTaskTable {
	return newDetailOfMisstatementTaskTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DetailOfMisstatementTaskTable with assigned table prefix
func (a DetailOfMisstatementTaskTable) WithPrefix(prefix string) *DetailOfMisstatementTaskTable {
	return newDetailOfMisstatementTaskTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DetailOfMisstatementTaskTable with assigned table suffix
func (a DetailOfMisstatementTaskTable) WithSuffix(suffix string) *DetailOfMisstatementTaskTable {
	return newDetailOfMisstatementTaskTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDetailOfMisstatementTaskTable(schemaName, tableName, alias string) *DetailOfMisstatementTaskTable {
	return &DetailOfMisstatementTaskTable{
		detailOfMisstatementTaskTable: newDetailOfMisstatementTaskTableImpl(schemaName, tableName, alias),
		NEW:                           newDetailOfMisstatementTaskTableImpl("", "new", ""),
	}
}

func newDetailOfMisstatementTaskTableImpl(schemaName, tableName, alias string) detailOfMisstatementTaskTable {
	var (
		IDColumn                     = mysql.StringColumn("id")
		DetailOfMisstatementIDColumn = mysql.StringColumn("detail_of_misstatement_id")
		TaskIDColumn                 = mysql.StringColumn("task_id")
		allColumns                   = mysql.ColumnList{IDColumn, DetailOfMisstatementIDColumn, TaskIDColumn}
		mutableColumns               = mysql.ColumnList{DetailOfMisstatementIDColumn, TaskIDColumn}
	)

	return detailOfMisstatementTaskTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                     IDColumn,
		DetailOfMisstatementID: DetailOfMisstatementIDColumn,
		TaskID:                 TaskIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
