//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var SignOffs = newSignOffsTable("atlas-blue", "sign_offs", "")

type signOffsTable struct {
	mysql.Table

	// Columns
	ID                                   mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID                         mysql.ColumnString // (DC2Type:guid)
	IsSatisfied                          mysql.ColumnBool
	IsAccepted                           mysql.ColumnBool
	IsValid                              mysql.ColumnBool
	Explanations                         mysql.ColumnString
	RiskRatingConclusion                 mysql.ColumnBool
	EntityPriorStatus                    mysql.ColumnInteger
	IsConclusion                         mysql.ColumnBool
	IsSubmitForReview                    mysql.ColumnBool
	SignatoriesSubmitCount               mysql.ColumnInteger
	ResourceAdequacyAndResolution        mysql.ColumnString
	EngagementPartnerConfirmation        mysql.ColumnBool
	PartnerHasAcknowledgedResponsibility mysql.ColumnBool
	DocumentYourDeterminationOfWhether   mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type SignOffsTable struct {
	signOffsTable

	NEW signOffsTable
}

// AS creates new SignOffsTable with assigned alias
func (a SignOffsTable) AS(alias string) *SignOffsTable {
	return newSignOffsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SignOffsTable with assigned schema name
func (a SignOffsTable) FromSchema(schemaName string) *SignOffsTable {
	return newSignOffsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SignOffsTable with assigned table prefix
func (a SignOffsTable) WithPrefix(prefix string) *SignOffsTable {
	return newSignOffsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SignOffsTable with assigned table suffix
func (a SignOffsTable) WithSuffix(suffix string) *SignOffsTable {
	return newSignOffsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSignOffsTable(schemaName, tableName, alias string) *SignOffsTable {
	return &SignOffsTable{
		signOffsTable: newSignOffsTableImpl(schemaName, tableName, alias),
		NEW:           newSignOffsTableImpl("", "new", ""),
	}
}

func newSignOffsTableImpl(schemaName, tableName, alias string) signOffsTable {
	var (
		IDColumn                                   = mysql.StringColumn("id")
		EngagementIDColumn                         = mysql.StringColumn("engagement_id")
		IsSatisfiedColumn                          = mysql.BoolColumn("is_satisfied")
		IsAcceptedColumn                           = mysql.BoolColumn("is_accepted")
		IsValidColumn                              = mysql.BoolColumn("is_valid")
		ExplanationsColumn                         = mysql.StringColumn("explanations")
		RiskRatingConclusionColumn                 = mysql.BoolColumn("risk_rating_conclusion")
		EntityPriorStatusColumn                    = mysql.IntegerColumn("entity_prior_status")
		IsConclusionColumn                         = mysql.BoolColumn("is_conclusion")
		IsSubmitForReviewColumn                    = mysql.BoolColumn("is_submit_for_review")
		SignatoriesSubmitCountColumn               = mysql.IntegerColumn("signatories_submit_count")
		ResourceAdequacyAndResolutionColumn        = mysql.StringColumn("resource_adequacy_and_resolution")
		EngagementPartnerConfirmationColumn        = mysql.BoolColumn("engagement_partner_confirmation")
		PartnerHasAcknowledgedResponsibilityColumn = mysql.BoolColumn("partner_has_acknowledged_responsibility")
		DocumentYourDeterminationOfWhetherColumn   = mysql.StringColumn("document_your_determination_of_whether")
		allColumns                                 = mysql.ColumnList{IDColumn, EngagementIDColumn, IsSatisfiedColumn, IsAcceptedColumn, IsValidColumn, ExplanationsColumn, RiskRatingConclusionColumn, EntityPriorStatusColumn, IsConclusionColumn, IsSubmitForReviewColumn, SignatoriesSubmitCountColumn, ResourceAdequacyAndResolutionColumn, EngagementPartnerConfirmationColumn, PartnerHasAcknowledgedResponsibilityColumn, DocumentYourDeterminationOfWhetherColumn}
		mutableColumns                             = mysql.ColumnList{EngagementIDColumn, IsSatisfiedColumn, IsAcceptedColumn, IsValidColumn, ExplanationsColumn, RiskRatingConclusionColumn, EntityPriorStatusColumn, IsConclusionColumn, IsSubmitForReviewColumn, SignatoriesSubmitCountColumn, ResourceAdequacyAndResolutionColumn, EngagementPartnerConfirmationColumn, PartnerHasAcknowledgedResponsibilityColumn, DocumentYourDeterminationOfWhetherColumn}
	)

	return signOffsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                                   IDColumn,
		EngagementID:                         EngagementIDColumn,
		IsSatisfied:                          IsSatisfiedColumn,
		IsAccepted:                           IsAcceptedColumn,
		IsValid:                              IsValidColumn,
		Explanations:                         ExplanationsColumn,
		RiskRatingConclusion:                 RiskRatingConclusionColumn,
		EntityPriorStatus:                    EntityPriorStatusColumn,
		IsConclusion:                         IsConclusionColumn,
		IsSubmitForReview:                    IsSubmitForReviewColumn,
		SignatoriesSubmitCount:               SignatoriesSubmitCountColumn,
		ResourceAdequacyAndResolution:        ResourceAdequacyAndResolutionColumn,
		EngagementPartnerConfirmation:        EngagementPartnerConfirmationColumn,
		PartnerHasAcknowledgedResponsibility: PartnerHasAcknowledgedResponsibilityColumn,
		DocumentYourDeterminationOfWhether:   DocumentYourDeterminationOfWhetherColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
