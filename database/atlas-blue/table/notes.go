//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Notes = newNotesTable("atlas-blue", "notes", "")

type notesTable struct {
	mysql.Table

	// Columns
	ID           mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	CreatedBy    mysql.ColumnString // (DC2Type:guid)
	EngagementID mysql.ColumnString // (DC2Type:guid)
	Number       mysql.ColumnInteger
	Status       mysql.ColumnString
	Type         mysql.ColumnString
	CreatedAt    mysql.ColumnTimestamp // (DC2Type:datetime_immutable)

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type NotesTable struct {
	notesTable

	NEW notesTable
}

// AS creates new NotesTable with assigned alias
func (a NotesTable) AS(alias string) *NotesTable {
	return newNotesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new NotesTable with assigned schema name
func (a NotesTable) FromSchema(schemaName string) *NotesTable {
	return newNotesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new NotesTable with assigned table prefix
func (a NotesTable) WithPrefix(prefix string) *NotesTable {
	return newNotesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new NotesTable with assigned table suffix
func (a NotesTable) WithSuffix(suffix string) *NotesTable {
	return newNotesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newNotesTable(schemaName, tableName, alias string) *NotesTable {
	return &NotesTable{
		notesTable: newNotesTableImpl(schemaName, tableName, alias),
		NEW:        newNotesTableImpl("", "new", ""),
	}
}

func newNotesTableImpl(schemaName, tableName, alias string) notesTable {
	var (
		IDColumn           = mysql.StringColumn("id")
		CreatedByColumn    = mysql.StringColumn("created_by")
		EngagementIDColumn = mysql.StringColumn("engagement_id")
		NumberColumn       = mysql.IntegerColumn("number")
		StatusColumn       = mysql.StringColumn("status")
		TypeColumn         = mysql.StringColumn("type")
		CreatedAtColumn    = mysql.TimestampColumn("created_at")
		allColumns         = mysql.ColumnList{IDColumn, CreatedByColumn, EngagementIDColumn, NumberColumn, StatusColumn, TypeColumn, CreatedAtColumn}
		mutableColumns     = mysql.ColumnList{CreatedByColumn, EngagementIDColumn, NumberColumn, StatusColumn, TypeColumn, CreatedAtColumn}
	)

	return notesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		CreatedBy:    CreatedByColumn,
		EngagementID: EngagementIDColumn,
		Number:       NumberColumn,
		Status:       StatusColumn,
		Type:         TypeColumn,
		CreatedAt:    CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
