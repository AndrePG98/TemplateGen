//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Contacts = newContactsTable("atlas-blue", "contacts", "")

type contactsTable struct {
	mysql.Table

	// Columns
	ID                 mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	LastName           mysql.ColumnString
	FirstName          mysql.ColumnString
	Email              mysql.ColumnString
	PrimaryPhoneNumber mysql.ColumnString
	OtherPhoneNumber   mysql.ColumnString
	DefaultCountryCode mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ContactsTable struct {
	contactsTable

	NEW contactsTable
}

// AS creates new ContactsTable with assigned alias
func (a ContactsTable) AS(alias string) *ContactsTable {
	return newContactsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ContactsTable with assigned schema name
func (a ContactsTable) FromSchema(schemaName string) *ContactsTable {
	return newContactsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ContactsTable with assigned table prefix
func (a ContactsTable) WithPrefix(prefix string) *ContactsTable {
	return newContactsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ContactsTable with assigned table suffix
func (a ContactsTable) WithSuffix(suffix string) *ContactsTable {
	return newContactsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newContactsTable(schemaName, tableName, alias string) *ContactsTable {
	return &ContactsTable{
		contactsTable: newContactsTableImpl(schemaName, tableName, alias),
		NEW:           newContactsTableImpl("", "new", ""),
	}
}

func newContactsTableImpl(schemaName, tableName, alias string) contactsTable {
	var (
		IDColumn                 = mysql.StringColumn("id")
		LastNameColumn           = mysql.StringColumn("last_name")
		FirstNameColumn          = mysql.StringColumn("first_name")
		EmailColumn              = mysql.StringColumn("email")
		PrimaryPhoneNumberColumn = mysql.StringColumn("primary_phone_number")
		OtherPhoneNumberColumn   = mysql.StringColumn("other_phone_number")
		DefaultCountryCodeColumn = mysql.StringColumn("default_country_code")
		allColumns               = mysql.ColumnList{IDColumn, LastNameColumn, FirstNameColumn, EmailColumn, PrimaryPhoneNumberColumn, OtherPhoneNumberColumn, DefaultCountryCodeColumn}
		mutableColumns           = mysql.ColumnList{LastNameColumn, FirstNameColumn, EmailColumn, PrimaryPhoneNumberColumn, OtherPhoneNumberColumn, DefaultCountryCodeColumn}
	)

	return contactsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		LastName:           LastNameColumn,
		FirstName:          FirstNameColumn,
		Email:              EmailColumn,
		PrimaryPhoneNumber: PrimaryPhoneNumberColumn,
		OtherPhoneNumber:   OtherPhoneNumberColumn,
		DefaultCountryCode: DefaultCountryCodeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
