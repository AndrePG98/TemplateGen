//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var DocumentationNotes = newDocumentationNotesTable("atlas-blue", "documentation_notes", "")

type documentationNotesTable struct {
	mysql.Table

	// Columns
	ID       mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	OpenedBy mysql.ColumnString // (DC2Type:guid)
	Details  mysql.ColumnString
	OpenedOn mysql.ColumnTimestamp // (DC2Type:datetime_immutable)

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type DocumentationNotesTable struct {
	documentationNotesTable

	NEW documentationNotesTable
}

// AS creates new DocumentationNotesTable with assigned alias
func (a DocumentationNotesTable) AS(alias string) *DocumentationNotesTable {
	return newDocumentationNotesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DocumentationNotesTable with assigned schema name
func (a DocumentationNotesTable) FromSchema(schemaName string) *DocumentationNotesTable {
	return newDocumentationNotesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DocumentationNotesTable with assigned table prefix
func (a DocumentationNotesTable) WithPrefix(prefix string) *DocumentationNotesTable {
	return newDocumentationNotesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DocumentationNotesTable with assigned table suffix
func (a DocumentationNotesTable) WithSuffix(suffix string) *DocumentationNotesTable {
	return newDocumentationNotesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDocumentationNotesTable(schemaName, tableName, alias string) *DocumentationNotesTable {
	return &DocumentationNotesTable{
		documentationNotesTable: newDocumentationNotesTableImpl(schemaName, tableName, alias),
		NEW:                     newDocumentationNotesTableImpl("", "new", ""),
	}
}

func newDocumentationNotesTableImpl(schemaName, tableName, alias string) documentationNotesTable {
	var (
		IDColumn       = mysql.StringColumn("id")
		OpenedByColumn = mysql.StringColumn("opened_by")
		DetailsColumn  = mysql.StringColumn("details")
		OpenedOnColumn = mysql.TimestampColumn("opened_on")
		allColumns     = mysql.ColumnList{IDColumn, OpenedByColumn, DetailsColumn, OpenedOnColumn}
		mutableColumns = mysql.ColumnList{OpenedByColumn, DetailsColumn, OpenedOnColumn}
	)

	return documentationNotesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		OpenedBy: OpenedByColumn,
		Details:  DetailsColumn,
		OpenedOn: OpenedOnColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
