//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var UsersManagementUnits = newUsersManagementUnitsTable("atlas-blue", "users_management_units", "")

type usersManagementUnitsTable struct {
	mysql.Table

	// Columns
	UserID           mysql.ColumnString // (DC2Type:guid)
	ManagementUnitID mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type UsersManagementUnitsTable struct {
	usersManagementUnitsTable

	NEW usersManagementUnitsTable
}

// AS creates new UsersManagementUnitsTable with assigned alias
func (a UsersManagementUnitsTable) AS(alias string) *UsersManagementUnitsTable {
	return newUsersManagementUnitsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersManagementUnitsTable with assigned schema name
func (a UsersManagementUnitsTable) FromSchema(schemaName string) *UsersManagementUnitsTable {
	return newUsersManagementUnitsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersManagementUnitsTable with assigned table prefix
func (a UsersManagementUnitsTable) WithPrefix(prefix string) *UsersManagementUnitsTable {
	return newUsersManagementUnitsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersManagementUnitsTable with assigned table suffix
func (a UsersManagementUnitsTable) WithSuffix(suffix string) *UsersManagementUnitsTable {
	return newUsersManagementUnitsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersManagementUnitsTable(schemaName, tableName, alias string) *UsersManagementUnitsTable {
	return &UsersManagementUnitsTable{
		usersManagementUnitsTable: newUsersManagementUnitsTableImpl(schemaName, tableName, alias),
		NEW:                       newUsersManagementUnitsTableImpl("", "new", ""),
	}
}

func newUsersManagementUnitsTableImpl(schemaName, tableName, alias string) usersManagementUnitsTable {
	var (
		UserIDColumn           = mysql.StringColumn("user_id")
		ManagementUnitIDColumn = mysql.StringColumn("management_unit_id")
		allColumns             = mysql.ColumnList{UserIDColumn, ManagementUnitIDColumn}
		mutableColumns         = mysql.ColumnList{}
	)

	return usersManagementUnitsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:           UserIDColumn,
		ManagementUnitID: ManagementUnitIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
