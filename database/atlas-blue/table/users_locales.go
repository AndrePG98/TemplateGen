//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var UsersLocales = newUsersLocalesTable("atlas-blue", "users_locales", "")

type usersLocalesTable struct {
	mysql.Table

	// Columns
	UserID   mysql.ColumnString // (DC2Type:guid)
	LocaleID mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type UsersLocalesTable struct {
	usersLocalesTable

	NEW usersLocalesTable
}

// AS creates new UsersLocalesTable with assigned alias
func (a UsersLocalesTable) AS(alias string) *UsersLocalesTable {
	return newUsersLocalesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersLocalesTable with assigned schema name
func (a UsersLocalesTable) FromSchema(schemaName string) *UsersLocalesTable {
	return newUsersLocalesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersLocalesTable with assigned table prefix
func (a UsersLocalesTable) WithPrefix(prefix string) *UsersLocalesTable {
	return newUsersLocalesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersLocalesTable with assigned table suffix
func (a UsersLocalesTable) WithSuffix(suffix string) *UsersLocalesTable {
	return newUsersLocalesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersLocalesTable(schemaName, tableName, alias string) *UsersLocalesTable {
	return &UsersLocalesTable{
		usersLocalesTable: newUsersLocalesTableImpl(schemaName, tableName, alias),
		NEW:               newUsersLocalesTableImpl("", "new", ""),
	}
}

func newUsersLocalesTableImpl(schemaName, tableName, alias string) usersLocalesTable {
	var (
		UserIDColumn   = mysql.StringColumn("user_id")
		LocaleIDColumn = mysql.StringColumn("locale_id")
		allColumns     = mysql.ColumnList{UserIDColumn, LocaleIDColumn}
		mutableColumns = mysql.ColumnList{}
	)

	return usersLocalesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:   UserIDColumn,
		LocaleID: LocaleIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
