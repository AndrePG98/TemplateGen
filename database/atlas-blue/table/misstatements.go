//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Misstatements = newMisstatementsTable("atlas-blue", "misstatements", "")

type misstatementsTable struct {
	mysql.Table

	// Columns
	ID                       mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID             mysql.ColumnString // (DC2Type:guid)
	NodeID                   mysql.ColumnString
	TypeOfAdjustment         mysql.ColumnString
	AreaImpactedByAdjustment mysql.ColumnString
	Deleted                  mysql.ColumnBool
	CreatedAt                mysql.ColumnTimestamp // (DC2Type:datetime_immutable)
	EntityStatus             mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type MisstatementsTable struct {
	misstatementsTable

	NEW misstatementsTable
}

// AS creates new MisstatementsTable with assigned alias
func (a MisstatementsTable) AS(alias string) *MisstatementsTable {
	return newMisstatementsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MisstatementsTable with assigned schema name
func (a MisstatementsTable) FromSchema(schemaName string) *MisstatementsTable {
	return newMisstatementsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MisstatementsTable with assigned table prefix
func (a MisstatementsTable) WithPrefix(prefix string) *MisstatementsTable {
	return newMisstatementsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MisstatementsTable with assigned table suffix
func (a MisstatementsTable) WithSuffix(suffix string) *MisstatementsTable {
	return newMisstatementsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMisstatementsTable(schemaName, tableName, alias string) *MisstatementsTable {
	return &MisstatementsTable{
		misstatementsTable: newMisstatementsTableImpl(schemaName, tableName, alias),
		NEW:                newMisstatementsTableImpl("", "new", ""),
	}
}

func newMisstatementsTableImpl(schemaName, tableName, alias string) misstatementsTable {
	var (
		IDColumn                       = mysql.StringColumn("id")
		EngagementIDColumn             = mysql.StringColumn("engagement_id")
		NodeIDColumn                   = mysql.StringColumn("node_id")
		TypeOfAdjustmentColumn         = mysql.StringColumn("type_of_adjustment")
		AreaImpactedByAdjustmentColumn = mysql.StringColumn("area_impacted_by_adjustment")
		DeletedColumn                  = mysql.BoolColumn("deleted")
		CreatedAtColumn                = mysql.TimestampColumn("created_at")
		EntityStatusColumn             = mysql.StringColumn("entity_status")
		allColumns                     = mysql.ColumnList{IDColumn, EngagementIDColumn, NodeIDColumn, TypeOfAdjustmentColumn, AreaImpactedByAdjustmentColumn, DeletedColumn, CreatedAtColumn, EntityStatusColumn}
		mutableColumns                 = mysql.ColumnList{EngagementIDColumn, NodeIDColumn, TypeOfAdjustmentColumn, AreaImpactedByAdjustmentColumn, DeletedColumn, CreatedAtColumn, EntityStatusColumn}
	)

	return misstatementsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                       IDColumn,
		EngagementID:             EngagementIDColumn,
		NodeID:                   NodeIDColumn,
		TypeOfAdjustment:         TypeOfAdjustmentColumn,
		AreaImpactedByAdjustment: AreaImpactedByAdjustmentColumn,
		Deleted:                  DeletedColumn,
		CreatedAt:                CreatedAtColumn,
		EntityStatus:             EntityStatusColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
