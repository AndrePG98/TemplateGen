//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var NodeNote = newNodeNoteTable("atlas-blue", "node_note", "")

type nodeNoteTable struct {
	mysql.Table

	// Columns
	ID     mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	NoteID mysql.ColumnString // (DC2Type:guid)
	NodeID mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type NodeNoteTable struct {
	nodeNoteTable

	NEW nodeNoteTable
}

// AS creates new NodeNoteTable with assigned alias
func (a NodeNoteTable) AS(alias string) *NodeNoteTable {
	return newNodeNoteTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new NodeNoteTable with assigned schema name
func (a NodeNoteTable) FromSchema(schemaName string) *NodeNoteTable {
	return newNodeNoteTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new NodeNoteTable with assigned table prefix
func (a NodeNoteTable) WithPrefix(prefix string) *NodeNoteTable {
	return newNodeNoteTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new NodeNoteTable with assigned table suffix
func (a NodeNoteTable) WithSuffix(suffix string) *NodeNoteTable {
	return newNodeNoteTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newNodeNoteTable(schemaName, tableName, alias string) *NodeNoteTable {
	return &NodeNoteTable{
		nodeNoteTable: newNodeNoteTableImpl(schemaName, tableName, alias),
		NEW:           newNodeNoteTableImpl("", "new", ""),
	}
}

func newNodeNoteTableImpl(schemaName, tableName, alias string) nodeNoteTable {
	var (
		IDColumn       = mysql.StringColumn("id")
		NoteIDColumn   = mysql.StringColumn("note_id")
		NodeIDColumn   = mysql.StringColumn("node_id")
		allColumns     = mysql.ColumnList{IDColumn, NoteIDColumn, NodeIDColumn}
		mutableColumns = mysql.ColumnList{NoteIDColumn, NodeIDColumn}
	)

	return nodeNoteTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:     IDColumn,
		NoteID: NoteIDColumn,
		NodeID: NodeIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
