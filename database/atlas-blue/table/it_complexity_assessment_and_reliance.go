//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ItComplexityAssessmentAndReliance = newItComplexityAssessmentAndRelianceTable("atlas-blue", "it_complexity_assessment_and_reliance", "")

type itComplexityAssessmentAndRelianceTable struct {
	mysql.Table

	// Columns
	ID           mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID mysql.ColumnString // (DC2Type:guid)
	NodeID       mysql.ColumnString
	EntityStatus mysql.ColumnString
	Comment      mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ItComplexityAssessmentAndRelianceTable struct {
	itComplexityAssessmentAndRelianceTable

	NEW itComplexityAssessmentAndRelianceTable
}

// AS creates new ItComplexityAssessmentAndRelianceTable with assigned alias
func (a ItComplexityAssessmentAndRelianceTable) AS(alias string) *ItComplexityAssessmentAndRelianceTable {
	return newItComplexityAssessmentAndRelianceTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ItComplexityAssessmentAndRelianceTable with assigned schema name
func (a ItComplexityAssessmentAndRelianceTable) FromSchema(schemaName string) *ItComplexityAssessmentAndRelianceTable {
	return newItComplexityAssessmentAndRelianceTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ItComplexityAssessmentAndRelianceTable with assigned table prefix
func (a ItComplexityAssessmentAndRelianceTable) WithPrefix(prefix string) *ItComplexityAssessmentAndRelianceTable {
	return newItComplexityAssessmentAndRelianceTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ItComplexityAssessmentAndRelianceTable with assigned table suffix
func (a ItComplexityAssessmentAndRelianceTable) WithSuffix(suffix string) *ItComplexityAssessmentAndRelianceTable {
	return newItComplexityAssessmentAndRelianceTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newItComplexityAssessmentAndRelianceTable(schemaName, tableName, alias string) *ItComplexityAssessmentAndRelianceTable {
	return &ItComplexityAssessmentAndRelianceTable{
		itComplexityAssessmentAndRelianceTable: newItComplexityAssessmentAndRelianceTableImpl(schemaName, tableName, alias),
		NEW:                                    newItComplexityAssessmentAndRelianceTableImpl("", "new", ""),
	}
}

func newItComplexityAssessmentAndRelianceTableImpl(schemaName, tableName, alias string) itComplexityAssessmentAndRelianceTable {
	var (
		IDColumn           = mysql.StringColumn("id")
		EngagementIDColumn = mysql.StringColumn("engagement_id")
		NodeIDColumn       = mysql.StringColumn("node_id")
		EntityStatusColumn = mysql.StringColumn("entity_status")
		CommentColumn      = mysql.StringColumn("comment")
		allColumns         = mysql.ColumnList{IDColumn, EngagementIDColumn, NodeIDColumn, EntityStatusColumn, CommentColumn}
		mutableColumns     = mysql.ColumnList{EngagementIDColumn, NodeIDColumn, EntityStatusColumn, CommentColumn}
	)

	return itComplexityAssessmentAndRelianceTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		EngagementID: EngagementIDColumn,
		NodeID:       NodeIDColumn,
		EntityStatus: EntityStatusColumn,
		Comment:      CommentColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
