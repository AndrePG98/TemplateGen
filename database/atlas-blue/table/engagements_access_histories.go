//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var EngagementsAccessHistories = newEngagementsAccessHistoriesTable("atlas-blue", "engagements_access_histories", "")

type engagementsAccessHistoriesTable struct {
	mysql.Table

	// Columns
	ID              mysql.ColumnString    // @UUID("v4")(DC2Type:guid)
	ReviewerID      mysql.ColumnString    // (DC2Type:guid)
	EngagementID    mysql.ColumnString    // (DC2Type:guid)
	AccessTime      mysql.ColumnTimestamp // (DC2Type:datetime_immutable)
	ReviewStartDate mysql.ColumnDate      // (DC2Type:date_immutable)
	ReviewEndDate   mysql.ColumnDate      // (DC2Type:date_immutable)

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type EngagementsAccessHistoriesTable struct {
	engagementsAccessHistoriesTable

	NEW engagementsAccessHistoriesTable
}

// AS creates new EngagementsAccessHistoriesTable with assigned alias
func (a EngagementsAccessHistoriesTable) AS(alias string) *EngagementsAccessHistoriesTable {
	return newEngagementsAccessHistoriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EngagementsAccessHistoriesTable with assigned schema name
func (a EngagementsAccessHistoriesTable) FromSchema(schemaName string) *EngagementsAccessHistoriesTable {
	return newEngagementsAccessHistoriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EngagementsAccessHistoriesTable with assigned table prefix
func (a EngagementsAccessHistoriesTable) WithPrefix(prefix string) *EngagementsAccessHistoriesTable {
	return newEngagementsAccessHistoriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EngagementsAccessHistoriesTable with assigned table suffix
func (a EngagementsAccessHistoriesTable) WithSuffix(suffix string) *EngagementsAccessHistoriesTable {
	return newEngagementsAccessHistoriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEngagementsAccessHistoriesTable(schemaName, tableName, alias string) *EngagementsAccessHistoriesTable {
	return &EngagementsAccessHistoriesTable{
		engagementsAccessHistoriesTable: newEngagementsAccessHistoriesTableImpl(schemaName, tableName, alias),
		NEW:                             newEngagementsAccessHistoriesTableImpl("", "new", ""),
	}
}

func newEngagementsAccessHistoriesTableImpl(schemaName, tableName, alias string) engagementsAccessHistoriesTable {
	var (
		IDColumn              = mysql.StringColumn("id")
		ReviewerIDColumn      = mysql.StringColumn("reviewer_id")
		EngagementIDColumn    = mysql.StringColumn("engagement_id")
		AccessTimeColumn      = mysql.TimestampColumn("access_time")
		ReviewStartDateColumn = mysql.DateColumn("review_start_date")
		ReviewEndDateColumn   = mysql.DateColumn("review_end_date")
		allColumns            = mysql.ColumnList{IDColumn, ReviewerIDColumn, EngagementIDColumn, AccessTimeColumn, ReviewStartDateColumn, ReviewEndDateColumn}
		mutableColumns        = mysql.ColumnList{ReviewerIDColumn, EngagementIDColumn, AccessTimeColumn, ReviewStartDateColumn, ReviewEndDateColumn}
	)

	return engagementsAccessHistoriesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		ReviewerID:      ReviewerIDColumn,
		EngagementID:    EngagementIDColumn,
		AccessTime:      AccessTimeColumn,
		ReviewStartDate: ReviewStartDateColumn,
		ReviewEndDate:   ReviewEndDateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
