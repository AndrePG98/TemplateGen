//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var UsersOffices = newUsersOfficesTable("atlas-blue", "users_offices", "")

type usersOfficesTable struct {
	mysql.Table

	// Columns
	UserID   mysql.ColumnString // (DC2Type:guid)
	OfficeID mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type UsersOfficesTable struct {
	usersOfficesTable

	NEW usersOfficesTable
}

// AS creates new UsersOfficesTable with assigned alias
func (a UsersOfficesTable) AS(alias string) *UsersOfficesTable {
	return newUsersOfficesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersOfficesTable with assigned schema name
func (a UsersOfficesTable) FromSchema(schemaName string) *UsersOfficesTable {
	return newUsersOfficesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersOfficesTable with assigned table prefix
func (a UsersOfficesTable) WithPrefix(prefix string) *UsersOfficesTable {
	return newUsersOfficesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersOfficesTable with assigned table suffix
func (a UsersOfficesTable) WithSuffix(suffix string) *UsersOfficesTable {
	return newUsersOfficesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersOfficesTable(schemaName, tableName, alias string) *UsersOfficesTable {
	return &UsersOfficesTable{
		usersOfficesTable: newUsersOfficesTableImpl(schemaName, tableName, alias),
		NEW:               newUsersOfficesTableImpl("", "new", ""),
	}
}

func newUsersOfficesTableImpl(schemaName, tableName, alias string) usersOfficesTable {
	var (
		UserIDColumn   = mysql.StringColumn("user_id")
		OfficeIDColumn = mysql.StringColumn("office_id")
		allColumns     = mysql.ColumnList{UserIDColumn, OfficeIDColumn}
		mutableColumns = mysql.ColumnList{}
	)

	return usersOfficesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:   UserIDColumn,
		OfficeID: OfficeIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
