//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ControlDetailsForm = newControlDetailsFormTable("atlas-blue", "control_details_form", "")

type controlDetailsFormTable struct {
	mysql.Table

	// Columns
	ID                               mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID                     mysql.ColumnString // (DC2Type:guid)
	NodeID                           mysql.ColumnString
	IsAtLeastOneControlEvaluatedToDi mysql.ColumnBool
	IsAtLeastOneControlEvaluatedToOe mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ControlDetailsFormTable struct {
	controlDetailsFormTable

	NEW controlDetailsFormTable
}

// AS creates new ControlDetailsFormTable with assigned alias
func (a ControlDetailsFormTable) AS(alias string) *ControlDetailsFormTable {
	return newControlDetailsFormTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ControlDetailsFormTable with assigned schema name
func (a ControlDetailsFormTable) FromSchema(schemaName string) *ControlDetailsFormTable {
	return newControlDetailsFormTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ControlDetailsFormTable with assigned table prefix
func (a ControlDetailsFormTable) WithPrefix(prefix string) *ControlDetailsFormTable {
	return newControlDetailsFormTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ControlDetailsFormTable with assigned table suffix
func (a ControlDetailsFormTable) WithSuffix(suffix string) *ControlDetailsFormTable {
	return newControlDetailsFormTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newControlDetailsFormTable(schemaName, tableName, alias string) *ControlDetailsFormTable {
	return &ControlDetailsFormTable{
		controlDetailsFormTable: newControlDetailsFormTableImpl(schemaName, tableName, alias),
		NEW:                     newControlDetailsFormTableImpl("", "new", ""),
	}
}

func newControlDetailsFormTableImpl(schemaName, tableName, alias string) controlDetailsFormTable {
	var (
		IDColumn                               = mysql.StringColumn("id")
		EngagementIDColumn                     = mysql.StringColumn("engagement_id")
		NodeIDColumn                           = mysql.StringColumn("node_id")
		IsAtLeastOneControlEvaluatedToDiColumn = mysql.BoolColumn("is_at_least_one_control_evaluated_to_di")
		IsAtLeastOneControlEvaluatedToOeColumn = mysql.BoolColumn("is_at_least_one_control_evaluated_to_oe")
		allColumns                             = mysql.ColumnList{IDColumn, EngagementIDColumn, NodeIDColumn, IsAtLeastOneControlEvaluatedToDiColumn, IsAtLeastOneControlEvaluatedToOeColumn}
		mutableColumns                         = mysql.ColumnList{EngagementIDColumn, NodeIDColumn, IsAtLeastOneControlEvaluatedToDiColumn, IsAtLeastOneControlEvaluatedToOeColumn}
	)

	return controlDetailsFormTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                               IDColumn,
		EngagementID:                     EngagementIDColumn,
		NodeID:                           NodeIDColumn,
		IsAtLeastOneControlEvaluatedToDi: IsAtLeastOneControlEvaluatedToDiColumn,
		IsAtLeastOneControlEvaluatedToOe: IsAtLeastOneControlEvaluatedToOeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
