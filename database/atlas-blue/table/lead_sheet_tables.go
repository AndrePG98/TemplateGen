//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var LeadSheetTables = newLeadSheetTablesTable("atlas-blue", "lead_sheet_tables", "")

type leadSheetTablesTable struct {
	mysql.Table

	// Columns
	ID               mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	UserID           mysql.ColumnString // (DC2Type:guid)
	LeadSheetID      mysql.ColumnString // (DC2Type:guid)
	ApplyToAllSheets mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type LeadSheetTablesTable struct {
	leadSheetTablesTable

	NEW leadSheetTablesTable
}

// AS creates new LeadSheetTablesTable with assigned alias
func (a LeadSheetTablesTable) AS(alias string) *LeadSheetTablesTable {
	return newLeadSheetTablesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LeadSheetTablesTable with assigned schema name
func (a LeadSheetTablesTable) FromSchema(schemaName string) *LeadSheetTablesTable {
	return newLeadSheetTablesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LeadSheetTablesTable with assigned table prefix
func (a LeadSheetTablesTable) WithPrefix(prefix string) *LeadSheetTablesTable {
	return newLeadSheetTablesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LeadSheetTablesTable with assigned table suffix
func (a LeadSheetTablesTable) WithSuffix(suffix string) *LeadSheetTablesTable {
	return newLeadSheetTablesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLeadSheetTablesTable(schemaName, tableName, alias string) *LeadSheetTablesTable {
	return &LeadSheetTablesTable{
		leadSheetTablesTable: newLeadSheetTablesTableImpl(schemaName, tableName, alias),
		NEW:                  newLeadSheetTablesTableImpl("", "new", ""),
	}
}

func newLeadSheetTablesTableImpl(schemaName, tableName, alias string) leadSheetTablesTable {
	var (
		IDColumn               = mysql.StringColumn("id")
		UserIDColumn           = mysql.StringColumn("user_id")
		LeadSheetIDColumn      = mysql.StringColumn("lead_sheet_id")
		ApplyToAllSheetsColumn = mysql.BoolColumn("apply_to_all_sheets")
		allColumns             = mysql.ColumnList{IDColumn, UserIDColumn, LeadSheetIDColumn, ApplyToAllSheetsColumn}
		mutableColumns         = mysql.ColumnList{UserIDColumn, LeadSheetIDColumn, ApplyToAllSheetsColumn}
	)

	return leadSheetTablesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		UserID:           UserIDColumn,
		LeadSheetID:      LeadSheetIDColumn,
		ApplyToAllSheets: ApplyToAllSheetsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
