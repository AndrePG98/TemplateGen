//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var NodeRelatedPartyAssertions = newNodeRelatedPartyAssertionsTable("atlas-blue", "node_related_party_assertions", "")

type nodeRelatedPartyAssertionsTable struct {
	mysql.Table

	// Columns
	ID                 mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	NodeRelatedPartyID mysql.ColumnString // (DC2Type:guid)
	AssertionID        mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type NodeRelatedPartyAssertionsTable struct {
	nodeRelatedPartyAssertionsTable

	NEW nodeRelatedPartyAssertionsTable
}

// AS creates new NodeRelatedPartyAssertionsTable with assigned alias
func (a NodeRelatedPartyAssertionsTable) AS(alias string) *NodeRelatedPartyAssertionsTable {
	return newNodeRelatedPartyAssertionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new NodeRelatedPartyAssertionsTable with assigned schema name
func (a NodeRelatedPartyAssertionsTable) FromSchema(schemaName string) *NodeRelatedPartyAssertionsTable {
	return newNodeRelatedPartyAssertionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new NodeRelatedPartyAssertionsTable with assigned table prefix
func (a NodeRelatedPartyAssertionsTable) WithPrefix(prefix string) *NodeRelatedPartyAssertionsTable {
	return newNodeRelatedPartyAssertionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new NodeRelatedPartyAssertionsTable with assigned table suffix
func (a NodeRelatedPartyAssertionsTable) WithSuffix(suffix string) *NodeRelatedPartyAssertionsTable {
	return newNodeRelatedPartyAssertionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newNodeRelatedPartyAssertionsTable(schemaName, tableName, alias string) *NodeRelatedPartyAssertionsTable {
	return &NodeRelatedPartyAssertionsTable{
		nodeRelatedPartyAssertionsTable: newNodeRelatedPartyAssertionsTableImpl(schemaName, tableName, alias),
		NEW:                             newNodeRelatedPartyAssertionsTableImpl("", "new", ""),
	}
}

func newNodeRelatedPartyAssertionsTableImpl(schemaName, tableName, alias string) nodeRelatedPartyAssertionsTable {
	var (
		IDColumn                 = mysql.StringColumn("id")
		NodeRelatedPartyIDColumn = mysql.StringColumn("node_related_party_id")
		AssertionIDColumn        = mysql.StringColumn("assertion_id")
		allColumns               = mysql.ColumnList{IDColumn, NodeRelatedPartyIDColumn, AssertionIDColumn}
		mutableColumns           = mysql.ColumnList{NodeRelatedPartyIDColumn, AssertionIDColumn}
	)

	return nodeRelatedPartyAssertionsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		NodeRelatedPartyID: NodeRelatedPartyIDColumn,
		AssertionID:        AssertionIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
