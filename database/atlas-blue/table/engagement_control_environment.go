//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var EngagementControlEnvironment = newEngagementControlEnvironmentTable("atlas-blue", "engagement_control_environment", "")

type engagementControlEnvironmentTable struct {
	mysql.Table

	// Columns
	ID                                        mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID                              mysql.ColumnString // (DC2Type:guid)
	HowManagementOversightResponsibilities    mysql.ColumnString
	WhenThoseChargedWithGovernance            mysql.ColumnString
	EntityAssignmentOfAuthorityResponsibility mysql.ColumnString
	HowEntityAttractsDevelopsRetains          mysql.ColumnString
	HowEntityHoldsIndividualsAccountable      mysql.ColumnString
	OngoingSeparateEvaluations                mysql.ColumnString
	DescribeSourcesOfInformation              mysql.ColumnString
	EvaluateWhetherManagement                 mysql.ColumnString
	EvaluateWhetherStrengths                  mysql.ColumnString
	EntityProcessForMonitoringSystem          mysql.ColumnString
	IsValid                                   mysql.ColumnBool
	DoesEntityUseServiceOrganisations         mysql.ColumnBool
	DoesEntityHaveInternalAuditFunction       mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type EngagementControlEnvironmentTable struct {
	engagementControlEnvironmentTable

	NEW engagementControlEnvironmentTable
}

// AS creates new EngagementControlEnvironmentTable with assigned alias
func (a EngagementControlEnvironmentTable) AS(alias string) *EngagementControlEnvironmentTable {
	return newEngagementControlEnvironmentTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EngagementControlEnvironmentTable with assigned schema name
func (a EngagementControlEnvironmentTable) FromSchema(schemaName string) *EngagementControlEnvironmentTable {
	return newEngagementControlEnvironmentTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EngagementControlEnvironmentTable with assigned table prefix
func (a EngagementControlEnvironmentTable) WithPrefix(prefix string) *EngagementControlEnvironmentTable {
	return newEngagementControlEnvironmentTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EngagementControlEnvironmentTable with assigned table suffix
func (a EngagementControlEnvironmentTable) WithSuffix(suffix string) *EngagementControlEnvironmentTable {
	return newEngagementControlEnvironmentTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEngagementControlEnvironmentTable(schemaName, tableName, alias string) *EngagementControlEnvironmentTable {
	return &EngagementControlEnvironmentTable{
		engagementControlEnvironmentTable: newEngagementControlEnvironmentTableImpl(schemaName, tableName, alias),
		NEW:                               newEngagementControlEnvironmentTableImpl("", "new", ""),
	}
}

func newEngagementControlEnvironmentTableImpl(schemaName, tableName, alias string) engagementControlEnvironmentTable {
	var (
		IDColumn                                        = mysql.StringColumn("id")
		EngagementIDColumn                              = mysql.StringColumn("engagement_id")
		HowManagementOversightResponsibilitiesColumn    = mysql.StringColumn("how_management_oversight_responsibilities")
		WhenThoseChargedWithGovernanceColumn            = mysql.StringColumn("when_those_charged_with_governance")
		EntityAssignmentOfAuthorityResponsibilityColumn = mysql.StringColumn("entity_assignment_of_authority_responsibility")
		HowEntityAttractsDevelopsRetainsColumn          = mysql.StringColumn("how_entity_attracts_develops_retains")
		HowEntityHoldsIndividualsAccountableColumn      = mysql.StringColumn("how_entity_holds_individuals_accountable")
		OngoingSeparateEvaluationsColumn                = mysql.StringColumn("ongoing_separate_evaluations")
		DescribeSourcesOfInformationColumn              = mysql.StringColumn("describe_sources_of_information")
		EvaluateWhetherManagementColumn                 = mysql.StringColumn("evaluate_whether_management")
		EvaluateWhetherStrengthsColumn                  = mysql.StringColumn("evaluate_whether_strengths")
		EntityProcessForMonitoringSystemColumn          = mysql.StringColumn("entity_process_for_monitoring_system")
		IsValidColumn                                   = mysql.BoolColumn("is_valid")
		DoesEntityUseServiceOrganisationsColumn         = mysql.BoolColumn("does_entity_use_service_organisations")
		DoesEntityHaveInternalAuditFunctionColumn       = mysql.BoolColumn("does_entity_have_internal_audit_function")
		allColumns                                      = mysql.ColumnList{IDColumn, EngagementIDColumn, HowManagementOversightResponsibilitiesColumn, WhenThoseChargedWithGovernanceColumn, EntityAssignmentOfAuthorityResponsibilityColumn, HowEntityAttractsDevelopsRetainsColumn, HowEntityHoldsIndividualsAccountableColumn, OngoingSeparateEvaluationsColumn, DescribeSourcesOfInformationColumn, EvaluateWhetherManagementColumn, EvaluateWhetherStrengthsColumn, EntityProcessForMonitoringSystemColumn, IsValidColumn, DoesEntityUseServiceOrganisationsColumn, DoesEntityHaveInternalAuditFunctionColumn}
		mutableColumns                                  = mysql.ColumnList{EngagementIDColumn, HowManagementOversightResponsibilitiesColumn, WhenThoseChargedWithGovernanceColumn, EntityAssignmentOfAuthorityResponsibilityColumn, HowEntityAttractsDevelopsRetainsColumn, HowEntityHoldsIndividualsAccountableColumn, OngoingSeparateEvaluationsColumn, DescribeSourcesOfInformationColumn, EvaluateWhetherManagementColumn, EvaluateWhetherStrengthsColumn, EntityProcessForMonitoringSystemColumn, IsValidColumn, DoesEntityUseServiceOrganisationsColumn, DoesEntityHaveInternalAuditFunctionColumn}
	)

	return engagementControlEnvironmentTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                                     IDColumn,
		EngagementID:                           EngagementIDColumn,
		HowManagementOversightResponsibilities: HowManagementOversightResponsibilitiesColumn,
		WhenThoseChargedWithGovernance:         WhenThoseChargedWithGovernanceColumn,
		EntityAssignmentOfAuthorityResponsibility: EntityAssignmentOfAuthorityResponsibilityColumn,
		HowEntityAttractsDevelopsRetains:          HowEntityAttractsDevelopsRetainsColumn,
		HowEntityHoldsIndividualsAccountable:      HowEntityHoldsIndividualsAccountableColumn,
		OngoingSeparateEvaluations:                OngoingSeparateEvaluationsColumn,
		DescribeSourcesOfInformation:              DescribeSourcesOfInformationColumn,
		EvaluateWhetherManagement:                 EvaluateWhetherManagementColumn,
		EvaluateWhetherStrengths:                  EvaluateWhetherStrengthsColumn,
		EntityProcessForMonitoringSystem:          EntityProcessForMonitoringSystemColumn,
		IsValid:                                   IsValidColumn,
		DoesEntityUseServiceOrganisations:         DoesEntityUseServiceOrganisationsColumn,
		DoesEntityHaveInternalAuditFunction:       DoesEntityHaveInternalAuditFunctionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
