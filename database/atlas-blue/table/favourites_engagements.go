//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FavouritesEngagements = newFavouritesEngagementsTable("atlas-blue", "favourites_engagements", "")

type favouritesEngagementsTable struct {
	mysql.Table

	// Columns
	User       mysql.ColumnString // (DC2Type:guid)
	Engagement mysql.ColumnString // (DC2Type:guid)

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type FavouritesEngagementsTable struct {
	favouritesEngagementsTable

	NEW favouritesEngagementsTable
}

// AS creates new FavouritesEngagementsTable with assigned alias
func (a FavouritesEngagementsTable) AS(alias string) *FavouritesEngagementsTable {
	return newFavouritesEngagementsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FavouritesEngagementsTable with assigned schema name
func (a FavouritesEngagementsTable) FromSchema(schemaName string) *FavouritesEngagementsTable {
	return newFavouritesEngagementsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FavouritesEngagementsTable with assigned table prefix
func (a FavouritesEngagementsTable) WithPrefix(prefix string) *FavouritesEngagementsTable {
	return newFavouritesEngagementsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FavouritesEngagementsTable with assigned table suffix
func (a FavouritesEngagementsTable) WithSuffix(suffix string) *FavouritesEngagementsTable {
	return newFavouritesEngagementsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFavouritesEngagementsTable(schemaName, tableName, alias string) *FavouritesEngagementsTable {
	return &FavouritesEngagementsTable{
		favouritesEngagementsTable: newFavouritesEngagementsTableImpl(schemaName, tableName, alias),
		NEW:                        newFavouritesEngagementsTableImpl("", "new", ""),
	}
}

func newFavouritesEngagementsTableImpl(schemaName, tableName, alias string) favouritesEngagementsTable {
	var (
		UserColumn       = mysql.StringColumn("user")
		EngagementColumn = mysql.StringColumn("engagement")
		allColumns       = mysql.ColumnList{UserColumn, EngagementColumn}
		mutableColumns   = mysql.ColumnList{}
	)

	return favouritesEngagementsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		User:       UserColumn,
		Engagement: EngagementColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
