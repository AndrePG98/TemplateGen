//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ConclusionOnControls = newConclusionOnControlsTable("atlas-blue", "conclusion_on_controls", "")

type conclusionOnControlsTable struct {
	mysql.Table

	// Columns
	ID                           mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID                 mysql.ColumnString // (DC2Type:guid)
	NodeID                       mysql.ColumnString
	ControlRiskAfterEvaluatingOe mysql.ColumnString
	TaskProcedure                mysql.ColumnString // (DC2Type:guid)
	ImpactOnAuditApproach        mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ConclusionOnControlsTable struct {
	conclusionOnControlsTable

	NEW conclusionOnControlsTable
}

// AS creates new ConclusionOnControlsTable with assigned alias
func (a ConclusionOnControlsTable) AS(alias string) *ConclusionOnControlsTable {
	return newConclusionOnControlsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ConclusionOnControlsTable with assigned schema name
func (a ConclusionOnControlsTable) FromSchema(schemaName string) *ConclusionOnControlsTable {
	return newConclusionOnControlsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ConclusionOnControlsTable with assigned table prefix
func (a ConclusionOnControlsTable) WithPrefix(prefix string) *ConclusionOnControlsTable {
	return newConclusionOnControlsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ConclusionOnControlsTable with assigned table suffix
func (a ConclusionOnControlsTable) WithSuffix(suffix string) *ConclusionOnControlsTable {
	return newConclusionOnControlsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newConclusionOnControlsTable(schemaName, tableName, alias string) *ConclusionOnControlsTable {
	return &ConclusionOnControlsTable{
		conclusionOnControlsTable: newConclusionOnControlsTableImpl(schemaName, tableName, alias),
		NEW:                       newConclusionOnControlsTableImpl("", "new", ""),
	}
}

func newConclusionOnControlsTableImpl(schemaName, tableName, alias string) conclusionOnControlsTable {
	var (
		IDColumn                           = mysql.StringColumn("id")
		EngagementIDColumn                 = mysql.StringColumn("engagement_id")
		NodeIDColumn                       = mysql.StringColumn("node_id")
		ControlRiskAfterEvaluatingOeColumn = mysql.StringColumn("control_risk_after_evaluating_oe")
		TaskProcedureColumn                = mysql.StringColumn("task_procedure")
		ImpactOnAuditApproachColumn        = mysql.StringColumn("impact_on_audit_approach")
		allColumns                         = mysql.ColumnList{IDColumn, EngagementIDColumn, NodeIDColumn, ControlRiskAfterEvaluatingOeColumn, TaskProcedureColumn, ImpactOnAuditApproachColumn}
		mutableColumns                     = mysql.ColumnList{EngagementIDColumn, NodeIDColumn, ControlRiskAfterEvaluatingOeColumn, TaskProcedureColumn, ImpactOnAuditApproachColumn}
	)

	return conclusionOnControlsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                           IDColumn,
		EngagementID:                 EngagementIDColumn,
		NodeID:                       NodeIDColumn,
		ControlRiskAfterEvaluatingOe: ControlRiskAfterEvaluatingOeColumn,
		TaskProcedure:                TaskProcedureColumn,
		ImpactOnAuditApproach:        ImpactOnAuditApproachColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
