//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var AuditorsExpertProcedures = newAuditorsExpertProceduresTable("atlas-blue", "auditors_expert_procedures", "")

type auditorsExpertProceduresTable struct {
	mysql.Table

	// Columns
	ID               mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	AuditorsExpertID mysql.ColumnString // (DC2Type:guid)
	ProcedureID      mysql.ColumnString
	RiskTypeID       mysql.ColumnString
	FslrNameID       mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type AuditorsExpertProceduresTable struct {
	auditorsExpertProceduresTable

	NEW auditorsExpertProceduresTable
}

// AS creates new AuditorsExpertProceduresTable with assigned alias
func (a AuditorsExpertProceduresTable) AS(alias string) *AuditorsExpertProceduresTable {
	return newAuditorsExpertProceduresTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AuditorsExpertProceduresTable with assigned schema name
func (a AuditorsExpertProceduresTable) FromSchema(schemaName string) *AuditorsExpertProceduresTable {
	return newAuditorsExpertProceduresTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AuditorsExpertProceduresTable with assigned table prefix
func (a AuditorsExpertProceduresTable) WithPrefix(prefix string) *AuditorsExpertProceduresTable {
	return newAuditorsExpertProceduresTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AuditorsExpertProceduresTable with assigned table suffix
func (a AuditorsExpertProceduresTable) WithSuffix(suffix string) *AuditorsExpertProceduresTable {
	return newAuditorsExpertProceduresTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAuditorsExpertProceduresTable(schemaName, tableName, alias string) *AuditorsExpertProceduresTable {
	return &AuditorsExpertProceduresTable{
		auditorsExpertProceduresTable: newAuditorsExpertProceduresTableImpl(schemaName, tableName, alias),
		NEW:                           newAuditorsExpertProceduresTableImpl("", "new", ""),
	}
}

func newAuditorsExpertProceduresTableImpl(schemaName, tableName, alias string) auditorsExpertProceduresTable {
	var (
		IDColumn               = mysql.StringColumn("id")
		AuditorsExpertIDColumn = mysql.StringColumn("auditors_expert_id")
		ProcedureIDColumn      = mysql.StringColumn("procedure_id")
		RiskTypeIDColumn       = mysql.StringColumn("risk_type_id")
		FslrNameIDColumn       = mysql.StringColumn("fslr_name_id")
		allColumns             = mysql.ColumnList{IDColumn, AuditorsExpertIDColumn, ProcedureIDColumn, RiskTypeIDColumn, FslrNameIDColumn}
		mutableColumns         = mysql.ColumnList{AuditorsExpertIDColumn, ProcedureIDColumn, RiskTypeIDColumn, FslrNameIDColumn}
	)

	return auditorsExpertProceduresTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		AuditorsExpertID: AuditorsExpertIDColumn,
		ProcedureID:      ProcedureIDColumn,
		RiskTypeID:       RiskTypeIDColumn,
		FslrNameID:       FslrNameIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
