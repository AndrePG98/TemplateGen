//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var AuditorsExpertAssertions = newAuditorsExpertAssertionsTable("atlas-blue", "auditors_expert_assertions", "")

type auditorsExpertAssertionsTable struct {
	mysql.Table

	// Columns
	ID               mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	AuditorsExpertID mysql.ColumnString // (DC2Type:guid)
	AssertionID      mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type AuditorsExpertAssertionsTable struct {
	auditorsExpertAssertionsTable

	NEW auditorsExpertAssertionsTable
}

// AS creates new AuditorsExpertAssertionsTable with assigned alias
func (a AuditorsExpertAssertionsTable) AS(alias string) *AuditorsExpertAssertionsTable {
	return newAuditorsExpertAssertionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AuditorsExpertAssertionsTable with assigned schema name
func (a AuditorsExpertAssertionsTable) FromSchema(schemaName string) *AuditorsExpertAssertionsTable {
	return newAuditorsExpertAssertionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AuditorsExpertAssertionsTable with assigned table prefix
func (a AuditorsExpertAssertionsTable) WithPrefix(prefix string) *AuditorsExpertAssertionsTable {
	return newAuditorsExpertAssertionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AuditorsExpertAssertionsTable with assigned table suffix
func (a AuditorsExpertAssertionsTable) WithSuffix(suffix string) *AuditorsExpertAssertionsTable {
	return newAuditorsExpertAssertionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAuditorsExpertAssertionsTable(schemaName, tableName, alias string) *AuditorsExpertAssertionsTable {
	return &AuditorsExpertAssertionsTable{
		auditorsExpertAssertionsTable: newAuditorsExpertAssertionsTableImpl(schemaName, tableName, alias),
		NEW:                           newAuditorsExpertAssertionsTableImpl("", "new", ""),
	}
}

func newAuditorsExpertAssertionsTableImpl(schemaName, tableName, alias string) auditorsExpertAssertionsTable {
	var (
		IDColumn               = mysql.StringColumn("id")
		AuditorsExpertIDColumn = mysql.StringColumn("auditors_expert_id")
		AssertionIDColumn      = mysql.StringColumn("assertion_id")
		allColumns             = mysql.ColumnList{IDColumn, AuditorsExpertIDColumn, AssertionIDColumn}
		mutableColumns         = mysql.ColumnList{AuditorsExpertIDColumn, AssertionIDColumn}
	)

	return auditorsExpertAssertionsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		AuditorsExpertID: AuditorsExpertIDColumn,
		AssertionID:      AssertionIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
