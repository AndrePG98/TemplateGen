//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var EngagementTeams = newEngagementTeamsTable("atlas-blue", "engagement_teams", "")

type engagementTeamsTable struct {
	mysql.Table

	// Columns
	ID           mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID mysql.ColumnString // (DC2Type:guid)
	Type         mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type EngagementTeamsTable struct {
	engagementTeamsTable

	NEW engagementTeamsTable
}

// AS creates new EngagementTeamsTable with assigned alias
func (a EngagementTeamsTable) AS(alias string) *EngagementTeamsTable {
	return newEngagementTeamsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EngagementTeamsTable with assigned schema name
func (a EngagementTeamsTable) FromSchema(schemaName string) *EngagementTeamsTable {
	return newEngagementTeamsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EngagementTeamsTable with assigned table prefix
func (a EngagementTeamsTable) WithPrefix(prefix string) *EngagementTeamsTable {
	return newEngagementTeamsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EngagementTeamsTable with assigned table suffix
func (a EngagementTeamsTable) WithSuffix(suffix string) *EngagementTeamsTable {
	return newEngagementTeamsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEngagementTeamsTable(schemaName, tableName, alias string) *EngagementTeamsTable {
	return &EngagementTeamsTable{
		engagementTeamsTable: newEngagementTeamsTableImpl(schemaName, tableName, alias),
		NEW:                  newEngagementTeamsTableImpl("", "new", ""),
	}
}

func newEngagementTeamsTableImpl(schemaName, tableName, alias string) engagementTeamsTable {
	var (
		IDColumn           = mysql.StringColumn("id")
		EngagementIDColumn = mysql.StringColumn("engagement_id")
		TypeColumn         = mysql.StringColumn("type")
		allColumns         = mysql.ColumnList{IDColumn, EngagementIDColumn, TypeColumn}
		mutableColumns     = mysql.ColumnList{EngagementIDColumn, TypeColumn}
	)

	return engagementTeamsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		EngagementID: EngagementIDColumn,
		Type:         TypeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
