//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var AuditorsExpertRiskOfMaterialMisstatements = newAuditorsExpertRiskOfMaterialMisstatementsTable("atlas-blue", "auditors_expert_risk_of_material_misstatements", "")

type auditorsExpertRiskOfMaterialMisstatementsTable struct {
	mysql.Table

	// Columns
	ID               mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	AuditorsExpertID mysql.ColumnString // (DC2Type:guid)
	RiskOfMaterialID mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type AuditorsExpertRiskOfMaterialMisstatementsTable struct {
	auditorsExpertRiskOfMaterialMisstatementsTable

	NEW auditorsExpertRiskOfMaterialMisstatementsTable
}

// AS creates new AuditorsExpertRiskOfMaterialMisstatementsTable with assigned alias
func (a AuditorsExpertRiskOfMaterialMisstatementsTable) AS(alias string) *AuditorsExpertRiskOfMaterialMisstatementsTable {
	return newAuditorsExpertRiskOfMaterialMisstatementsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AuditorsExpertRiskOfMaterialMisstatementsTable with assigned schema name
func (a AuditorsExpertRiskOfMaterialMisstatementsTable) FromSchema(schemaName string) *AuditorsExpertRiskOfMaterialMisstatementsTable {
	return newAuditorsExpertRiskOfMaterialMisstatementsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AuditorsExpertRiskOfMaterialMisstatementsTable with assigned table prefix
func (a AuditorsExpertRiskOfMaterialMisstatementsTable) WithPrefix(prefix string) *AuditorsExpertRiskOfMaterialMisstatementsTable {
	return newAuditorsExpertRiskOfMaterialMisstatementsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AuditorsExpertRiskOfMaterialMisstatementsTable with assigned table suffix
func (a AuditorsExpertRiskOfMaterialMisstatementsTable) WithSuffix(suffix string) *AuditorsExpertRiskOfMaterialMisstatementsTable {
	return newAuditorsExpertRiskOfMaterialMisstatementsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAuditorsExpertRiskOfMaterialMisstatementsTable(schemaName, tableName, alias string) *AuditorsExpertRiskOfMaterialMisstatementsTable {
	return &AuditorsExpertRiskOfMaterialMisstatementsTable{
		auditorsExpertRiskOfMaterialMisstatementsTable: newAuditorsExpertRiskOfMaterialMisstatementsTableImpl(schemaName, tableName, alias),
		NEW: newAuditorsExpertRiskOfMaterialMisstatementsTableImpl("", "new", ""),
	}
}

func newAuditorsExpertRiskOfMaterialMisstatementsTableImpl(schemaName, tableName, alias string) auditorsExpertRiskOfMaterialMisstatementsTable {
	var (
		IDColumn               = mysql.StringColumn("id")
		AuditorsExpertIDColumn = mysql.StringColumn("auditors_expert_id")
		RiskOfMaterialIDColumn = mysql.StringColumn("risk_of_material_id")
		allColumns             = mysql.ColumnList{IDColumn, AuditorsExpertIDColumn, RiskOfMaterialIDColumn}
		mutableColumns         = mysql.ColumnList{AuditorsExpertIDColumn, RiskOfMaterialIDColumn}
	)

	return auditorsExpertRiskOfMaterialMisstatementsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		AuditorsExpertID: AuditorsExpertIDColumn,
		RiskOfMaterialID: RiskOfMaterialIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
