//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var EngagementProgress = newEngagementProgressTable("atlas-blue", "engagement_progress", "")

type engagementProgressTable struct {
	mysql.Table

	// Columns
	ID              mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID    mysql.ColumnString // (DC2Type:guid)
	AuditWorkflow   mysql.ColumnString
	TotalNodesCount mysql.ColumnInteger
	ValidNodesCount mysql.ColumnInteger
	HasConflicts    mysql.ColumnBool
	IsSignedOff     mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type EngagementProgressTable struct {
	engagementProgressTable

	NEW engagementProgressTable
}

// AS creates new EngagementProgressTable with assigned alias
func (a EngagementProgressTable) AS(alias string) *EngagementProgressTable {
	return newEngagementProgressTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EngagementProgressTable with assigned schema name
func (a EngagementProgressTable) FromSchema(schemaName string) *EngagementProgressTable {
	return newEngagementProgressTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EngagementProgressTable with assigned table prefix
func (a EngagementProgressTable) WithPrefix(prefix string) *EngagementProgressTable {
	return newEngagementProgressTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EngagementProgressTable with assigned table suffix
func (a EngagementProgressTable) WithSuffix(suffix string) *EngagementProgressTable {
	return newEngagementProgressTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEngagementProgressTable(schemaName, tableName, alias string) *EngagementProgressTable {
	return &EngagementProgressTable{
		engagementProgressTable: newEngagementProgressTableImpl(schemaName, tableName, alias),
		NEW:                     newEngagementProgressTableImpl("", "new", ""),
	}
}

func newEngagementProgressTableImpl(schemaName, tableName, alias string) engagementProgressTable {
	var (
		IDColumn              = mysql.StringColumn("id")
		EngagementIDColumn    = mysql.StringColumn("engagement_id")
		AuditWorkflowColumn   = mysql.StringColumn("audit_workflow")
		TotalNodesCountColumn = mysql.IntegerColumn("total_nodes_count")
		ValidNodesCountColumn = mysql.IntegerColumn("valid_nodes_count")
		HasConflictsColumn    = mysql.BoolColumn("has_conflicts")
		IsSignedOffColumn     = mysql.BoolColumn("is_signed_off")
		allColumns            = mysql.ColumnList{IDColumn, EngagementIDColumn, AuditWorkflowColumn, TotalNodesCountColumn, ValidNodesCountColumn, HasConflictsColumn, IsSignedOffColumn}
		mutableColumns        = mysql.ColumnList{EngagementIDColumn, AuditWorkflowColumn, TotalNodesCountColumn, ValidNodesCountColumn, HasConflictsColumn, IsSignedOffColumn}
	)

	return engagementProgressTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		EngagementID:    EngagementIDColumn,
		AuditWorkflow:   AuditWorkflowColumn,
		TotalNodesCount: TotalNodesCountColumn,
		ValidNodesCount: ValidNodesCountColumn,
		HasConflicts:    HasConflictsColumn,
		IsSignedOff:     IsSignedOffColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
