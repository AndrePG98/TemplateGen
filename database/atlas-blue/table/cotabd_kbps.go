//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CotabdKbps = newCotabdKbpsTable("atlas-blue", "cotabd_kbps", "")

type cotabdKbpsTable struct {
	mysql.Table

	// Columns
	ID                                 mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	KbpID                              mysql.ColumnString // (DC2Type:guid)
	CotabID                            mysql.ColumnString // (DC2Type:guid)
	SufficientAppropriateAuditEvidence mysql.ColumnBool
	Comment                            mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type CotabdKbpsTable struct {
	cotabdKbpsTable

	NEW cotabdKbpsTable
}

// AS creates new CotabdKbpsTable with assigned alias
func (a CotabdKbpsTable) AS(alias string) *CotabdKbpsTable {
	return newCotabdKbpsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CotabdKbpsTable with assigned schema name
func (a CotabdKbpsTable) FromSchema(schemaName string) *CotabdKbpsTable {
	return newCotabdKbpsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CotabdKbpsTable with assigned table prefix
func (a CotabdKbpsTable) WithPrefix(prefix string) *CotabdKbpsTable {
	return newCotabdKbpsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CotabdKbpsTable with assigned table suffix
func (a CotabdKbpsTable) WithSuffix(suffix string) *CotabdKbpsTable {
	return newCotabdKbpsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCotabdKbpsTable(schemaName, tableName, alias string) *CotabdKbpsTable {
	return &CotabdKbpsTable{
		cotabdKbpsTable: newCotabdKbpsTableImpl(schemaName, tableName, alias),
		NEW:             newCotabdKbpsTableImpl("", "new", ""),
	}
}

func newCotabdKbpsTableImpl(schemaName, tableName, alias string) cotabdKbpsTable {
	var (
		IDColumn                                 = mysql.StringColumn("id")
		KbpIDColumn                              = mysql.StringColumn("kbp_id")
		CotabIDColumn                            = mysql.StringColumn("cotab_id")
		SufficientAppropriateAuditEvidenceColumn = mysql.BoolColumn("sufficient_appropriate_audit_evidence")
		CommentColumn                            = mysql.StringColumn("comment")
		allColumns                               = mysql.ColumnList{IDColumn, KbpIDColumn, CotabIDColumn, SufficientAppropriateAuditEvidenceColumn, CommentColumn}
		mutableColumns                           = mysql.ColumnList{KbpIDColumn, CotabIDColumn, SufficientAppropriateAuditEvidenceColumn, CommentColumn}
	)

	return cotabdKbpsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                                 IDColumn,
		KbpID:                              KbpIDColumn,
		CotabID:                            CotabIDColumn,
		SufficientAppropriateAuditEvidence: SufficientAppropriateAuditEvidenceColumn,
		Comment:                            CommentColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
