//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var PlanningMateriality = newPlanningMaterialityTable("atlas-blue", "planning_materiality", "")

type planningMaterialityTable struct {
	mysql.Table

	// Columns
	ID                                             mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID                                   mysql.ColumnString // (DC2Type:guid)
	NodeID                                         mysql.ColumnString
	EntityStatus                                   mysql.ColumnString
	BasisLovID                                     mysql.ColumnString
	OtherBasisName                                 mysql.ColumnString
	PeriodEndOfSourceDataUsed                      mysql.ColumnTimestamp // (DC2Type:datetime_immutable)
	FiguresBelowDisplayedInLovID                   mysql.ColumnString
	RationaleRelatingToBenchmark                   mysql.ColumnString
	FinancialStatementQuantum                      mysql.ColumnFloat
	FinancialStatementPercentageSelected           mysql.ColumnFloat
	FinancialStatementRationale                    mysql.ColumnString
	ChosenFinancialStatementMateriality            mysql.ColumnFloat
	PerformanceStatementPercentageSelected         mysql.ColumnFloat
	PerformanceStatementRationale                  mysql.ColumnString
	ChosenPerformanceMateriality                   mysql.ColumnFloat
	ClearlyTrivialThresholdPercentageSelectedLovID mysql.ColumnString
	Rationale                                      mysql.ColumnString
	ChosenClearlyTrivialThreshold                  mysql.ColumnFloat
	SelectedBenchmark                              mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type PlanningMaterialityTable struct {
	planningMaterialityTable

	NEW planningMaterialityTable
}

// AS creates new PlanningMaterialityTable with assigned alias
func (a PlanningMaterialityTable) AS(alias string) *PlanningMaterialityTable {
	return newPlanningMaterialityTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PlanningMaterialityTable with assigned schema name
func (a PlanningMaterialityTable) FromSchema(schemaName string) *PlanningMaterialityTable {
	return newPlanningMaterialityTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PlanningMaterialityTable with assigned table prefix
func (a PlanningMaterialityTable) WithPrefix(prefix string) *PlanningMaterialityTable {
	return newPlanningMaterialityTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PlanningMaterialityTable with assigned table suffix
func (a PlanningMaterialityTable) WithSuffix(suffix string) *PlanningMaterialityTable {
	return newPlanningMaterialityTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPlanningMaterialityTable(schemaName, tableName, alias string) *PlanningMaterialityTable {
	return &PlanningMaterialityTable{
		planningMaterialityTable: newPlanningMaterialityTableImpl(schemaName, tableName, alias),
		NEW:                      newPlanningMaterialityTableImpl("", "new", ""),
	}
}

func newPlanningMaterialityTableImpl(schemaName, tableName, alias string) planningMaterialityTable {
	var (
		IDColumn                                             = mysql.StringColumn("id")
		EngagementIDColumn                                   = mysql.StringColumn("engagement_id")
		NodeIDColumn                                         = mysql.StringColumn("node_id")
		EntityStatusColumn                                   = mysql.StringColumn("entity_status")
		BasisLovIDColumn                                     = mysql.StringColumn("basis_lov_id")
		OtherBasisNameColumn                                 = mysql.StringColumn("other_basis_name")
		PeriodEndOfSourceDataUsedColumn                      = mysql.TimestampColumn("period_end_of_source_data_used")
		FiguresBelowDisplayedInLovIDColumn                   = mysql.StringColumn("figures_below_displayed_in_lov_id")
		RationaleRelatingToBenchmarkColumn                   = mysql.StringColumn("rationale_relating_to_benchmark")
		FinancialStatementQuantumColumn                      = mysql.FloatColumn("financial_statement_quantum")
		FinancialStatementPercentageSelectedColumn           = mysql.FloatColumn("financial_statement_percentage_selected")
		FinancialStatementRationaleColumn                    = mysql.StringColumn("financial_statement_rationale")
		ChosenFinancialStatementMaterialityColumn            = mysql.FloatColumn("chosen_financial_statement_materiality")
		PerformanceStatementPercentageSelectedColumn         = mysql.FloatColumn("performance_statement_percentage_selected")
		PerformanceStatementRationaleColumn                  = mysql.StringColumn("performance_statement_rationale")
		ChosenPerformanceMaterialityColumn                   = mysql.FloatColumn("chosen_performance_materiality")
		ClearlyTrivialThresholdPercentageSelectedLovIDColumn = mysql.StringColumn("clearly_trivial_threshold_percentage_selected_lov_id")
		RationaleColumn                                      = mysql.StringColumn("rationale")
		ChosenClearlyTrivialThresholdColumn                  = mysql.FloatColumn("chosen_clearly_trivial_threshold")
		SelectedBenchmarkColumn                              = mysql.StringColumn("selected_benchmark")
		allColumns                                           = mysql.ColumnList{IDColumn, EngagementIDColumn, NodeIDColumn, EntityStatusColumn, BasisLovIDColumn, OtherBasisNameColumn, PeriodEndOfSourceDataUsedColumn, FiguresBelowDisplayedInLovIDColumn, RationaleRelatingToBenchmarkColumn, FinancialStatementQuantumColumn, FinancialStatementPercentageSelectedColumn, FinancialStatementRationaleColumn, ChosenFinancialStatementMaterialityColumn, PerformanceStatementPercentageSelectedColumn, PerformanceStatementRationaleColumn, ChosenPerformanceMaterialityColumn, ClearlyTrivialThresholdPercentageSelectedLovIDColumn, RationaleColumn, ChosenClearlyTrivialThresholdColumn, SelectedBenchmarkColumn}
		mutableColumns                                       = mysql.ColumnList{EngagementIDColumn, NodeIDColumn, EntityStatusColumn, BasisLovIDColumn, OtherBasisNameColumn, PeriodEndOfSourceDataUsedColumn, FiguresBelowDisplayedInLovIDColumn, RationaleRelatingToBenchmarkColumn, FinancialStatementQuantumColumn, FinancialStatementPercentageSelectedColumn, FinancialStatementRationaleColumn, ChosenFinancialStatementMaterialityColumn, PerformanceStatementPercentageSelectedColumn, PerformanceStatementRationaleColumn, ChosenPerformanceMaterialityColumn, ClearlyTrivialThresholdPercentageSelectedLovIDColumn, RationaleColumn, ChosenClearlyTrivialThresholdColumn, SelectedBenchmarkColumn}
	)

	return planningMaterialityTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                                     IDColumn,
		EngagementID:                           EngagementIDColumn,
		NodeID:                                 NodeIDColumn,
		EntityStatus:                           EntityStatusColumn,
		BasisLovID:                             BasisLovIDColumn,
		OtherBasisName:                         OtherBasisNameColumn,
		PeriodEndOfSourceDataUsed:              PeriodEndOfSourceDataUsedColumn,
		FiguresBelowDisplayedInLovID:           FiguresBelowDisplayedInLovIDColumn,
		RationaleRelatingToBenchmark:           RationaleRelatingToBenchmarkColumn,
		FinancialStatementQuantum:              FinancialStatementQuantumColumn,
		FinancialStatementPercentageSelected:   FinancialStatementPercentageSelectedColumn,
		FinancialStatementRationale:            FinancialStatementRationaleColumn,
		ChosenFinancialStatementMateriality:    ChosenFinancialStatementMaterialityColumn,
		PerformanceStatementPercentageSelected: PerformanceStatementPercentageSelectedColumn,
		PerformanceStatementRationale:          PerformanceStatementRationaleColumn,
		ChosenPerformanceMateriality:           ChosenPerformanceMaterialityColumn,
		ClearlyTrivialThresholdPercentageSelectedLovID: ClearlyTrivialThresholdPercentageSelectedLovIDColumn,
		Rationale:                     RationaleColumn,
		ChosenClearlyTrivialThreshold: ChosenClearlyTrivialThresholdColumn,
		SelectedBenchmark:             SelectedBenchmarkColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
