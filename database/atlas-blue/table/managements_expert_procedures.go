//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ManagementsExpertProcedures = newManagementsExpertProceduresTable("atlas-blue", "managements_expert_procedures", "")

type managementsExpertProceduresTable struct {
	mysql.Table

	// Columns
	ID                  mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	ManagementsExpertID mysql.ColumnString // (DC2Type:guid)
	ProcedureID         mysql.ColumnString
	RiskTypeID          mysql.ColumnString
	FslrNameID          mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ManagementsExpertProceduresTable struct {
	managementsExpertProceduresTable

	NEW managementsExpertProceduresTable
}

// AS creates new ManagementsExpertProceduresTable with assigned alias
func (a ManagementsExpertProceduresTable) AS(alias string) *ManagementsExpertProceduresTable {
	return newManagementsExpertProceduresTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ManagementsExpertProceduresTable with assigned schema name
func (a ManagementsExpertProceduresTable) FromSchema(schemaName string) *ManagementsExpertProceduresTable {
	return newManagementsExpertProceduresTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ManagementsExpertProceduresTable with assigned table prefix
func (a ManagementsExpertProceduresTable) WithPrefix(prefix string) *ManagementsExpertProceduresTable {
	return newManagementsExpertProceduresTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ManagementsExpertProceduresTable with assigned table suffix
func (a ManagementsExpertProceduresTable) WithSuffix(suffix string) *ManagementsExpertProceduresTable {
	return newManagementsExpertProceduresTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newManagementsExpertProceduresTable(schemaName, tableName, alias string) *ManagementsExpertProceduresTable {
	return &ManagementsExpertProceduresTable{
		managementsExpertProceduresTable: newManagementsExpertProceduresTableImpl(schemaName, tableName, alias),
		NEW:                              newManagementsExpertProceduresTableImpl("", "new", ""),
	}
}

func newManagementsExpertProceduresTableImpl(schemaName, tableName, alias string) managementsExpertProceduresTable {
	var (
		IDColumn                  = mysql.StringColumn("id")
		ManagementsExpertIDColumn = mysql.StringColumn("managements_expert_id")
		ProcedureIDColumn         = mysql.StringColumn("procedure_id")
		RiskTypeIDColumn          = mysql.StringColumn("risk_type_id")
		FslrNameIDColumn          = mysql.StringColumn("fslr_name_id")
		allColumns                = mysql.ColumnList{IDColumn, ManagementsExpertIDColumn, ProcedureIDColumn, RiskTypeIDColumn, FslrNameIDColumn}
		mutableColumns            = mysql.ColumnList{ManagementsExpertIDColumn, ProcedureIDColumn, RiskTypeIDColumn, FslrNameIDColumn}
	)

	return managementsExpertProceduresTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		ManagementsExpertID: ManagementsExpertIDColumn,
		ProcedureID:         ProcedureIDColumn,
		RiskTypeID:          RiskTypeIDColumn,
		FslrNameID:          FslrNameIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
