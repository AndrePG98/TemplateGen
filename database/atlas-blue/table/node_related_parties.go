//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var NodeRelatedParties = newNodeRelatedPartiesTable("atlas-blue", "node_related_parties", "")

type nodeRelatedPartiesTable struct {
	mysql.Table

	// Columns
	ID                                                    mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementMasterfileNodeID                            mysql.ColumnString // (DC2Type:guid)
	AnyFraudRiskFactorsIdentified                         mysql.ColumnBool
	WcgwNameForRelatedPartyRisk                           mysql.ColumnString
	ArrangementsIdentifiedSuggestingRelatedPartyExistence mysql.ColumnBool
	AdditionalInformation1                                mysql.ColumnString
	AdditionalInformation2                                mysql.ColumnString
	AdditionalInformation3                                mysql.ColumnString
	IsValid                                               mysql.ColumnBool
	AwareOfOtherRelatedParties                            mysql.ColumnBool
	AnyTransactionsDeemedSignificantWithAnyRelatedParties mysql.ColumnBool
	HasManagementMadeAnyAssertions                        mysql.ColumnBool
	DocumentFraudRiskFactors                              mysql.ColumnString
	ConsiderFactorsToIndicateRiskMaterial                 mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type NodeRelatedPartiesTable struct {
	nodeRelatedPartiesTable

	NEW nodeRelatedPartiesTable
}

// AS creates new NodeRelatedPartiesTable with assigned alias
func (a NodeRelatedPartiesTable) AS(alias string) *NodeRelatedPartiesTable {
	return newNodeRelatedPartiesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new NodeRelatedPartiesTable with assigned schema name
func (a NodeRelatedPartiesTable) FromSchema(schemaName string) *NodeRelatedPartiesTable {
	return newNodeRelatedPartiesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new NodeRelatedPartiesTable with assigned table prefix
func (a NodeRelatedPartiesTable) WithPrefix(prefix string) *NodeRelatedPartiesTable {
	return newNodeRelatedPartiesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new NodeRelatedPartiesTable with assigned table suffix
func (a NodeRelatedPartiesTable) WithSuffix(suffix string) *NodeRelatedPartiesTable {
	return newNodeRelatedPartiesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newNodeRelatedPartiesTable(schemaName, tableName, alias string) *NodeRelatedPartiesTable {
	return &NodeRelatedPartiesTable{
		nodeRelatedPartiesTable: newNodeRelatedPartiesTableImpl(schemaName, tableName, alias),
		NEW:                     newNodeRelatedPartiesTableImpl("", "new", ""),
	}
}

func newNodeRelatedPartiesTableImpl(schemaName, tableName, alias string) nodeRelatedPartiesTable {
	var (
		IDColumn                                                    = mysql.StringColumn("id")
		EngagementMasterfileNodeIDColumn                            = mysql.StringColumn("engagement_masterfile_node_id")
		AnyFraudRiskFactorsIdentifiedColumn                         = mysql.BoolColumn("any_fraud_risk_factors_identified")
		WcgwNameForRelatedPartyRiskColumn                           = mysql.StringColumn("wcgw_name_for_related_party_risk")
		ArrangementsIdentifiedSuggestingRelatedPartyExistenceColumn = mysql.BoolColumn("arrangements_identified_suggesting_related_party_existence")
		AdditionalInformation1Column                                = mysql.StringColumn("additional_information_1")
		AdditionalInformation2Column                                = mysql.StringColumn("additional_information_2")
		AdditionalInformation3Column                                = mysql.StringColumn("additional_information_3")
		IsValidColumn                                               = mysql.BoolColumn("is_valid")
		AwareOfOtherRelatedPartiesColumn                            = mysql.BoolColumn("aware_of_other_related_parties")
		AnyTransactionsDeemedSignificantWithAnyRelatedPartiesColumn = mysql.BoolColumn("any_transactions_deemed_significant_with_any_related_parties")
		HasManagementMadeAnyAssertionsColumn                        = mysql.BoolColumn("has_management_made_any_assertions")
		DocumentFraudRiskFactorsColumn                              = mysql.StringColumn("document_fraud_risk_factors")
		ConsiderFactorsToIndicateRiskMaterialColumn                 = mysql.BoolColumn("consider_factors_to_indicate_risk_material")
		allColumns                                                  = mysql.ColumnList{IDColumn, EngagementMasterfileNodeIDColumn, AnyFraudRiskFactorsIdentifiedColumn, WcgwNameForRelatedPartyRiskColumn, ArrangementsIdentifiedSuggestingRelatedPartyExistenceColumn, AdditionalInformation1Column, AdditionalInformation2Column, AdditionalInformation3Column, IsValidColumn, AwareOfOtherRelatedPartiesColumn, AnyTransactionsDeemedSignificantWithAnyRelatedPartiesColumn, HasManagementMadeAnyAssertionsColumn, DocumentFraudRiskFactorsColumn, ConsiderFactorsToIndicateRiskMaterialColumn}
		mutableColumns                                              = mysql.ColumnList{EngagementMasterfileNodeIDColumn, AnyFraudRiskFactorsIdentifiedColumn, WcgwNameForRelatedPartyRiskColumn, ArrangementsIdentifiedSuggestingRelatedPartyExistenceColumn, AdditionalInformation1Column, AdditionalInformation2Column, AdditionalInformation3Column, IsValidColumn, AwareOfOtherRelatedPartiesColumn, AnyTransactionsDeemedSignificantWithAnyRelatedPartiesColumn, HasManagementMadeAnyAssertionsColumn, DocumentFraudRiskFactorsColumn, ConsiderFactorsToIndicateRiskMaterialColumn}
	)

	return nodeRelatedPartiesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                            IDColumn,
		EngagementMasterfileNodeID:    EngagementMasterfileNodeIDColumn,
		AnyFraudRiskFactorsIdentified: AnyFraudRiskFactorsIdentifiedColumn,
		WcgwNameForRelatedPartyRisk:   WcgwNameForRelatedPartyRiskColumn,
		ArrangementsIdentifiedSuggestingRelatedPartyExistence: ArrangementsIdentifiedSuggestingRelatedPartyExistenceColumn,
		AdditionalInformation1:                                AdditionalInformation1Column,
		AdditionalInformation2:                                AdditionalInformation2Column,
		AdditionalInformation3:                                AdditionalInformation3Column,
		IsValid:                                               IsValidColumn,
		AwareOfOtherRelatedParties:                            AwareOfOtherRelatedPartiesColumn,
		AnyTransactionsDeemedSignificantWithAnyRelatedParties: AnyTransactionsDeemedSignificantWithAnyRelatedPartiesColumn,
		HasManagementMadeAnyAssertions:                        HasManagementMadeAnyAssertionsColumn,
		DocumentFraudRiskFactors:                              DocumentFraudRiskFactorsColumn,
		ConsiderFactorsToIndicateRiskMaterial:                 ConsiderFactorsToIndicateRiskMaterialColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
