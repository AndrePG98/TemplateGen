//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var OrphanNode = newOrphanNodeTable("atlas-blue", "orphan_node", "")

type orphanNodeTable struct {
	mysql.Table

	// Columns
	ID                                                    mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID                                          mysql.ColumnString // (DC2Type:guid)
	HaveYouReassignedAllDocumentsAttachedToThisOrphanNode mysql.ColumnBool
	IsValid                                               mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type OrphanNodeTable struct {
	orphanNodeTable

	NEW orphanNodeTable
}

// AS creates new OrphanNodeTable with assigned alias
func (a OrphanNodeTable) AS(alias string) *OrphanNodeTable {
	return newOrphanNodeTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OrphanNodeTable with assigned schema name
func (a OrphanNodeTable) FromSchema(schemaName string) *OrphanNodeTable {
	return newOrphanNodeTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OrphanNodeTable with assigned table prefix
func (a OrphanNodeTable) WithPrefix(prefix string) *OrphanNodeTable {
	return newOrphanNodeTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OrphanNodeTable with assigned table suffix
func (a OrphanNodeTable) WithSuffix(suffix string) *OrphanNodeTable {
	return newOrphanNodeTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOrphanNodeTable(schemaName, tableName, alias string) *OrphanNodeTable {
	return &OrphanNodeTable{
		orphanNodeTable: newOrphanNodeTableImpl(schemaName, tableName, alias),
		NEW:             newOrphanNodeTableImpl("", "new", ""),
	}
}

func newOrphanNodeTableImpl(schemaName, tableName, alias string) orphanNodeTable {
	var (
		IDColumn                                                    = mysql.StringColumn("id")
		EngagementIDColumn                                          = mysql.StringColumn("engagement_id")
		HaveYouReassignedAllDocumentsAttachedToThisOrphanNodeColumn = mysql.BoolColumn("have_you_reassigned_all_documents_attached_to_this_orphan_node")
		IsValidColumn                                               = mysql.BoolColumn("is_valid")
		allColumns                                                  = mysql.ColumnList{IDColumn, EngagementIDColumn, HaveYouReassignedAllDocumentsAttachedToThisOrphanNodeColumn, IsValidColumn}
		mutableColumns                                              = mysql.ColumnList{EngagementIDColumn, HaveYouReassignedAllDocumentsAttachedToThisOrphanNodeColumn, IsValidColumn}
	)

	return orphanNodeTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		EngagementID: EngagementIDColumn,
		HaveYouReassignedAllDocumentsAttachedToThisOrphanNode: HaveYouReassignedAllDocumentsAttachedToThisOrphanNodeColumn,
		IsValid: IsValidColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
