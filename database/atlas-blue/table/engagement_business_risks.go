//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var EngagementBusinessRisks = newEngagementBusinessRisksTable("atlas-blue", "engagement_business_risks", "")

type engagementBusinessRisksTable struct {
	mysql.Table

	// Columns
	ID                       mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID             mysql.ColumnString // (DC2Type:guid)
	Name                     mysql.ColumnString
	RiskDescription          mysql.ColumnString
	ManagementResponse       mysql.ColumnString
	FslrName                 mysql.ColumnString
	IsValid                  mysql.ColumnBool
	GoingConcernConclusionID mysql.ColumnString // (DC2Type:guid)

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type EngagementBusinessRisksTable struct {
	engagementBusinessRisksTable

	NEW engagementBusinessRisksTable
}

// AS creates new EngagementBusinessRisksTable with assigned alias
func (a EngagementBusinessRisksTable) AS(alias string) *EngagementBusinessRisksTable {
	return newEngagementBusinessRisksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EngagementBusinessRisksTable with assigned schema name
func (a EngagementBusinessRisksTable) FromSchema(schemaName string) *EngagementBusinessRisksTable {
	return newEngagementBusinessRisksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EngagementBusinessRisksTable with assigned table prefix
func (a EngagementBusinessRisksTable) WithPrefix(prefix string) *EngagementBusinessRisksTable {
	return newEngagementBusinessRisksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EngagementBusinessRisksTable with assigned table suffix
func (a EngagementBusinessRisksTable) WithSuffix(suffix string) *EngagementBusinessRisksTable {
	return newEngagementBusinessRisksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEngagementBusinessRisksTable(schemaName, tableName, alias string) *EngagementBusinessRisksTable {
	return &EngagementBusinessRisksTable{
		engagementBusinessRisksTable: newEngagementBusinessRisksTableImpl(schemaName, tableName, alias),
		NEW:                          newEngagementBusinessRisksTableImpl("", "new", ""),
	}
}

func newEngagementBusinessRisksTableImpl(schemaName, tableName, alias string) engagementBusinessRisksTable {
	var (
		IDColumn                       = mysql.StringColumn("id")
		EngagementIDColumn             = mysql.StringColumn("engagement_id")
		NameColumn                     = mysql.StringColumn("name")
		RiskDescriptionColumn          = mysql.StringColumn("risk_description")
		ManagementResponseColumn       = mysql.StringColumn("management_response")
		FslrNameColumn                 = mysql.StringColumn("fslr_name")
		IsValidColumn                  = mysql.BoolColumn("is_valid")
		GoingConcernConclusionIDColumn = mysql.StringColumn("going_concern_conclusion_id")
		allColumns                     = mysql.ColumnList{IDColumn, EngagementIDColumn, NameColumn, RiskDescriptionColumn, ManagementResponseColumn, FslrNameColumn, IsValidColumn, GoingConcernConclusionIDColumn}
		mutableColumns                 = mysql.ColumnList{EngagementIDColumn, NameColumn, RiskDescriptionColumn, ManagementResponseColumn, FslrNameColumn, IsValidColumn, GoingConcernConclusionIDColumn}
	)

	return engagementBusinessRisksTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                       IDColumn,
		EngagementID:             EngagementIDColumn,
		Name:                     NameColumn,
		RiskDescription:          RiskDescriptionColumn,
		ManagementResponse:       ManagementResponseColumn,
		FslrName:                 FslrNameColumn,
		IsValid:                  IsValidColumn,
		GoingConcernConclusionID: GoingConcernConclusionIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
