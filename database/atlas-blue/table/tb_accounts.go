//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var TbAccounts = newTbAccountsTable("atlas-blue", "tb_accounts", "")

type tbAccountsTable struct {
	mysql.Table

	// Columns
	ID               mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	TrialBalance     mysql.ColumnString // (DC2Type:guid)
	SubFsaID         mysql.ColumnString
	Description      mysql.ColumnString
	Account          mysql.ColumnString
	Reference        mysql.ColumnString
	OpeningBalance   mysql.ColumnFloat
	Debit            mysql.ColumnFloat
	Credit           mysql.ColumnFloat
	ClosingBalance   mysql.ColumnFloat
	Source           mysql.ColumnString
	PreviousSubFsaID mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type TbAccountsTable struct {
	tbAccountsTable

	NEW tbAccountsTable
}

// AS creates new TbAccountsTable with assigned alias
func (a TbAccountsTable) AS(alias string) *TbAccountsTable {
	return newTbAccountsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TbAccountsTable with assigned schema name
func (a TbAccountsTable) FromSchema(schemaName string) *TbAccountsTable {
	return newTbAccountsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TbAccountsTable with assigned table prefix
func (a TbAccountsTable) WithPrefix(prefix string) *TbAccountsTable {
	return newTbAccountsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TbAccountsTable with assigned table suffix
func (a TbAccountsTable) WithSuffix(suffix string) *TbAccountsTable {
	return newTbAccountsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTbAccountsTable(schemaName, tableName, alias string) *TbAccountsTable {
	return &TbAccountsTable{
		tbAccountsTable: newTbAccountsTableImpl(schemaName, tableName, alias),
		NEW:             newTbAccountsTableImpl("", "new", ""),
	}
}

func newTbAccountsTableImpl(schemaName, tableName, alias string) tbAccountsTable {
	var (
		IDColumn               = mysql.StringColumn("id")
		TrialBalanceColumn     = mysql.StringColumn("trial_balance")
		SubFsaIDColumn         = mysql.StringColumn("sub_fsa_id")
		DescriptionColumn      = mysql.StringColumn("description")
		AccountColumn          = mysql.StringColumn("account")
		ReferenceColumn        = mysql.StringColumn("reference")
		OpeningBalanceColumn   = mysql.FloatColumn("opening_balance")
		DebitColumn            = mysql.FloatColumn("debit")
		CreditColumn           = mysql.FloatColumn("credit")
		ClosingBalanceColumn   = mysql.FloatColumn("closing_balance")
		SourceColumn           = mysql.StringColumn("source")
		PreviousSubFsaIDColumn = mysql.StringColumn("previous_sub_fsa_id")
		allColumns             = mysql.ColumnList{IDColumn, TrialBalanceColumn, SubFsaIDColumn, DescriptionColumn, AccountColumn, ReferenceColumn, OpeningBalanceColumn, DebitColumn, CreditColumn, ClosingBalanceColumn, SourceColumn, PreviousSubFsaIDColumn}
		mutableColumns         = mysql.ColumnList{TrialBalanceColumn, SubFsaIDColumn, DescriptionColumn, AccountColumn, ReferenceColumn, OpeningBalanceColumn, DebitColumn, CreditColumn, ClosingBalanceColumn, SourceColumn, PreviousSubFsaIDColumn}
	)

	return tbAccountsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		TrialBalance:     TrialBalanceColumn,
		SubFsaID:         SubFsaIDColumn,
		Description:      DescriptionColumn,
		Account:          AccountColumn,
		Reference:        ReferenceColumn,
		OpeningBalance:   OpeningBalanceColumn,
		Debit:            DebitColumn,
		Credit:           CreditColumn,
		ClosingBalance:   ClosingBalanceColumn,
		Source:           SourceColumn,
		PreviousSubFsaID: PreviousSubFsaIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
