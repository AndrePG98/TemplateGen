//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ItApplicationIdentifications = newItApplicationIdentificationsTable("atlas-blue", "it_application_identifications", "")

type itApplicationIdentificationsTable struct {
	mysql.Table

	// Columns
	ID                                     mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID                           mysql.ColumnString // (DC2Type:guid)
	NodeID                                 mysql.ColumnString
	EntityStatus                           mysql.ColumnString
	Comment                                mysql.ColumnString
	HaveAttachedVisualCartographyItMapping mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ItApplicationIdentificationsTable struct {
	itApplicationIdentificationsTable

	NEW itApplicationIdentificationsTable
}

// AS creates new ItApplicationIdentificationsTable with assigned alias
func (a ItApplicationIdentificationsTable) AS(alias string) *ItApplicationIdentificationsTable {
	return newItApplicationIdentificationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ItApplicationIdentificationsTable with assigned schema name
func (a ItApplicationIdentificationsTable) FromSchema(schemaName string) *ItApplicationIdentificationsTable {
	return newItApplicationIdentificationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ItApplicationIdentificationsTable with assigned table prefix
func (a ItApplicationIdentificationsTable) WithPrefix(prefix string) *ItApplicationIdentificationsTable {
	return newItApplicationIdentificationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ItApplicationIdentificationsTable with assigned table suffix
func (a ItApplicationIdentificationsTable) WithSuffix(suffix string) *ItApplicationIdentificationsTable {
	return newItApplicationIdentificationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newItApplicationIdentificationsTable(schemaName, tableName, alias string) *ItApplicationIdentificationsTable {
	return &ItApplicationIdentificationsTable{
		itApplicationIdentificationsTable: newItApplicationIdentificationsTableImpl(schemaName, tableName, alias),
		NEW:                               newItApplicationIdentificationsTableImpl("", "new", ""),
	}
}

func newItApplicationIdentificationsTableImpl(schemaName, tableName, alias string) itApplicationIdentificationsTable {
	var (
		IDColumn                                     = mysql.StringColumn("id")
		EngagementIDColumn                           = mysql.StringColumn("engagement_id")
		NodeIDColumn                                 = mysql.StringColumn("node_id")
		EntityStatusColumn                           = mysql.StringColumn("entity_status")
		CommentColumn                                = mysql.StringColumn("comment")
		HaveAttachedVisualCartographyItMappingColumn = mysql.BoolColumn("have_attached_visual_cartography_it_mapping")
		allColumns                                   = mysql.ColumnList{IDColumn, EngagementIDColumn, NodeIDColumn, EntityStatusColumn, CommentColumn, HaveAttachedVisualCartographyItMappingColumn}
		mutableColumns                               = mysql.ColumnList{EngagementIDColumn, NodeIDColumn, EntityStatusColumn, CommentColumn, HaveAttachedVisualCartographyItMappingColumn}
	)

	return itApplicationIdentificationsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                                     IDColumn,
		EngagementID:                           EngagementIDColumn,
		NodeID:                                 NodeIDColumn,
		EntityStatus:                           EntityStatusColumn,
		Comment:                                CommentColumn,
		HaveAttachedVisualCartographyItMapping: HaveAttachedVisualCartographyItMappingColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
