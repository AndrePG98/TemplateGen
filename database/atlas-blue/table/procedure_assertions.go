//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ProcedureAssertions = newProcedureAssertionsTable("atlas-blue", "procedure_assertions", "")

type procedureAssertionsTable struct {
	mysql.Table

	// Columns
	ID          mysql.ColumnInteger // @Autoincrement
	ProcedureID mysql.ColumnString  // (DC2Type:guid)
	AssertionID mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ProcedureAssertionsTable struct {
	procedureAssertionsTable

	NEW procedureAssertionsTable
}

// AS creates new ProcedureAssertionsTable with assigned alias
func (a ProcedureAssertionsTable) AS(alias string) *ProcedureAssertionsTable {
	return newProcedureAssertionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProcedureAssertionsTable with assigned schema name
func (a ProcedureAssertionsTable) FromSchema(schemaName string) *ProcedureAssertionsTable {
	return newProcedureAssertionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProcedureAssertionsTable with assigned table prefix
func (a ProcedureAssertionsTable) WithPrefix(prefix string) *ProcedureAssertionsTable {
	return newProcedureAssertionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProcedureAssertionsTable with assigned table suffix
func (a ProcedureAssertionsTable) WithSuffix(suffix string) *ProcedureAssertionsTable {
	return newProcedureAssertionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProcedureAssertionsTable(schemaName, tableName, alias string) *ProcedureAssertionsTable {
	return &ProcedureAssertionsTable{
		procedureAssertionsTable: newProcedureAssertionsTableImpl(schemaName, tableName, alias),
		NEW:                      newProcedureAssertionsTableImpl("", "new", ""),
	}
}

func newProcedureAssertionsTableImpl(schemaName, tableName, alias string) procedureAssertionsTable {
	var (
		IDColumn          = mysql.IntegerColumn("id")
		ProcedureIDColumn = mysql.StringColumn("procedure_id")
		AssertionIDColumn = mysql.StringColumn("assertion_id")
		allColumns        = mysql.ColumnList{IDColumn, ProcedureIDColumn, AssertionIDColumn}
		mutableColumns    = mysql.ColumnList{ProcedureIDColumn, AssertionIDColumn}
	)

	return procedureAssertionsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		ProcedureID: ProcedureIDColumn,
		AssertionID: AssertionIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
