//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var DmsReviewMock = newDmsReviewMockTable("atlas-blue", "dms_review_mock", "")

type dmsReviewMockTable struct {
	mysql.Table

	// Columns
	UUID       mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	FileID     mysql.ColumnString // (DC2Type:guid)
	UploadedBy mysql.ColumnString
	UploadedOn mysql.ColumnString
	Status     mysql.ColumnString
	ReviewedBy mysql.ColumnString
	ReviewedOn mysql.ColumnString
	ModifyBy   mysql.ColumnString
	ModifyOn   mysql.ColumnString
	CreatedAt  mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type DmsReviewMockTable struct {
	dmsReviewMockTable

	NEW dmsReviewMockTable
}

// AS creates new DmsReviewMockTable with assigned alias
func (a DmsReviewMockTable) AS(alias string) *DmsReviewMockTable {
	return newDmsReviewMockTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DmsReviewMockTable with assigned schema name
func (a DmsReviewMockTable) FromSchema(schemaName string) *DmsReviewMockTable {
	return newDmsReviewMockTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DmsReviewMockTable with assigned table prefix
func (a DmsReviewMockTable) WithPrefix(prefix string) *DmsReviewMockTable {
	return newDmsReviewMockTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DmsReviewMockTable with assigned table suffix
func (a DmsReviewMockTable) WithSuffix(suffix string) *DmsReviewMockTable {
	return newDmsReviewMockTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDmsReviewMockTable(schemaName, tableName, alias string) *DmsReviewMockTable {
	return &DmsReviewMockTable{
		dmsReviewMockTable: newDmsReviewMockTableImpl(schemaName, tableName, alias),
		NEW:                newDmsReviewMockTableImpl("", "new", ""),
	}
}

func newDmsReviewMockTableImpl(schemaName, tableName, alias string) dmsReviewMockTable {
	var (
		UUIDColumn       = mysql.StringColumn("uuid")
		FileIDColumn     = mysql.StringColumn("file_id")
		UploadedByColumn = mysql.StringColumn("uploaded_by")
		UploadedOnColumn = mysql.StringColumn("uploaded_on")
		StatusColumn     = mysql.StringColumn("status")
		ReviewedByColumn = mysql.StringColumn("reviewed_by")
		ReviewedOnColumn = mysql.StringColumn("reviewed_on")
		ModifyByColumn   = mysql.StringColumn("modify_by")
		ModifyOnColumn   = mysql.StringColumn("modify_on")
		CreatedAtColumn  = mysql.StringColumn("created_at")
		allColumns       = mysql.ColumnList{UUIDColumn, FileIDColumn, UploadedByColumn, UploadedOnColumn, StatusColumn, ReviewedByColumn, ReviewedOnColumn, ModifyByColumn, ModifyOnColumn, CreatedAtColumn}
		mutableColumns   = mysql.ColumnList{FileIDColumn, UploadedByColumn, UploadedOnColumn, StatusColumn, ReviewedByColumn, ReviewedOnColumn, ModifyByColumn, ModifyOnColumn, CreatedAtColumn}
	)

	return dmsReviewMockTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UUID:       UUIDColumn,
		FileID:     FileIDColumn,
		UploadedBy: UploadedByColumn,
		UploadedOn: UploadedOnColumn,
		Status:     StatusColumn,
		ReviewedBy: ReviewedByColumn,
		ReviewedOn: ReviewedOnColumn,
		ModifyBy:   ModifyByColumn,
		ModifyOn:   ModifyOnColumn,
		CreatedAt:  CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
