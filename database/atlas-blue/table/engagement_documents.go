//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var EngagementDocuments = newEngagementDocumentsTable("atlas-blue", "engagement_documents", "")

type engagementDocumentsTable struct {
	mysql.Table

	// Columns
	ID                 mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	DocumentID         mysql.ColumnInteger
	LastReviewerRole   mysql.ColumnString
	ReviewedByEqr      mysql.ColumnBool
	ReviewConflict     mysql.ColumnBool
	EqrConflict        mysql.ColumnBool
	ReviewSynchronized mysql.ColumnBool
	ReviewWrongSync    mysql.ColumnBool
	EngagementID       mysql.ColumnString // (DC2Type:guid)

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type EngagementDocumentsTable struct {
	engagementDocumentsTable

	NEW engagementDocumentsTable
}

// AS creates new EngagementDocumentsTable with assigned alias
func (a EngagementDocumentsTable) AS(alias string) *EngagementDocumentsTable {
	return newEngagementDocumentsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EngagementDocumentsTable with assigned schema name
func (a EngagementDocumentsTable) FromSchema(schemaName string) *EngagementDocumentsTable {
	return newEngagementDocumentsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EngagementDocumentsTable with assigned table prefix
func (a EngagementDocumentsTable) WithPrefix(prefix string) *EngagementDocumentsTable {
	return newEngagementDocumentsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EngagementDocumentsTable with assigned table suffix
func (a EngagementDocumentsTable) WithSuffix(suffix string) *EngagementDocumentsTable {
	return newEngagementDocumentsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEngagementDocumentsTable(schemaName, tableName, alias string) *EngagementDocumentsTable {
	return &EngagementDocumentsTable{
		engagementDocumentsTable: newEngagementDocumentsTableImpl(schemaName, tableName, alias),
		NEW:                      newEngagementDocumentsTableImpl("", "new", ""),
	}
}

func newEngagementDocumentsTableImpl(schemaName, tableName, alias string) engagementDocumentsTable {
	var (
		IDColumn                 = mysql.StringColumn("id")
		DocumentIDColumn         = mysql.IntegerColumn("document_id")
		LastReviewerRoleColumn   = mysql.StringColumn("last_reviewer_role")
		ReviewedByEqrColumn      = mysql.BoolColumn("reviewed_by_eqr")
		ReviewConflictColumn     = mysql.BoolColumn("review_conflict")
		EqrConflictColumn        = mysql.BoolColumn("eqr_conflict")
		ReviewSynchronizedColumn = mysql.BoolColumn("review_synchronized")
		ReviewWrongSyncColumn    = mysql.BoolColumn("review_wrong_sync")
		EngagementIDColumn       = mysql.StringColumn("engagement_id")
		allColumns               = mysql.ColumnList{IDColumn, DocumentIDColumn, LastReviewerRoleColumn, ReviewedByEqrColumn, ReviewConflictColumn, EqrConflictColumn, ReviewSynchronizedColumn, ReviewWrongSyncColumn, EngagementIDColumn}
		mutableColumns           = mysql.ColumnList{DocumentIDColumn, LastReviewerRoleColumn, ReviewedByEqrColumn, ReviewConflictColumn, EqrConflictColumn, ReviewSynchronizedColumn, ReviewWrongSyncColumn, EngagementIDColumn}
	)

	return engagementDocumentsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		DocumentID:         DocumentIDColumn,
		LastReviewerRole:   LastReviewerRoleColumn,
		ReviewedByEqr:      ReviewedByEqrColumn,
		ReviewConflict:     ReviewConflictColumn,
		EqrConflict:        EqrConflictColumn,
		ReviewSynchronized: ReviewSynchronizedColumn,
		ReviewWrongSync:    ReviewWrongSyncColumn,
		EngagementID:       EngagementIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
