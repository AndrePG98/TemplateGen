//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ConclusionOnControlsKbpControls = newConclusionOnControlsKbpControlsTable("atlas-blue", "conclusion_on_controls_kbp_controls", "")

type conclusionOnControlsKbpControlsTable struct {
	mysql.Table

	// Columns
	ID                           mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	ConclusionOnControlID        mysql.ColumnString // (DC2Type:guid)
	KbpTaskControlID             mysql.ColumnString // (DC2Type:guid)
	ControlRiskAfterEvaluatingOe mysql.ColumnString
	ImpactOnAuditApproach        mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ConclusionOnControlsKbpControlsTable struct {
	conclusionOnControlsKbpControlsTable

	NEW conclusionOnControlsKbpControlsTable
}

// AS creates new ConclusionOnControlsKbpControlsTable with assigned alias
func (a ConclusionOnControlsKbpControlsTable) AS(alias string) *ConclusionOnControlsKbpControlsTable {
	return newConclusionOnControlsKbpControlsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ConclusionOnControlsKbpControlsTable with assigned schema name
func (a ConclusionOnControlsKbpControlsTable) FromSchema(schemaName string) *ConclusionOnControlsKbpControlsTable {
	return newConclusionOnControlsKbpControlsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ConclusionOnControlsKbpControlsTable with assigned table prefix
func (a ConclusionOnControlsKbpControlsTable) WithPrefix(prefix string) *ConclusionOnControlsKbpControlsTable {
	return newConclusionOnControlsKbpControlsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ConclusionOnControlsKbpControlsTable with assigned table suffix
func (a ConclusionOnControlsKbpControlsTable) WithSuffix(suffix string) *ConclusionOnControlsKbpControlsTable {
	return newConclusionOnControlsKbpControlsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newConclusionOnControlsKbpControlsTable(schemaName, tableName, alias string) *ConclusionOnControlsKbpControlsTable {
	return &ConclusionOnControlsKbpControlsTable{
		conclusionOnControlsKbpControlsTable: newConclusionOnControlsKbpControlsTableImpl(schemaName, tableName, alias),
		NEW:                                  newConclusionOnControlsKbpControlsTableImpl("", "new", ""),
	}
}

func newConclusionOnControlsKbpControlsTableImpl(schemaName, tableName, alias string) conclusionOnControlsKbpControlsTable {
	var (
		IDColumn                           = mysql.StringColumn("id")
		ConclusionOnControlIDColumn        = mysql.StringColumn("conclusion_on_control_id")
		KbpTaskControlIDColumn             = mysql.StringColumn("kbp_task_control_id")
		ControlRiskAfterEvaluatingOeColumn = mysql.StringColumn("control_risk_after_evaluating_oe")
		ImpactOnAuditApproachColumn        = mysql.StringColumn("impact_on_audit_approach")
		allColumns                         = mysql.ColumnList{IDColumn, ConclusionOnControlIDColumn, KbpTaskControlIDColumn, ControlRiskAfterEvaluatingOeColumn, ImpactOnAuditApproachColumn}
		mutableColumns                     = mysql.ColumnList{ConclusionOnControlIDColumn, KbpTaskControlIDColumn, ControlRiskAfterEvaluatingOeColumn, ImpactOnAuditApproachColumn}
	)

	return conclusionOnControlsKbpControlsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                           IDColumn,
		ConclusionOnControlID:        ConclusionOnControlIDColumn,
		KbpTaskControlID:             KbpTaskControlIDColumn,
		ControlRiskAfterEvaluatingOe: ControlRiskAfterEvaluatingOeColumn,
		ImpactOnAuditApproach:        ImpactOnAuditApproachColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
