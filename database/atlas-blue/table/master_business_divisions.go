//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var MasterBusinessDivisions = newMasterBusinessDivisionsTable("atlas-blue", "master_business_divisions", "")

type masterBusinessDivisionsTable struct {
	mysql.Table

	// Columns
	ID       mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EntityID mysql.ColumnString // (DC2Type:guid)
	Name     mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type MasterBusinessDivisionsTable struct {
	masterBusinessDivisionsTable

	NEW masterBusinessDivisionsTable
}

// AS creates new MasterBusinessDivisionsTable with assigned alias
func (a MasterBusinessDivisionsTable) AS(alias string) *MasterBusinessDivisionsTable {
	return newMasterBusinessDivisionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MasterBusinessDivisionsTable with assigned schema name
func (a MasterBusinessDivisionsTable) FromSchema(schemaName string) *MasterBusinessDivisionsTable {
	return newMasterBusinessDivisionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MasterBusinessDivisionsTable with assigned table prefix
func (a MasterBusinessDivisionsTable) WithPrefix(prefix string) *MasterBusinessDivisionsTable {
	return newMasterBusinessDivisionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MasterBusinessDivisionsTable with assigned table suffix
func (a MasterBusinessDivisionsTable) WithSuffix(suffix string) *MasterBusinessDivisionsTable {
	return newMasterBusinessDivisionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMasterBusinessDivisionsTable(schemaName, tableName, alias string) *MasterBusinessDivisionsTable {
	return &MasterBusinessDivisionsTable{
		masterBusinessDivisionsTable: newMasterBusinessDivisionsTableImpl(schemaName, tableName, alias),
		NEW:                          newMasterBusinessDivisionsTableImpl("", "new", ""),
	}
}

func newMasterBusinessDivisionsTableImpl(schemaName, tableName, alias string) masterBusinessDivisionsTable {
	var (
		IDColumn       = mysql.StringColumn("id")
		EntityIDColumn = mysql.StringColumn("entity_id")
		NameColumn     = mysql.StringColumn("name")
		allColumns     = mysql.ColumnList{IDColumn, EntityIDColumn, NameColumn}
		mutableColumns = mysql.ColumnList{EntityIDColumn, NameColumn}
	)

	return masterBusinessDivisionsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		EntityID: EntityIDColumn,
		Name:     NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
