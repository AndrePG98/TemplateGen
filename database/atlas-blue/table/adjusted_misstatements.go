//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var AdjustedMisstatements = newAdjustedMisstatementsTable("atlas-blue", "adjusted_misstatements", "")

type adjustedMisstatementsTable struct {
	mysql.Table

	// Columns
	ID                              mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	JournalMisstatementCorrectionID mysql.ColumnString // (DC2Type:guid)
	ApplyToTb                       mysql.ColumnBool
	Deleted                         mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type AdjustedMisstatementsTable struct {
	adjustedMisstatementsTable

	NEW adjustedMisstatementsTable
}

// AS creates new AdjustedMisstatementsTable with assigned alias
func (a AdjustedMisstatementsTable) AS(alias string) *AdjustedMisstatementsTable {
	return newAdjustedMisstatementsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AdjustedMisstatementsTable with assigned schema name
func (a AdjustedMisstatementsTable) FromSchema(schemaName string) *AdjustedMisstatementsTable {
	return newAdjustedMisstatementsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AdjustedMisstatementsTable with assigned table prefix
func (a AdjustedMisstatementsTable) WithPrefix(prefix string) *AdjustedMisstatementsTable {
	return newAdjustedMisstatementsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AdjustedMisstatementsTable with assigned table suffix
func (a AdjustedMisstatementsTable) WithSuffix(suffix string) *AdjustedMisstatementsTable {
	return newAdjustedMisstatementsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAdjustedMisstatementsTable(schemaName, tableName, alias string) *AdjustedMisstatementsTable {
	return &AdjustedMisstatementsTable{
		adjustedMisstatementsTable: newAdjustedMisstatementsTableImpl(schemaName, tableName, alias),
		NEW:                        newAdjustedMisstatementsTableImpl("", "new", ""),
	}
}

func newAdjustedMisstatementsTableImpl(schemaName, tableName, alias string) adjustedMisstatementsTable {
	var (
		IDColumn                              = mysql.StringColumn("id")
		JournalMisstatementCorrectionIDColumn = mysql.StringColumn("journal_misstatement_correction_id")
		ApplyToTbColumn                       = mysql.BoolColumn("apply_to_tb")
		DeletedColumn                         = mysql.BoolColumn("deleted")
		allColumns                            = mysql.ColumnList{IDColumn, JournalMisstatementCorrectionIDColumn, ApplyToTbColumn, DeletedColumn}
		mutableColumns                        = mysql.ColumnList{JournalMisstatementCorrectionIDColumn, ApplyToTbColumn, DeletedColumn}
	)

	return adjustedMisstatementsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                              IDColumn,
		JournalMisstatementCorrectionID: JournalMisstatementCorrectionIDColumn,
		ApplyToTb:                       ApplyToTbColumn,
		Deleted:                         DeletedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
