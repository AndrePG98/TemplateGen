//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var NodeRelatedPartyCotabds = newNodeRelatedPartyCotabdsTable("atlas-blue", "node_related_party_cotabds", "")

type nodeRelatedPartyCotabdsTable struct {
	mysql.Table

	// Columns
	ID                 mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	NodeRelatedPartyID mysql.ColumnString // (DC2Type:guid)
	CotabdID           mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type NodeRelatedPartyCotabdsTable struct {
	nodeRelatedPartyCotabdsTable

	NEW nodeRelatedPartyCotabdsTable
}

// AS creates new NodeRelatedPartyCotabdsTable with assigned alias
func (a NodeRelatedPartyCotabdsTable) AS(alias string) *NodeRelatedPartyCotabdsTable {
	return newNodeRelatedPartyCotabdsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new NodeRelatedPartyCotabdsTable with assigned schema name
func (a NodeRelatedPartyCotabdsTable) FromSchema(schemaName string) *NodeRelatedPartyCotabdsTable {
	return newNodeRelatedPartyCotabdsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new NodeRelatedPartyCotabdsTable with assigned table prefix
func (a NodeRelatedPartyCotabdsTable) WithPrefix(prefix string) *NodeRelatedPartyCotabdsTable {
	return newNodeRelatedPartyCotabdsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new NodeRelatedPartyCotabdsTable with assigned table suffix
func (a NodeRelatedPartyCotabdsTable) WithSuffix(suffix string) *NodeRelatedPartyCotabdsTable {
	return newNodeRelatedPartyCotabdsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newNodeRelatedPartyCotabdsTable(schemaName, tableName, alias string) *NodeRelatedPartyCotabdsTable {
	return &NodeRelatedPartyCotabdsTable{
		nodeRelatedPartyCotabdsTable: newNodeRelatedPartyCotabdsTableImpl(schemaName, tableName, alias),
		NEW:                          newNodeRelatedPartyCotabdsTableImpl("", "new", ""),
	}
}

func newNodeRelatedPartyCotabdsTableImpl(schemaName, tableName, alias string) nodeRelatedPartyCotabdsTable {
	var (
		IDColumn                 = mysql.StringColumn("id")
		NodeRelatedPartyIDColumn = mysql.StringColumn("node_related_party_id")
		CotabdIDColumn           = mysql.StringColumn("cotabd_id")
		allColumns               = mysql.ColumnList{IDColumn, NodeRelatedPartyIDColumn, CotabdIDColumn}
		mutableColumns           = mysql.ColumnList{NodeRelatedPartyIDColumn, CotabdIDColumn}
	)

	return nodeRelatedPartyCotabdsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		NodeRelatedPartyID: NodeRelatedPartyIDColumn,
		CotabdID:           CotabdIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
