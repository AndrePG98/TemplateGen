//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var EngagementKbps = newEngagementKbpsTable("atlas-blue", "engagement_kbps", "")

type engagementKbpsTable struct {
	mysql.Table

	// Columns
	ID                       mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID             mysql.ColumnString // (DC2Type:guid)
	Name                     mysql.ColumnString
	Documentation            mysql.ColumnString
	SourceID                 mysql.ColumnString
	WalkThroughDocumentation mysql.ColumnBool
	Comment                  mysql.ColumnString
	Label                    mysql.ColumnString // (DC2Type:json)
	DateLastLabelModified    mysql.ColumnString // (DC2Type:json)

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type EngagementKbpsTable struct {
	engagementKbpsTable

	NEW engagementKbpsTable
}

// AS creates new EngagementKbpsTable with assigned alias
func (a EngagementKbpsTable) AS(alias string) *EngagementKbpsTable {
	return newEngagementKbpsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EngagementKbpsTable with assigned schema name
func (a EngagementKbpsTable) FromSchema(schemaName string) *EngagementKbpsTable {
	return newEngagementKbpsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EngagementKbpsTable with assigned table prefix
func (a EngagementKbpsTable) WithPrefix(prefix string) *EngagementKbpsTable {
	return newEngagementKbpsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EngagementKbpsTable with assigned table suffix
func (a EngagementKbpsTable) WithSuffix(suffix string) *EngagementKbpsTable {
	return newEngagementKbpsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEngagementKbpsTable(schemaName, tableName, alias string) *EngagementKbpsTable {
	return &EngagementKbpsTable{
		engagementKbpsTable: newEngagementKbpsTableImpl(schemaName, tableName, alias),
		NEW:                 newEngagementKbpsTableImpl("", "new", ""),
	}
}

func newEngagementKbpsTableImpl(schemaName, tableName, alias string) engagementKbpsTable {
	var (
		IDColumn                       = mysql.StringColumn("id")
		EngagementIDColumn             = mysql.StringColumn("engagement_id")
		NameColumn                     = mysql.StringColumn("name")
		DocumentationColumn            = mysql.StringColumn("documentation")
		SourceIDColumn                 = mysql.StringColumn("source_id")
		WalkThroughDocumentationColumn = mysql.BoolColumn("walk_through_documentation")
		CommentColumn                  = mysql.StringColumn("comment")
		LabelColumn                    = mysql.StringColumn("label")
		DateLastLabelModifiedColumn    = mysql.StringColumn("date_last_label_modified")
		allColumns                     = mysql.ColumnList{IDColumn, EngagementIDColumn, NameColumn, DocumentationColumn, SourceIDColumn, WalkThroughDocumentationColumn, CommentColumn, LabelColumn, DateLastLabelModifiedColumn}
		mutableColumns                 = mysql.ColumnList{EngagementIDColumn, NameColumn, DocumentationColumn, SourceIDColumn, WalkThroughDocumentationColumn, CommentColumn, LabelColumn, DateLastLabelModifiedColumn}
	)

	return engagementKbpsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                       IDColumn,
		EngagementID:             EngagementIDColumn,
		Name:                     NameColumn,
		Documentation:            DocumentationColumn,
		SourceID:                 SourceIDColumn,
		WalkThroughDocumentation: WalkThroughDocumentationColumn,
		Comment:                  CommentColumn,
		Label:                    LabelColumn,
		DateLastLabelModified:    DateLastLabelModifiedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
