//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var PerformanceMaterialityFactors = newPerformanceMaterialityFactorsTable("atlas-blue", "performance_materiality_factors", "")

type performanceMaterialityFactorsTable struct {
	mysql.Table

	// Columns
	ID                        mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	PlanningMaterialityID     mysql.ColumnString // (DC2Type:guid)
	RevisedMaterialityID      mysql.ColumnString // (DC2Type:guid)
	ConsiderationFactorsLovID mysql.ColumnString
	OtherConsiderationsFactor mysql.ColumnString
	AnswerDtID                mysql.ColumnString
	ImpactDtID                mysql.ColumnString
	State                     mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type PerformanceMaterialityFactorsTable struct {
	performanceMaterialityFactorsTable

	NEW performanceMaterialityFactorsTable
}

// AS creates new PerformanceMaterialityFactorsTable with assigned alias
func (a PerformanceMaterialityFactorsTable) AS(alias string) *PerformanceMaterialityFactorsTable {
	return newPerformanceMaterialityFactorsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PerformanceMaterialityFactorsTable with assigned schema name
func (a PerformanceMaterialityFactorsTable) FromSchema(schemaName string) *PerformanceMaterialityFactorsTable {
	return newPerformanceMaterialityFactorsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PerformanceMaterialityFactorsTable with assigned table prefix
func (a PerformanceMaterialityFactorsTable) WithPrefix(prefix string) *PerformanceMaterialityFactorsTable {
	return newPerformanceMaterialityFactorsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PerformanceMaterialityFactorsTable with assigned table suffix
func (a PerformanceMaterialityFactorsTable) WithSuffix(suffix string) *PerformanceMaterialityFactorsTable {
	return newPerformanceMaterialityFactorsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPerformanceMaterialityFactorsTable(schemaName, tableName, alias string) *PerformanceMaterialityFactorsTable {
	return &PerformanceMaterialityFactorsTable{
		performanceMaterialityFactorsTable: newPerformanceMaterialityFactorsTableImpl(schemaName, tableName, alias),
		NEW:                                newPerformanceMaterialityFactorsTableImpl("", "new", ""),
	}
}

func newPerformanceMaterialityFactorsTableImpl(schemaName, tableName, alias string) performanceMaterialityFactorsTable {
	var (
		IDColumn                        = mysql.StringColumn("id")
		PlanningMaterialityIDColumn     = mysql.StringColumn("planning_materiality_id")
		RevisedMaterialityIDColumn      = mysql.StringColumn("revised_materiality_id")
		ConsiderationFactorsLovIDColumn = mysql.StringColumn("consideration_factors_lov_id")
		OtherConsiderationsFactorColumn = mysql.StringColumn("other_considerations_factor")
		AnswerDtIDColumn                = mysql.StringColumn("answer_dt_id")
		ImpactDtIDColumn                = mysql.StringColumn("impact_dt_id")
		StateColumn                     = mysql.StringColumn("state")
		allColumns                      = mysql.ColumnList{IDColumn, PlanningMaterialityIDColumn, RevisedMaterialityIDColumn, ConsiderationFactorsLovIDColumn, OtherConsiderationsFactorColumn, AnswerDtIDColumn, ImpactDtIDColumn, StateColumn}
		mutableColumns                  = mysql.ColumnList{PlanningMaterialityIDColumn, RevisedMaterialityIDColumn, ConsiderationFactorsLovIDColumn, OtherConsiderationsFactorColumn, AnswerDtIDColumn, ImpactDtIDColumn, StateColumn}
	)

	return performanceMaterialityFactorsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                        IDColumn,
		PlanningMaterialityID:     PlanningMaterialityIDColumn,
		RevisedMaterialityID:      RevisedMaterialityIDColumn,
		ConsiderationFactorsLovID: ConsiderationFactorsLovIDColumn,
		OtherConsiderationsFactor: OtherConsiderationsFactorColumn,
		AnswerDtID:                AnswerDtIDColumn,
		ImpactDtID:                ImpactDtIDColumn,
		State:                     StateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
