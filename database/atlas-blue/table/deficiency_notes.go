//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var DeficiencyNotes = newDeficiencyNotesTable("atlas-blue", "deficiency_notes", "")

type deficiencyNotesTable struct {
	mysql.Table

	// Columns
	ID                          mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	ApprovedBy                  mysql.ColumnString // (DC2Type:guid)
	ResolvedBy                  mysql.ColumnString // (DC2Type:guid)
	Period                      mysql.ColumnTimestamp
	PriorityRanking             mysql.ColumnString
	DescriptionOfDeficiency     mysql.ColumnString
	PotentialEffects            mysql.ColumnString
	Recommendation              mysql.ColumnString
	LinkToWorkPaper             mysql.ColumnString
	ManagementResponse          mysql.ColumnString
	RemedialActionsOrSafeguards mysql.ColumnString
	ApprovedOn                  mysql.ColumnTimestamp // (DC2Type:datetime_immutable)
	ResolvedOn                  mysql.ColumnTimestamp // (DC2Type:datetime_immutable)
	ItemID                      mysql.ColumnString
	ItemType                    mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type DeficiencyNotesTable struct {
	deficiencyNotesTable

	NEW deficiencyNotesTable
}

// AS creates new DeficiencyNotesTable with assigned alias
func (a DeficiencyNotesTable) AS(alias string) *DeficiencyNotesTable {
	return newDeficiencyNotesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DeficiencyNotesTable with assigned schema name
func (a DeficiencyNotesTable) FromSchema(schemaName string) *DeficiencyNotesTable {
	return newDeficiencyNotesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DeficiencyNotesTable with assigned table prefix
func (a DeficiencyNotesTable) WithPrefix(prefix string) *DeficiencyNotesTable {
	return newDeficiencyNotesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DeficiencyNotesTable with assigned table suffix
func (a DeficiencyNotesTable) WithSuffix(suffix string) *DeficiencyNotesTable {
	return newDeficiencyNotesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDeficiencyNotesTable(schemaName, tableName, alias string) *DeficiencyNotesTable {
	return &DeficiencyNotesTable{
		deficiencyNotesTable: newDeficiencyNotesTableImpl(schemaName, tableName, alias),
		NEW:                  newDeficiencyNotesTableImpl("", "new", ""),
	}
}

func newDeficiencyNotesTableImpl(schemaName, tableName, alias string) deficiencyNotesTable {
	var (
		IDColumn                          = mysql.StringColumn("id")
		ApprovedByColumn                  = mysql.StringColumn("approved_by")
		ResolvedByColumn                  = mysql.StringColumn("resolved_by")
		PeriodColumn                      = mysql.TimestampColumn("period")
		PriorityRankingColumn             = mysql.StringColumn("priority_ranking")
		DescriptionOfDeficiencyColumn     = mysql.StringColumn("description_of_deficiency")
		PotentialEffectsColumn            = mysql.StringColumn("potential_effects")
		RecommendationColumn              = mysql.StringColumn("recommendation")
		LinkToWorkPaperColumn             = mysql.StringColumn("link_to_work_paper")
		ManagementResponseColumn          = mysql.StringColumn("management_response")
		RemedialActionsOrSafeguardsColumn = mysql.StringColumn("remedial_actions_or_safeguards")
		ApprovedOnColumn                  = mysql.TimestampColumn("approved_on")
		ResolvedOnColumn                  = mysql.TimestampColumn("resolved_on")
		ItemIDColumn                      = mysql.StringColumn("item_id")
		ItemTypeColumn                    = mysql.StringColumn("item_type")
		allColumns                        = mysql.ColumnList{IDColumn, ApprovedByColumn, ResolvedByColumn, PeriodColumn, PriorityRankingColumn, DescriptionOfDeficiencyColumn, PotentialEffectsColumn, RecommendationColumn, LinkToWorkPaperColumn, ManagementResponseColumn, RemedialActionsOrSafeguardsColumn, ApprovedOnColumn, ResolvedOnColumn, ItemIDColumn, ItemTypeColumn}
		mutableColumns                    = mysql.ColumnList{ApprovedByColumn, ResolvedByColumn, PeriodColumn, PriorityRankingColumn, DescriptionOfDeficiencyColumn, PotentialEffectsColumn, RecommendationColumn, LinkToWorkPaperColumn, ManagementResponseColumn, RemedialActionsOrSafeguardsColumn, ApprovedOnColumn, ResolvedOnColumn, ItemIDColumn, ItemTypeColumn}
	)

	return deficiencyNotesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                          IDColumn,
		ApprovedBy:                  ApprovedByColumn,
		ResolvedBy:                  ResolvedByColumn,
		Period:                      PeriodColumn,
		PriorityRanking:             PriorityRankingColumn,
		DescriptionOfDeficiency:     DescriptionOfDeficiencyColumn,
		PotentialEffects:            PotentialEffectsColumn,
		Recommendation:              RecommendationColumn,
		LinkToWorkPaper:             LinkToWorkPaperColumn,
		ManagementResponse:          ManagementResponseColumn,
		RemedialActionsOrSafeguards: RemedialActionsOrSafeguardsColumn,
		ApprovedOn:                  ApprovedOnColumn,
		ResolvedOn:                  ResolvedOnColumn,
		ItemID:                      ItemIDColumn,
		ItemType:                    ItemTypeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
