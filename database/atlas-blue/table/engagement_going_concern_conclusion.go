//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var EngagementGoingConcernConclusion = newEngagementGoingConcernConclusionTable("atlas-blue", "engagement_going_concern_conclusion", "")

type engagementGoingConcernConclusionTable struct {
	mysql.Table

	// Columns
	ID                                            mysql.ColumnString // @UUID("v4")(DC2Type:guid)
	EngagementID                                  mysql.ColumnString // (DC2Type:guid)
	RiskRating                                    mysql.ColumnString
	BasisAccounting                               mysql.ColumnString
	EventsConditions                              mysql.ColumnBool
	MaterialUncertainty                           mysql.ColumnBool
	ConclusionLovID                               mysql.ColumnString
	ExpertRequred                                 mysql.ColumnBool
	RiskAssessment                                mysql.ColumnString
	RiskAssessmentComment                         mysql.ColumnString
	RiskCommunication                             mysql.ColumnBool
	RiskCommunicationComment                      mysql.ColumnString
	IsValid                                       mysql.ColumnBool
	DoesTheFinancialStatementAffectsTheAssessment mysql.ColumnBool
	Documentation                                 mysql.ColumnString
	EvaluateTheNatureAndExtent                    mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type EngagementGoingConcernConclusionTable struct {
	engagementGoingConcernConclusionTable

	NEW engagementGoingConcernConclusionTable
}

// AS creates new EngagementGoingConcernConclusionTable with assigned alias
func (a EngagementGoingConcernConclusionTable) AS(alias string) *EngagementGoingConcernConclusionTable {
	return newEngagementGoingConcernConclusionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EngagementGoingConcernConclusionTable with assigned schema name
func (a EngagementGoingConcernConclusionTable) FromSchema(schemaName string) *EngagementGoingConcernConclusionTable {
	return newEngagementGoingConcernConclusionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EngagementGoingConcernConclusionTable with assigned table prefix
func (a EngagementGoingConcernConclusionTable) WithPrefix(prefix string) *EngagementGoingConcernConclusionTable {
	return newEngagementGoingConcernConclusionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EngagementGoingConcernConclusionTable with assigned table suffix
func (a EngagementGoingConcernConclusionTable) WithSuffix(suffix string) *EngagementGoingConcernConclusionTable {
	return newEngagementGoingConcernConclusionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEngagementGoingConcernConclusionTable(schemaName, tableName, alias string) *EngagementGoingConcernConclusionTable {
	return &EngagementGoingConcernConclusionTable{
		engagementGoingConcernConclusionTable: newEngagementGoingConcernConclusionTableImpl(schemaName, tableName, alias),
		NEW:                                   newEngagementGoingConcernConclusionTableImpl("", "new", ""),
	}
}

func newEngagementGoingConcernConclusionTableImpl(schemaName, tableName, alias string) engagementGoingConcernConclusionTable {
	var (
		IDColumn                                            = mysql.StringColumn("id")
		EngagementIDColumn                                  = mysql.StringColumn("engagement_id")
		RiskRatingColumn                                    = mysql.StringColumn("risk_rating")
		BasisAccountingColumn                               = mysql.StringColumn("basis_accounting")
		EventsConditionsColumn                              = mysql.BoolColumn("events_conditions")
		MaterialUncertaintyColumn                           = mysql.BoolColumn("material_uncertainty")
		ConclusionLovIDColumn                               = mysql.StringColumn("conclusion_lov_id")
		ExpertRequredColumn                                 = mysql.BoolColumn("expert_requred")
		RiskAssessmentColumn                                = mysql.StringColumn("risk_assessment")
		RiskAssessmentCommentColumn                         = mysql.StringColumn("risk_assessment_comment")
		RiskCommunicationColumn                             = mysql.BoolColumn("risk_communication")
		RiskCommunicationCommentColumn                      = mysql.StringColumn("risk_communication_comment")
		IsValidColumn                                       = mysql.BoolColumn("is_valid")
		DoesTheFinancialStatementAffectsTheAssessmentColumn = mysql.BoolColumn("does_the_financial_statement_affects_the_assessment")
		DocumentationColumn                                 = mysql.StringColumn("documentation")
		EvaluateTheNatureAndExtentColumn                    = mysql.StringColumn("evaluate_the_nature_and_extent")
		allColumns                                          = mysql.ColumnList{IDColumn, EngagementIDColumn, RiskRatingColumn, BasisAccountingColumn, EventsConditionsColumn, MaterialUncertaintyColumn, ConclusionLovIDColumn, ExpertRequredColumn, RiskAssessmentColumn, RiskAssessmentCommentColumn, RiskCommunicationColumn, RiskCommunicationCommentColumn, IsValidColumn, DoesTheFinancialStatementAffectsTheAssessmentColumn, DocumentationColumn, EvaluateTheNatureAndExtentColumn}
		mutableColumns                                      = mysql.ColumnList{EngagementIDColumn, RiskRatingColumn, BasisAccountingColumn, EventsConditionsColumn, MaterialUncertaintyColumn, ConclusionLovIDColumn, ExpertRequredColumn, RiskAssessmentColumn, RiskAssessmentCommentColumn, RiskCommunicationColumn, RiskCommunicationCommentColumn, IsValidColumn, DoesTheFinancialStatementAffectsTheAssessmentColumn, DocumentationColumn, EvaluateTheNatureAndExtentColumn}
	)

	return engagementGoingConcernConclusionTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                       IDColumn,
		EngagementID:             EngagementIDColumn,
		RiskRating:               RiskRatingColumn,
		BasisAccounting:          BasisAccountingColumn,
		EventsConditions:         EventsConditionsColumn,
		MaterialUncertainty:      MaterialUncertaintyColumn,
		ConclusionLovID:          ConclusionLovIDColumn,
		ExpertRequred:            ExpertRequredColumn,
		RiskAssessment:           RiskAssessmentColumn,
		RiskAssessmentComment:    RiskAssessmentCommentColumn,
		RiskCommunication:        RiskCommunicationColumn,
		RiskCommunicationComment: RiskCommunicationCommentColumn,
		IsValid:                  IsValidColumn,
		DoesTheFinancialStatementAffectsTheAssessment: DoesTheFinancialStatementAffectsTheAssessmentColumn,
		Documentation:              DocumentationColumn,
		EvaluateTheNatureAndExtent: EvaluateTheNatureAndExtentColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
